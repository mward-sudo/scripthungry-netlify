import gql from 'graphql-tag';
import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** A (potentially binary) string encoded using base64. */
  gh_Base64String: any;
  /** An ISO-8601 encoded date string. */
  gh_Date: any;
  /** An ISO-8601 encoded UTC date string. */
  gh_DateTime: any;
  /** A Git object ID. */
  gh_GitObjectID: any;
  /** Git SSH string */
  gh_GitSSHRemote: any;
  /** An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC. */
  gh_GitTimestamp: any;
  /** A string containing HTML code. */
  gh_HTML: any;
  /** An ISO-8601 encoded UTC date string with millisecond precision. */
  gh_PreciseDateTime: any;
  /** An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string. */
  gh_URI: any;
  /** A valid x509 certificate string */
  gh_X509Certificate: any;
  /** A date string, such as 2007-12-03 (YYYY-MM-DD), compliant with ISO 8601 standard for representation of dates using the Gregorian calendar. */
  graphcms_Date: any;
  /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the date-timeformat outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representationof dates and times using the Gregorian calendar. */
  graphcms_DateTime: any;
  /** Raw JSON value */
  graphcms_Json: any;
  /** The Long scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1. */
  graphcms_Long: any;
  /** Slate-compatible RichText AST */
  graphcms_RichTextAST: any;
};

/** Autogenerated input type of AbortQueuedMigrations */
export type Gh_AbortQueuedMigrationsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the organization that is running the migrations. */
  ownerId: Scalars['ID'];
};

/** Autogenerated return type of AbortQueuedMigrations */
export type Gh_AbortQueuedMigrationsPayload = {
  __typename?: 'gh_AbortQueuedMigrationsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Did the operation succeed? */
  success?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated input type of AcceptEnterpriseAdministratorInvitation */
export type Gh_AcceptEnterpriseAdministratorInvitationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The id of the invitation being accepted */
  invitationId: Scalars['ID'];
};

/** Autogenerated return type of AcceptEnterpriseAdministratorInvitation */
export type Gh_AcceptEnterpriseAdministratorInvitationPayload = {
  __typename?: 'gh_AcceptEnterpriseAdministratorInvitationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The invitation that was accepted. */
  invitation?: Maybe<Gh_EnterpriseAdministratorInvitation>;
  /** A message confirming the result of accepting an administrator invitation. */
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of AcceptTopicSuggestion */
export type Gh_AcceptTopicSuggestionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The name of the suggested topic. */
  name: Scalars['String'];
  /** The Node ID of the repository. */
  repositoryId: Scalars['ID'];
};

/** Autogenerated return type of AcceptTopicSuggestion */
export type Gh_AcceptTopicSuggestionPayload = {
  __typename?: 'gh_AcceptTopicSuggestionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The accepted topic. */
  topic?: Maybe<Gh_Topic>;
};

/** Represents an object which can take actions on GitHub. Typically a User or Bot. */
export type Gh_Actor = {
  /** A URL pointing to the actor's public avatar. */
  avatarUrl: Scalars['gh_URI'];
  /** The username of the actor. */
  login: Scalars['String'];
  /** The HTTP path for this actor. */
  resourcePath: Scalars['gh_URI'];
  /** The HTTP URL for this actor. */
  url: Scalars['gh_URI'];
};


/** Represents an object which can take actions on GitHub. Typically a User or Bot. */
export type Gh_ActorAvatarUrlArgs = {
  size?: InputMaybe<Scalars['Int']>;
};

/** Location information for an actor */
export type Gh_ActorLocation = {
  __typename?: 'gh_ActorLocation';
  /** City */
  city?: Maybe<Scalars['String']>;
  /** Country name */
  country?: Maybe<Scalars['String']>;
  /** Country code */
  countryCode?: Maybe<Scalars['String']>;
  /** Region name */
  region?: Maybe<Scalars['String']>;
  /** Region or state code */
  regionCode?: Maybe<Scalars['String']>;
};

/** The actor's type. */
export enum Gh_ActorType {
  /** Indicates a team actor. */
  Team = 'TEAM',
  /** Indicates a user actor. */
  User = 'USER'
}

/** Autogenerated input type of AddAssigneesToAssignable */
export type Gh_AddAssigneesToAssignableInput = {
  /** The id of the assignable object to add assignees to. */
  assignableId: Scalars['ID'];
  /** The id of users to add as assignees. */
  assigneeIds: Array<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of AddAssigneesToAssignable */
export type Gh_AddAssigneesToAssignablePayload = {
  __typename?: 'gh_AddAssigneesToAssignablePayload';
  /** The item that was assigned. */
  assignable?: Maybe<Gh_Assignable>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of AddComment */
export type Gh_AddCommentInput = {
  /** The contents of the comment. */
  body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Node ID of the subject to modify. */
  subjectId: Scalars['ID'];
};

/** Autogenerated return type of AddComment */
export type Gh_AddCommentPayload = {
  __typename?: 'gh_AddCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The edge from the subject's comment connection. */
  commentEdge?: Maybe<Gh_IssueCommentEdge>;
  /** The subject */
  subject?: Maybe<Gh_Node>;
  /** The edge from the subject's timeline connection. */
  timelineEdge?: Maybe<Gh_IssueTimelineItemEdge>;
};

/** Autogenerated input type of AddDiscussionComment */
export type Gh_AddDiscussionCommentInput = {
  /** The contents of the comment. */
  body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Node ID of the discussion to comment on. */
  discussionId: Scalars['ID'];
  /** The Node ID of the discussion comment within this discussion to reply to. */
  replyToId?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of AddDiscussionComment */
export type Gh_AddDiscussionCommentPayload = {
  __typename?: 'gh_AddDiscussionCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The newly created discussion comment. */
  comment?: Maybe<Gh_DiscussionComment>;
};

/** Autogenerated input type of AddEnterpriseSupportEntitlement */
export type Gh_AddEnterpriseSupportEntitlementInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the Enterprise which the admin belongs to. */
  enterpriseId: Scalars['ID'];
  /** The login of a member who will receive the support entitlement. */
  login: Scalars['String'];
};

/** Autogenerated return type of AddEnterpriseSupportEntitlement */
export type Gh_AddEnterpriseSupportEntitlementPayload = {
  __typename?: 'gh_AddEnterpriseSupportEntitlementPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** A message confirming the result of adding the support entitlement. */
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of AddLabelsToLabelable */
export type Gh_AddLabelsToLabelableInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ids of the labels to add. */
  labelIds: Array<Scalars['ID']>;
  /** The id of the labelable object to add labels to. */
  labelableId: Scalars['ID'];
};

/** Autogenerated return type of AddLabelsToLabelable */
export type Gh_AddLabelsToLabelablePayload = {
  __typename?: 'gh_AddLabelsToLabelablePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The item that was labeled. */
  labelable?: Maybe<Gh_Labelable>;
};

/** Autogenerated input type of AddProjectCard */
export type Gh_AddProjectCardInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The content of the card. Must be a member of the ProjectCardItem union */
  contentId?: InputMaybe<Scalars['ID']>;
  /** The note on the card. */
  note?: InputMaybe<Scalars['String']>;
  /** The Node ID of the ProjectColumn. */
  projectColumnId: Scalars['ID'];
};

/** Autogenerated return type of AddProjectCard */
export type Gh_AddProjectCardPayload = {
  __typename?: 'gh_AddProjectCardPayload';
  /** The edge from the ProjectColumn's card connection. */
  cardEdge?: Maybe<Gh_ProjectCardEdge>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ProjectColumn */
  projectColumn?: Maybe<Gh_ProjectColumn>;
};

/** Autogenerated input type of AddProjectColumn */
export type Gh_AddProjectColumnInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The name of the column. */
  name: Scalars['String'];
  /** The Node ID of the project. */
  projectId: Scalars['ID'];
};

/** Autogenerated return type of AddProjectColumn */
export type Gh_AddProjectColumnPayload = {
  __typename?: 'gh_AddProjectColumnPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The edge from the project's column connection. */
  columnEdge?: Maybe<Gh_ProjectColumnEdge>;
  /** The project */
  project?: Maybe<Gh_Project>;
};

/** Autogenerated input type of AddProjectDraftIssue */
export type Gh_AddProjectDraftIssueInput = {
  /** The IDs of the assignees of the draft issue. */
  assigneeIds?: InputMaybe<Array<Scalars['ID']>>;
  /** The body of the draft issue. */
  body?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the Project to add the draft issue to. */
  projectId: Scalars['ID'];
  /** The title of the draft issue. */
  title: Scalars['String'];
};

/** Autogenerated return type of AddProjectDraftIssue */
export type Gh_AddProjectDraftIssuePayload = {
  __typename?: 'gh_AddProjectDraftIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The draft issue added to the project. */
  projectNextItem?: Maybe<Gh_ProjectNextItem>;
};

/** Autogenerated input type of AddProjectNextItem */
export type Gh_AddProjectNextItemInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The content id of the item (Issue or PullRequest). */
  contentId: Scalars['ID'];
  /** The ID of the Project to add the item to. */
  projectId: Scalars['ID'];
};

/** Autogenerated return type of AddProjectNextItem */
export type Gh_AddProjectNextItemPayload = {
  __typename?: 'gh_AddProjectNextItemPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The item added to the project. */
  projectNextItem?: Maybe<Gh_ProjectNextItem>;
};

/** Autogenerated input type of AddPullRequestReviewComment */
export type Gh_AddPullRequestReviewCommentInput = {
  /** The text of the comment. */
  body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The SHA of the commit to comment on. */
  commitOID?: InputMaybe<Scalars['gh_GitObjectID']>;
  /** The comment id to reply to. */
  inReplyTo?: InputMaybe<Scalars['ID']>;
  /** The relative path of the file to comment on. */
  path?: InputMaybe<Scalars['String']>;
  /** The line index in the diff to comment on. */
  position?: InputMaybe<Scalars['Int']>;
  /** The node ID of the pull request reviewing */
  pullRequestId?: InputMaybe<Scalars['ID']>;
  /** The Node ID of the review to modify. */
  pullRequestReviewId?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of AddPullRequestReviewComment */
export type Gh_AddPullRequestReviewCommentPayload = {
  __typename?: 'gh_AddPullRequestReviewCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The newly created comment. */
  comment?: Maybe<Gh_PullRequestReviewComment>;
  /** The edge from the review's comment connection. */
  commentEdge?: Maybe<Gh_PullRequestReviewCommentEdge>;
};

/** Autogenerated input type of AddPullRequestReview */
export type Gh_AddPullRequestReviewInput = {
  /** The contents of the review body comment. */
  body?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The review line comments. */
  comments?: InputMaybe<Array<InputMaybe<Gh_DraftPullRequestReviewComment>>>;
  /** The commit OID the review pertains to. */
  commitOID?: InputMaybe<Scalars['gh_GitObjectID']>;
  /** The event to perform on the pull request review. */
  event?: InputMaybe<Gh_PullRequestReviewEvent>;
  /** The Node ID of the pull request to modify. */
  pullRequestId: Scalars['ID'];
  /** The review line comment threads. */
  threads?: InputMaybe<Array<InputMaybe<Gh_DraftPullRequestReviewThread>>>;
};

/** Autogenerated return type of AddPullRequestReview */
export type Gh_AddPullRequestReviewPayload = {
  __typename?: 'gh_AddPullRequestReviewPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The newly created pull request review. */
  pullRequestReview?: Maybe<Gh_PullRequestReview>;
  /** The edge from the pull request's review connection. */
  reviewEdge?: Maybe<Gh_PullRequestReviewEdge>;
};

/** Autogenerated input type of AddPullRequestReviewThread */
export type Gh_AddPullRequestReviewThreadInput = {
  /** Body of the thread's first comment. */
  body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The line of the blob to which the thread refers. The end of the line range for multi-line comments. */
  line: Scalars['Int'];
  /** Path to the file being commented on. */
  path: Scalars['String'];
  /** The node ID of the pull request reviewing */
  pullRequestId?: InputMaybe<Scalars['ID']>;
  /** The Node ID of the review to modify. */
  pullRequestReviewId?: InputMaybe<Scalars['ID']>;
  /** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */
  side?: InputMaybe<Gh_DiffSide>;
  /** The first line of the range to which the comment refers. */
  startLine?: InputMaybe<Scalars['Int']>;
  /** The side of the diff on which the start line resides. */
  startSide?: InputMaybe<Gh_DiffSide>;
};

/** Autogenerated return type of AddPullRequestReviewThread */
export type Gh_AddPullRequestReviewThreadPayload = {
  __typename?: 'gh_AddPullRequestReviewThreadPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The newly created thread. */
  thread?: Maybe<Gh_PullRequestReviewThread>;
};

/** Autogenerated input type of AddReaction */
export type Gh_AddReactionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The name of the emoji to react with. */
  content: Gh_ReactionContent;
  /** The Node ID of the subject to modify. */
  subjectId: Scalars['ID'];
};

/** Autogenerated return type of AddReaction */
export type Gh_AddReactionPayload = {
  __typename?: 'gh_AddReactionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The reaction object. */
  reaction?: Maybe<Gh_Reaction>;
  /** The reactable subject. */
  subject?: Maybe<Gh_Reactable>;
};

/** Autogenerated input type of AddStar */
export type Gh_AddStarInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Starrable ID to star. */
  starrableId: Scalars['ID'];
};

/** Autogenerated return type of AddStar */
export type Gh_AddStarPayload = {
  __typename?: 'gh_AddStarPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The starrable. */
  starrable?: Maybe<Gh_Starrable>;
};

/** Autogenerated input type of AddUpvote */
export type Gh_AddUpvoteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Node ID of the discussion or comment to upvote. */
  subjectId: Scalars['ID'];
};

/** Autogenerated return type of AddUpvote */
export type Gh_AddUpvotePayload = {
  __typename?: 'gh_AddUpvotePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The votable subject. */
  subject?: Maybe<Gh_Votable>;
};

/** Autogenerated input type of AddVerifiableDomain */
export type Gh_AddVerifiableDomainInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The URL of the domain */
  domain: Scalars['gh_URI'];
  /** The ID of the owner to add the domain to */
  ownerId: Scalars['ID'];
};

/** Autogenerated return type of AddVerifiableDomain */
export type Gh_AddVerifiableDomainPayload = {
  __typename?: 'gh_AddVerifiableDomainPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The verifiable domain that was added. */
  domain?: Maybe<Gh_VerifiableDomain>;
};

/** Represents a 'added_to_project' event on a given issue or pull request. */
export type Gh_AddedToProjectEvent = Gh_Node & {
  __typename?: 'gh_AddedToProjectEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
};

/** A GitHub App. */
export type Gh_App = Gh_Node & {
  __typename?: 'gh_App';
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The description of the app. */
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  /** The IP addresses of the app. */
  ipAllowListEntries: Gh_IpAllowListEntryConnection;
  /** The hex color code, without the leading '#', for the logo background. */
  logoBackgroundColor: Scalars['String'];
  /** A URL pointing to the app's logo. */
  logoUrl: Scalars['gh_URI'];
  /** The name of the app. */
  name: Scalars['String'];
  /** A slug based on the name of the app for use in URLs. */
  slug: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The URL to the app's homepage. */
  url: Scalars['gh_URI'];
};


/** A GitHub App. */
export type Gh_AppIpAllowListEntriesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_IpAllowListEntryOrder>;
};


/** A GitHub App. */
export type Gh_AppLogoUrlArgs = {
  size?: InputMaybe<Scalars['Int']>;
};

/** Autogenerated input type of ApproveDeployments */
export type Gh_ApproveDeploymentsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Optional comment for approving deployments */
  comment?: InputMaybe<Scalars['String']>;
  /** The ids of environments to reject deployments */
  environmentIds: Array<Scalars['ID']>;
  /** The node ID of the workflow run containing the pending deployments. */
  workflowRunId: Scalars['ID'];
};

/** Autogenerated return type of ApproveDeployments */
export type Gh_ApproveDeploymentsPayload = {
  __typename?: 'gh_ApproveDeploymentsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The affected deployments. */
  deployments?: Maybe<Array<Gh_Deployment>>;
};

/** Autogenerated input type of ApproveVerifiableDomain */
export type Gh_ApproveVerifiableDomainInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the verifiable domain to approve. */
  id: Scalars['ID'];
};

/** Autogenerated return type of ApproveVerifiableDomain */
export type Gh_ApproveVerifiableDomainPayload = {
  __typename?: 'gh_ApproveVerifiableDomainPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The verifiable domain that was approved. */
  domain?: Maybe<Gh_VerifiableDomain>;
};

/** Autogenerated input type of ArchiveRepository */
export type Gh_ArchiveRepositoryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the repository to mark as archived. */
  repositoryId: Scalars['ID'];
};

/** Autogenerated return type of ArchiveRepository */
export type Gh_ArchiveRepositoryPayload = {
  __typename?: 'gh_ArchiveRepositoryPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The repository that was marked as archived. */
  repository?: Maybe<Gh_Repository>;
};

/** An object that can have users assigned to it. */
export type Gh_Assignable = {
  /** A list of Users assigned to this object. */
  assignees: Gh_UserConnection;
};


/** An object that can have users assigned to it. */
export type Gh_AssignableAssigneesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** Represents an 'assigned' event on any assignable object. */
export type Gh_AssignedEvent = Gh_Node & {
  __typename?: 'gh_AssignedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the assignable associated with the event. */
  assignable: Gh_Assignable;
  /** Identifies the user or mannequin that was assigned. */
  assignee?: Maybe<Gh_Assignee>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** Identifies the user who was assigned. */
  user?: Maybe<Gh_User>;
};

/** Types that can be assigned to issues. */
export type Gh_Assignee = Gh_Bot | Gh_Mannequin | Gh_Organization | Gh_User;

/** An entry in the audit log. */
export type Gh_AuditEntry = {
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Types that can initiate an audit log event. */
export type Gh_AuditEntryActor = Gh_Bot | Gh_Organization | Gh_User;

/** Ordering options for Audit Log connections. */
export type Gh_AuditLogOrder = {
  /** The ordering direction. */
  direction?: InputMaybe<Gh_OrderDirection>;
  /** The field to order Audit Logs by. */
  field?: InputMaybe<Gh_AuditLogOrderField>;
};

/** Properties by which Audit Log connections can be ordered. */
export enum Gh_AuditLogOrderField {
  /** Order audit log entries by timestamp */
  CreatedAt = 'CREATED_AT'
}

/** Represents a 'auto_merge_disabled' event on a given pull request. */
export type Gh_AutoMergeDisabledEvent = Gh_Node & {
  __typename?: 'gh_AutoMergeDisabledEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The user who disabled auto-merge for this Pull Request */
  disabler?: Maybe<Gh_User>;
  id: Scalars['ID'];
  /** PullRequest referenced by event */
  pullRequest?: Maybe<Gh_PullRequest>;
  /** The reason auto-merge was disabled */
  reason?: Maybe<Scalars['String']>;
  /** The reason_code relating to why auto-merge was disabled */
  reasonCode?: Maybe<Scalars['String']>;
};

/** Represents a 'auto_merge_enabled' event on a given pull request. */
export type Gh_AutoMergeEnabledEvent = Gh_Node & {
  __typename?: 'gh_AutoMergeEnabledEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The user who enabled auto-merge for this Pull Request */
  enabler?: Maybe<Gh_User>;
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest?: Maybe<Gh_PullRequest>;
};

/** Represents an auto-merge request for a pull request */
export type Gh_AutoMergeRequest = {
  __typename?: 'gh_AutoMergeRequest';
  /** The email address of the author of this auto-merge request. */
  authorEmail?: Maybe<Scalars['String']>;
  /** The commit message of the auto-merge request. */
  commitBody?: Maybe<Scalars['String']>;
  /** The commit title of the auto-merge request. */
  commitHeadline?: Maybe<Scalars['String']>;
  /** When was this auto-merge request was enabled. */
  enabledAt?: Maybe<Scalars['gh_DateTime']>;
  /** The actor who created the auto-merge request. */
  enabledBy?: Maybe<Gh_Actor>;
  /** The merge method of the auto-merge request. */
  mergeMethod: Gh_PullRequestMergeMethod;
  /** The pull request that this auto-merge request is set against. */
  pullRequest: Gh_PullRequest;
};

/** Represents a 'auto_rebase_enabled' event on a given pull request. */
export type Gh_AutoRebaseEnabledEvent = Gh_Node & {
  __typename?: 'gh_AutoRebaseEnabledEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The user who enabled auto-merge (rebase) for this Pull Request */
  enabler?: Maybe<Gh_User>;
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest?: Maybe<Gh_PullRequest>;
};

/** Represents a 'auto_squash_enabled' event on a given pull request. */
export type Gh_AutoSquashEnabledEvent = Gh_Node & {
  __typename?: 'gh_AutoSquashEnabledEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The user who enabled auto-merge (squash) for this Pull Request */
  enabler?: Maybe<Gh_User>;
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest?: Maybe<Gh_PullRequest>;
};

/** Represents a 'automatic_base_change_failed' event on a given pull request. */
export type Gh_AutomaticBaseChangeFailedEvent = Gh_Node & {
  __typename?: 'gh_AutomaticBaseChangeFailedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** The new base for this PR */
  newBase: Scalars['String'];
  /** The old base for this PR */
  oldBase: Scalars['String'];
  /** PullRequest referenced by event. */
  pullRequest: Gh_PullRequest;
};

/** Represents a 'automatic_base_change_succeeded' event on a given pull request. */
export type Gh_AutomaticBaseChangeSucceededEvent = Gh_Node & {
  __typename?: 'gh_AutomaticBaseChangeSucceededEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** The new base for this PR */
  newBase: Scalars['String'];
  /** The old base for this PR */
  oldBase: Scalars['String'];
  /** PullRequest referenced by event. */
  pullRequest: Gh_PullRequest;
};

/** Represents a 'base_ref_changed' event on a given issue or pull request. */
export type Gh_BaseRefChangedEvent = Gh_Node & {
  __typename?: 'gh_BaseRefChangedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the name of the base ref for the pull request after it was changed. */
  currentRefName: Scalars['String'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  /** Identifies the name of the base ref for the pull request before it was changed. */
  previousRefName: Scalars['String'];
  /** PullRequest referenced by event. */
  pullRequest: Gh_PullRequest;
};

/** Represents a 'base_ref_deleted' event on a given pull request. */
export type Gh_BaseRefDeletedEvent = Gh_Node & {
  __typename?: 'gh_BaseRefDeletedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the name of the Ref associated with the `base_ref_deleted` event. */
  baseRefName?: Maybe<Scalars['String']>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest?: Maybe<Gh_PullRequest>;
};

/** Represents a 'base_ref_force_pushed' event on a given pull request. */
export type Gh_BaseRefForcePushedEvent = Gh_Node & {
  __typename?: 'gh_BaseRefForcePushedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the after commit SHA for the 'base_ref_force_pushed' event. */
  afterCommit?: Maybe<Gh_Commit>;
  /** Identifies the before commit SHA for the 'base_ref_force_pushed' event. */
  beforeCommit?: Maybe<Gh_Commit>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest: Gh_PullRequest;
  /** Identifies the fully qualified ref name for the 'base_ref_force_pushed' event. */
  ref?: Maybe<Gh_Ref>;
};

/** Represents a Git blame. */
export type Gh_Blame = {
  __typename?: 'gh_Blame';
  /** The list of ranges from a Git blame. */
  ranges: Array<Gh_BlameRange>;
};

/** Represents a range of information from a Git blame. */
export type Gh_BlameRange = {
  __typename?: 'gh_BlameRange';
  /** Identifies the recency of the change, from 1 (new) to 10 (old). This is calculated as a 2-quantile and determines the length of distance between the median age of all the changes in the file and the recency of the current range's change. */
  age: Scalars['Int'];
  /** Identifies the line author */
  commit: Gh_Commit;
  /** The ending line for the range */
  endingLine: Scalars['Int'];
  /** The starting line for the range */
  startingLine: Scalars['Int'];
};

/** Represents a Git blob. */
export type Gh_Blob = Gh_GitObject & Gh_Node & {
  __typename?: 'gh_Blob';
  /** An abbreviated version of the Git object ID */
  abbreviatedOid: Scalars['String'];
  /** Byte size of Blob object */
  byteSize: Scalars['Int'];
  /** The HTTP path for this Git object */
  commitResourcePath: Scalars['gh_URI'];
  /** The HTTP URL for this Git object */
  commitUrl: Scalars['gh_URI'];
  id: Scalars['ID'];
  /** Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding. */
  isBinary?: Maybe<Scalars['Boolean']>;
  /** Indicates whether the contents is truncated */
  isTruncated: Scalars['Boolean'];
  /** The Git object ID */
  oid: Scalars['gh_GitObjectID'];
  /** The Repository the Git object belongs to */
  repository: Gh_Repository;
  /** UTF8 text data or null if the Blob is binary */
  text?: Maybe<Scalars['String']>;
};

/** A special type of user which takes actions on behalf of GitHub Apps. */
export type Gh_Bot = Gh_Actor & Gh_Node & Gh_UniformResourceLocatable & {
  __typename?: 'gh_Bot';
  /** A URL pointing to the GitHub App's public avatar. */
  avatarUrl: Scalars['gh_URI'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  /** The username of the actor. */
  login: Scalars['String'];
  /** The HTTP path for this bot */
  resourcePath: Scalars['gh_URI'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The HTTP URL for this bot */
  url: Scalars['gh_URI'];
};


/** A special type of user which takes actions on behalf of GitHub Apps. */
export type Gh_BotAvatarUrlArgs = {
  size?: InputMaybe<Scalars['Int']>;
};

/** Types which can be actors for `BranchActorAllowance` objects. */
export type Gh_BranchActorAllowanceActor = Gh_Team | Gh_User;

/** A branch protection rule. */
export type Gh_BranchProtectionRule = Gh_Node & {
  __typename?: 'gh_BranchProtectionRule';
  /** Can this branch be deleted. */
  allowsDeletions: Scalars['Boolean'];
  /** Are force pushes allowed on this branch. */
  allowsForcePushes: Scalars['Boolean'];
  /** Is branch creation a protected operation. */
  blocksCreations: Scalars['Boolean'];
  /** A list of conflicts matching branches protection rule and other branch protection rules */
  branchProtectionRuleConflicts: Gh_BranchProtectionRuleConflictConnection;
  /** A list of actors able to force push for this branch protection rule. */
  bypassForcePushAllowances: Gh_BypassForcePushAllowanceConnection;
  /** A list of actors able to bypass PRs for this branch protection rule. */
  bypassPullRequestAllowances: Gh_BypassPullRequestAllowanceConnection;
  /** The actor who created this branch protection rule. */
  creator?: Maybe<Gh_Actor>;
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** Will new commits pushed to matching branches dismiss pull request review approvals. */
  dismissesStaleReviews: Scalars['Boolean'];
  id: Scalars['ID'];
  /** Can admins overwrite branch protection. */
  isAdminEnforced: Scalars['Boolean'];
  /** Repository refs that are protected by this rule */
  matchingRefs: Gh_RefConnection;
  /** Identifies the protection rule pattern. */
  pattern: Scalars['String'];
  /** A list push allowances for this branch protection rule. */
  pushAllowances: Gh_PushAllowanceConnection;
  /** The repository associated with this branch protection rule. */
  repository?: Maybe<Gh_Repository>;
  /** Number of approving reviews required to update matching branches. */
  requiredApprovingReviewCount?: Maybe<Scalars['Int']>;
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  requiredStatusCheckContexts?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** List of required status checks that must pass for commits to be accepted to matching branches. */
  requiredStatusChecks?: Maybe<Array<Gh_RequiredStatusCheckDescription>>;
  /** Are approving reviews required to update matching branches. */
  requiresApprovingReviews: Scalars['Boolean'];
  /** Are reviews from code owners required to update matching branches. */
  requiresCodeOwnerReviews: Scalars['Boolean'];
  /** Are commits required to be signed. */
  requiresCommitSignatures: Scalars['Boolean'];
  /** Are conversations required to be resolved before merging. */
  requiresConversationResolution: Scalars['Boolean'];
  /** Are merge commits prohibited from being pushed to this branch. */
  requiresLinearHistory: Scalars['Boolean'];
  /** Are status checks required to update matching branches. */
  requiresStatusChecks: Scalars['Boolean'];
  /** Are branches required to be up to date before merging. */
  requiresStrictStatusChecks: Scalars['Boolean'];
  /** Is pushing to matching branches restricted. */
  restrictsPushes: Scalars['Boolean'];
  /** Is dismissal of pull request reviews restricted. */
  restrictsReviewDismissals: Scalars['Boolean'];
  /** A list review dismissal allowances for this branch protection rule. */
  reviewDismissalAllowances: Gh_ReviewDismissalAllowanceConnection;
};


/** A branch protection rule. */
export type Gh_BranchProtectionRuleBranchProtectionRuleConflictsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A branch protection rule. */
export type Gh_BranchProtectionRuleBypassForcePushAllowancesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A branch protection rule. */
export type Gh_BranchProtectionRuleBypassPullRequestAllowancesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A branch protection rule. */
export type Gh_BranchProtectionRuleMatchingRefsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  query?: InputMaybe<Scalars['String']>;
};


/** A branch protection rule. */
export type Gh_BranchProtectionRulePushAllowancesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A branch protection rule. */
export type Gh_BranchProtectionRuleReviewDismissalAllowancesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** A conflict between two branch protection rules. */
export type Gh_BranchProtectionRuleConflict = {
  __typename?: 'gh_BranchProtectionRuleConflict';
  /** Identifies the branch protection rule. */
  branchProtectionRule?: Maybe<Gh_BranchProtectionRule>;
  /** Identifies the conflicting branch protection rule. */
  conflictingBranchProtectionRule?: Maybe<Gh_BranchProtectionRule>;
  /** Identifies the branch ref that has conflicting rules */
  ref?: Maybe<Gh_Ref>;
};

/** The connection type for BranchProtectionRuleConflict. */
export type Gh_BranchProtectionRuleConflictConnection = {
  __typename?: 'gh_BranchProtectionRuleConflictConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_BranchProtectionRuleConflictEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_BranchProtectionRuleConflict>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_BranchProtectionRuleConflictEdge = {
  __typename?: 'gh_BranchProtectionRuleConflictEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_BranchProtectionRuleConflict>;
};

/** The connection type for BranchProtectionRule. */
export type Gh_BranchProtectionRuleConnection = {
  __typename?: 'gh_BranchProtectionRuleConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_BranchProtectionRuleEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_BranchProtectionRule>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_BranchProtectionRuleEdge = {
  __typename?: 'gh_BranchProtectionRuleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_BranchProtectionRule>;
};

/** A team or user who has the ability to bypass a force push requirement on a protected branch. */
export type Gh_BypassForcePushAllowance = Gh_Node & {
  __typename?: 'gh_BypassForcePushAllowance';
  /** The actor that can dismiss. */
  actor?: Maybe<Gh_BranchActorAllowanceActor>;
  /** Identifies the branch protection rule associated with the allowed user or team. */
  branchProtectionRule?: Maybe<Gh_BranchProtectionRule>;
  id: Scalars['ID'];
};

/** The connection type for BypassForcePushAllowance. */
export type Gh_BypassForcePushAllowanceConnection = {
  __typename?: 'gh_BypassForcePushAllowanceConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_BypassForcePushAllowanceEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_BypassForcePushAllowance>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_BypassForcePushAllowanceEdge = {
  __typename?: 'gh_BypassForcePushAllowanceEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_BypassForcePushAllowance>;
};

/** A team or user who has the ability to bypass a pull request requirement on a protected branch. */
export type Gh_BypassPullRequestAllowance = Gh_Node & {
  __typename?: 'gh_BypassPullRequestAllowance';
  /** The actor that can dismiss. */
  actor?: Maybe<Gh_BranchActorAllowanceActor>;
  /** Identifies the branch protection rule associated with the allowed user or team. */
  branchProtectionRule?: Maybe<Gh_BranchProtectionRule>;
  id: Scalars['ID'];
};

/** The connection type for BypassPullRequestAllowance. */
export type Gh_BypassPullRequestAllowanceConnection = {
  __typename?: 'gh_BypassPullRequestAllowanceConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_BypassPullRequestAllowanceEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_BypassPullRequestAllowance>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_BypassPullRequestAllowanceEdge = {
  __typename?: 'gh_BypassPullRequestAllowanceEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_BypassPullRequestAllowance>;
};

/** The Common Vulnerability Scoring System */
export type Gh_Cvss = {
  __typename?: 'gh_CVSS';
  /** The CVSS score associated with this advisory */
  score: Scalars['Float'];
  /** The CVSS vector string associated with this advisory */
  vectorString?: Maybe<Scalars['String']>;
};

/** A common weakness enumeration */
export type Gh_Cwe = Gh_Node & {
  __typename?: 'gh_CWE';
  /** The id of the CWE */
  cweId: Scalars['String'];
  /** A detailed description of this CWE */
  description: Scalars['String'];
  id: Scalars['ID'];
  /** The name of this CWE */
  name: Scalars['String'];
};

/** The connection type for CWE. */
export type Gh_CweConnection = {
  __typename?: 'gh_CWEConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_CweEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Cwe>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_CweEdge = {
  __typename?: 'gh_CWEEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_Cwe>;
};

/** Autogenerated input type of CancelEnterpriseAdminInvitation */
export type Gh_CancelEnterpriseAdminInvitationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Node ID of the pending enterprise administrator invitation. */
  invitationId: Scalars['ID'];
};

/** Autogenerated return type of CancelEnterpriseAdminInvitation */
export type Gh_CancelEnterpriseAdminInvitationPayload = {
  __typename?: 'gh_CancelEnterpriseAdminInvitationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The invitation that was canceled. */
  invitation?: Maybe<Gh_EnterpriseAdministratorInvitation>;
  /** A message confirming the result of canceling an administrator invitation. */
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CancelSponsorship */
export type Gh_CancelSponsorshipInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given. */
  sponsorId?: InputMaybe<Scalars['ID']>;
  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given. */
  sponsorLogin?: InputMaybe<Scalars['String']>;
  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
  sponsorableId?: InputMaybe<Scalars['ID']>;
  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
  sponsorableLogin?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of CancelSponsorship */
export type Gh_CancelSponsorshipPayload = {
  __typename?: 'gh_CancelSponsorshipPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The tier that was being used at the time of cancellation. */
  sponsorsTier?: Maybe<Gh_SponsorsTier>;
};

/** Autogenerated input type of ChangeUserStatus */
export type Gh_ChangeUserStatusInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:. */
  emoji?: InputMaybe<Scalars['String']>;
  /** If set, the user status will not be shown after this date. */
  expiresAt?: InputMaybe<Scalars['gh_DateTime']>;
  /** Whether this status should indicate you are not fully available on GitHub, e.g., you are away. */
  limitedAvailability?: InputMaybe<Scalars['Boolean']>;
  /** A short description of your current status. */
  message?: InputMaybe<Scalars['String']>;
  /** The ID of the organization whose members will be allowed to see the status. If omitted, the status will be publicly visible. */
  organizationId?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of ChangeUserStatus */
export type Gh_ChangeUserStatusPayload = {
  __typename?: 'gh_ChangeUserStatusPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Your updated status. */
  status?: Maybe<Gh_UserStatus>;
};

/** A single check annotation. */
export type Gh_CheckAnnotation = {
  __typename?: 'gh_CheckAnnotation';
  /** The annotation's severity level. */
  annotationLevel?: Maybe<Gh_CheckAnnotationLevel>;
  /** The path to the file that this annotation was made on. */
  blobUrl: Scalars['gh_URI'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The position of this annotation. */
  location: Gh_CheckAnnotationSpan;
  /** The annotation's message. */
  message: Scalars['String'];
  /** The path that this annotation was made on. */
  path: Scalars['String'];
  /** Additional information about the annotation. */
  rawDetails?: Maybe<Scalars['String']>;
  /** The annotation's title */
  title?: Maybe<Scalars['String']>;
};

/** The connection type for CheckAnnotation. */
export type Gh_CheckAnnotationConnection = {
  __typename?: 'gh_CheckAnnotationConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_CheckAnnotationEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_CheckAnnotation>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Information from a check run analysis to specific lines of code. */
export type Gh_CheckAnnotationData = {
  /** Represents an annotation's information level */
  annotationLevel: Gh_CheckAnnotationLevel;
  /** The location of the annotation */
  location: Gh_CheckAnnotationRange;
  /** A short description of the feedback for these lines of code. */
  message: Scalars['String'];
  /** The path of the file to add an annotation to. */
  path: Scalars['String'];
  /** Details about this annotation. */
  rawDetails?: InputMaybe<Scalars['String']>;
  /** The title that represents the annotation. */
  title?: InputMaybe<Scalars['String']>;
};

/** An edge in a connection. */
export type Gh_CheckAnnotationEdge = {
  __typename?: 'gh_CheckAnnotationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_CheckAnnotation>;
};

/** Represents an annotation's information level. */
export enum Gh_CheckAnnotationLevel {
  /** An annotation indicating an inescapable error. */
  Failure = 'FAILURE',
  /** An annotation indicating some information. */
  Notice = 'NOTICE',
  /** An annotation indicating an ignorable error. */
  Warning = 'WARNING'
}

/** A character position in a check annotation. */
export type Gh_CheckAnnotationPosition = {
  __typename?: 'gh_CheckAnnotationPosition';
  /** Column number (1 indexed). */
  column?: Maybe<Scalars['Int']>;
  /** Line number (1 indexed). */
  line: Scalars['Int'];
};

/** Information from a check run analysis to specific lines of code. */
export type Gh_CheckAnnotationRange = {
  /** The ending column of the range. */
  endColumn?: InputMaybe<Scalars['Int']>;
  /** The ending line of the range. */
  endLine: Scalars['Int'];
  /** The starting column of the range. */
  startColumn?: InputMaybe<Scalars['Int']>;
  /** The starting line of the range. */
  startLine: Scalars['Int'];
};

/** An inclusive pair of positions for a check annotation. */
export type Gh_CheckAnnotationSpan = {
  __typename?: 'gh_CheckAnnotationSpan';
  /** End position (inclusive). */
  end: Gh_CheckAnnotationPosition;
  /** Start position (inclusive). */
  start: Gh_CheckAnnotationPosition;
};

/** The possible states for a check suite or run conclusion. */
export enum Gh_CheckConclusionState {
  /** The check suite or run requires action. */
  ActionRequired = 'ACTION_REQUIRED',
  /** The check suite or run has been cancelled. */
  Cancelled = 'CANCELLED',
  /** The check suite or run has failed. */
  Failure = 'FAILURE',
  /** The check suite or run was neutral. */
  Neutral = 'NEUTRAL',
  /** The check suite or run was skipped. */
  Skipped = 'SKIPPED',
  /** The check suite or run was marked stale by GitHub. Only GitHub can use this conclusion. */
  Stale = 'STALE',
  /** The check suite or run has failed at startup. */
  StartupFailure = 'STARTUP_FAILURE',
  /** The check suite or run has succeeded. */
  Success = 'SUCCESS',
  /** The check suite or run has timed out. */
  TimedOut = 'TIMED_OUT'
}

/** A check run. */
export type Gh_CheckRun = Gh_Node & Gh_RequirableByPullRequest & Gh_UniformResourceLocatable & {
  __typename?: 'gh_CheckRun';
  /** The check run's annotations */
  annotations?: Maybe<Gh_CheckAnnotationConnection>;
  /** The check suite that this run is a part of. */
  checkSuite: Gh_CheckSuite;
  /** Identifies the date and time when the check run was completed. */
  completedAt?: Maybe<Scalars['gh_DateTime']>;
  /** The conclusion of the check run. */
  conclusion?: Maybe<Gh_CheckConclusionState>;
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The corresponding deployment for this job, if any */
  deployment?: Maybe<Gh_Deployment>;
  /** The URL from which to find full details of the check run on the integrator's site. */
  detailsUrl?: Maybe<Scalars['gh_URI']>;
  /** A reference for the check run on the integrator's system. */
  externalId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  /** Whether this is required to pass before merging for a specific pull request. */
  isRequired: Scalars['Boolean'];
  /** The name of the check for this check run. */
  name: Scalars['String'];
  /** Information about a pending deployment, if any, in this check run */
  pendingDeploymentRequest?: Maybe<Gh_DeploymentRequest>;
  /** The permalink to the check run summary. */
  permalink: Scalars['gh_URI'];
  /** The repository associated with this check run. */
  repository: Gh_Repository;
  /** The HTTP path for this check run. */
  resourcePath: Scalars['gh_URI'];
  /** Identifies the date and time when the check run was started. */
  startedAt?: Maybe<Scalars['gh_DateTime']>;
  /** The current status of the check run. */
  status: Gh_CheckStatusState;
  /** The check run's steps */
  steps?: Maybe<Gh_CheckStepConnection>;
  /** A string representing the check run's summary */
  summary?: Maybe<Scalars['String']>;
  /** A string representing the check run's text */
  text?: Maybe<Scalars['String']>;
  /** A string representing the check run */
  title?: Maybe<Scalars['String']>;
  /** The HTTP URL for this check run. */
  url: Scalars['gh_URI'];
};


/** A check run. */
export type Gh_CheckRunAnnotationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A check run. */
export type Gh_CheckRunIsRequiredArgs = {
  pullRequestId?: InputMaybe<Scalars['ID']>;
  pullRequestNumber?: InputMaybe<Scalars['Int']>;
};


/** A check run. */
export type Gh_CheckRunStepsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  number?: InputMaybe<Scalars['Int']>;
};

/** Possible further actions the integrator can perform. */
export type Gh_CheckRunAction = {
  /** A short explanation of what this action would do. */
  description: Scalars['String'];
  /** A reference for the action on the integrator's system.  */
  identifier: Scalars['String'];
  /** The text to be displayed on a button in the web UI. */
  label: Scalars['String'];
};

/** The connection type for CheckRun. */
export type Gh_CheckRunConnection = {
  __typename?: 'gh_CheckRunConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_CheckRunEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_CheckRun>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_CheckRunEdge = {
  __typename?: 'gh_CheckRunEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_CheckRun>;
};

/** The filters that are available when fetching check runs. */
export type Gh_CheckRunFilter = {
  /** Filters the check runs created by this application ID. */
  appId?: InputMaybe<Scalars['Int']>;
  /** Filters the check runs by this name. */
  checkName?: InputMaybe<Scalars['String']>;
  /** Filters the check runs by this type. */
  checkType?: InputMaybe<Gh_CheckRunType>;
  /** Filters the check runs by this status. */
  status?: InputMaybe<Gh_CheckStatusState>;
};

/** Descriptive details about the check run. */
export type Gh_CheckRunOutput = {
  /** The annotations that are made as part of the check run. */
  annotations?: InputMaybe<Array<Gh_CheckAnnotationData>>;
  /** Images attached to the check run output displayed in the GitHub pull request UI. */
  images?: InputMaybe<Array<Gh_CheckRunOutputImage>>;
  /** The summary of the check run (supports Commonmark). */
  summary: Scalars['String'];
  /** The details of the check run (supports Commonmark). */
  text?: InputMaybe<Scalars['String']>;
  /** A title to provide for this check run. */
  title: Scalars['String'];
};

/** Images attached to the check run output displayed in the GitHub pull request UI. */
export type Gh_CheckRunOutputImage = {
  /** The alternative text for the image. */
  alt: Scalars['String'];
  /** A short image description. */
  caption?: InputMaybe<Scalars['String']>;
  /** The full URL of the image. */
  imageUrl: Scalars['gh_URI'];
};

/** The possible types of check runs. */
export enum Gh_CheckRunType {
  /** Every check run available. */
  All = 'ALL',
  /** The latest check run. */
  Latest = 'LATEST'
}

/** The possible states for a check suite or run status. */
export enum Gh_CheckStatusState {
  /** The check suite or run has been completed. */
  Completed = 'COMPLETED',
  /** The check suite or run is in progress. */
  InProgress = 'IN_PROGRESS',
  /** The check suite or run is in pending state. */
  Pending = 'PENDING',
  /** The check suite or run has been queued. */
  Queued = 'QUEUED',
  /** The check suite or run has been requested. */
  Requested = 'REQUESTED',
  /** The check suite or run is in waiting state. */
  Waiting = 'WAITING'
}

/** A single check step. */
export type Gh_CheckStep = {
  __typename?: 'gh_CheckStep';
  /** Identifies the date and time when the check step was completed. */
  completedAt?: Maybe<Scalars['gh_DateTime']>;
  /** The conclusion of the check step. */
  conclusion?: Maybe<Gh_CheckConclusionState>;
  /** A reference for the check step on the integrator's system. */
  externalId?: Maybe<Scalars['String']>;
  /** The step's name. */
  name: Scalars['String'];
  /** The index of the step in the list of steps of the parent check run. */
  number: Scalars['Int'];
  /** Number of seconds to completion. */
  secondsToCompletion?: Maybe<Scalars['Int']>;
  /** Identifies the date and time when the check step was started. */
  startedAt?: Maybe<Scalars['gh_DateTime']>;
  /** The current status of the check step. */
  status: Gh_CheckStatusState;
};

/** The connection type for CheckStep. */
export type Gh_CheckStepConnection = {
  __typename?: 'gh_CheckStepConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_CheckStepEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_CheckStep>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_CheckStepEdge = {
  __typename?: 'gh_CheckStepEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_CheckStep>;
};

/** A check suite. */
export type Gh_CheckSuite = Gh_Node & {
  __typename?: 'gh_CheckSuite';
  /** The GitHub App which created this check suite. */
  app?: Maybe<Gh_App>;
  /** The name of the branch for this check suite. */
  branch?: Maybe<Gh_Ref>;
  /** The check runs associated with a check suite. */
  checkRuns?: Maybe<Gh_CheckRunConnection>;
  /** The commit for this check suite */
  commit: Gh_Commit;
  /** The conclusion of this check suite. */
  conclusion?: Maybe<Gh_CheckConclusionState>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The user who triggered the check suite. */
  creator?: Maybe<Gh_User>;
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  /** A list of open pull requests matching the check suite. */
  matchingPullRequests?: Maybe<Gh_PullRequestConnection>;
  /** The push that triggered this check suite. */
  push?: Maybe<Gh_Push>;
  /** The repository associated with this check suite. */
  repository: Gh_Repository;
  /** The HTTP path for this check suite */
  resourcePath: Scalars['gh_URI'];
  /** The status of this check suite. */
  status: Gh_CheckStatusState;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The HTTP URL for this check suite */
  url: Scalars['gh_URI'];
  /** The workflow run associated with this check suite. */
  workflowRun?: Maybe<Gh_WorkflowRun>;
};


/** A check suite. */
export type Gh_CheckSuiteCheckRunsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  filterBy?: InputMaybe<Gh_CheckRunFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A check suite. */
export type Gh_CheckSuiteMatchingPullRequestsArgs = {
  after?: InputMaybe<Scalars['String']>;
  baseRefName?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  headRefName?: InputMaybe<Scalars['String']>;
  labels?: InputMaybe<Array<Scalars['String']>>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_IssueOrder>;
  states?: InputMaybe<Array<Gh_PullRequestState>>;
};

/** The auto-trigger preferences that are available for check suites. */
export type Gh_CheckSuiteAutoTriggerPreference = {
  /** The node ID of the application that owns the check suite. */
  appId: Scalars['ID'];
  /** Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository. */
  setting: Scalars['Boolean'];
};

/** The connection type for CheckSuite. */
export type Gh_CheckSuiteConnection = {
  __typename?: 'gh_CheckSuiteConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_CheckSuiteEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_CheckSuite>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_CheckSuiteEdge = {
  __typename?: 'gh_CheckSuiteEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_CheckSuite>;
};

/** The filters that are available when fetching check suites. */
export type Gh_CheckSuiteFilter = {
  /** Filters the check suites created by this application ID. */
  appId?: InputMaybe<Scalars['Int']>;
  /** Filters the check suites by this name. */
  checkName?: InputMaybe<Scalars['String']>;
};

/** Autogenerated input type of ClearLabelsFromLabelable */
export type Gh_ClearLabelsFromLabelableInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The id of the labelable object to clear the labels from. */
  labelableId: Scalars['ID'];
};

/** Autogenerated return type of ClearLabelsFromLabelable */
export type Gh_ClearLabelsFromLabelablePayload = {
  __typename?: 'gh_ClearLabelsFromLabelablePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The item that was unlabeled. */
  labelable?: Maybe<Gh_Labelable>;
};

/** Autogenerated input type of CloneProject */
export type Gh_CloneProjectInput = {
  /** The description of the project. */
  body?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Whether or not to clone the source project's workflows. */
  includeWorkflows: Scalars['Boolean'];
  /** The name of the project. */
  name: Scalars['String'];
  /** The visibility of the project, defaults to false (private). */
  public?: InputMaybe<Scalars['Boolean']>;
  /** The source project to clone. */
  sourceId: Scalars['ID'];
  /** The owner ID to create the project under. */
  targetOwnerId: Scalars['ID'];
};

/** Autogenerated return type of CloneProject */
export type Gh_CloneProjectPayload = {
  __typename?: 'gh_CloneProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The id of the JobStatus for populating cloned fields. */
  jobStatusId?: Maybe<Scalars['String']>;
  /** The new cloned project. */
  project?: Maybe<Gh_Project>;
};

/** Autogenerated input type of CloneTemplateRepository */
export type Gh_CloneTemplateRepositoryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** A short description of the new repository. */
  description?: InputMaybe<Scalars['String']>;
  /** Whether to copy all branches from the template to the new repository. Defaults to copying only the default branch of the template. */
  includeAllBranches?: InputMaybe<Scalars['Boolean']>;
  /** The name of the new repository. */
  name: Scalars['String'];
  /** The ID of the owner for the new repository. */
  ownerId: Scalars['ID'];
  /** The Node ID of the template repository. */
  repositoryId: Scalars['ID'];
  /** Indicates the repository's visibility level. */
  visibility: Gh_RepositoryVisibility;
};

/** Autogenerated return type of CloneTemplateRepository */
export type Gh_CloneTemplateRepositoryPayload = {
  __typename?: 'gh_CloneTemplateRepositoryPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The new repository. */
  repository?: Maybe<Gh_Repository>;
};

/** An object that can be closed */
export type Gh_Closable = {
  /** `true` if the object is closed (definition of closed may depend on type) */
  closed: Scalars['Boolean'];
  /** Identifies the date and time when the object was closed. */
  closedAt?: Maybe<Scalars['gh_DateTime']>;
};

/** Autogenerated input type of CloseIssue */
export type Gh_CloseIssueInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** ID of the issue to be closed. */
  issueId: Scalars['ID'];
};

/** Autogenerated return type of CloseIssue */
export type Gh_CloseIssuePayload = {
  __typename?: 'gh_CloseIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The issue that was closed. */
  issue?: Maybe<Gh_Issue>;
};

/** Autogenerated input type of ClosePullRequest */
export type Gh_ClosePullRequestInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** ID of the pull request to be closed. */
  pullRequestId: Scalars['ID'];
};

/** Autogenerated return type of ClosePullRequest */
export type Gh_ClosePullRequestPayload = {
  __typename?: 'gh_ClosePullRequestPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The pull request that was closed. */
  pullRequest?: Maybe<Gh_PullRequest>;
};

/** Represents a 'closed' event on any `Closable`. */
export type Gh_ClosedEvent = Gh_Node & Gh_UniformResourceLocatable & {
  __typename?: 'gh_ClosedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Object that was closed. */
  closable: Gh_Closable;
  /** Object which triggered the creation of this event. */
  closer?: Maybe<Gh_Closer>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** The HTTP path for this closed event. */
  resourcePath: Scalars['gh_URI'];
  /** The HTTP URL for this closed event. */
  url: Scalars['gh_URI'];
};

/** The object which triggered a `ClosedEvent`. */
export type Gh_Closer = Gh_Commit | Gh_PullRequest;

/** The Code of Conduct for a repository */
export type Gh_CodeOfConduct = Gh_Node & {
  __typename?: 'gh_CodeOfConduct';
  /** The body of the Code of Conduct */
  body?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  /** The key for the Code of Conduct */
  key: Scalars['String'];
  /** The formal name of the Code of Conduct */
  name: Scalars['String'];
  /** The HTTP path for this Code of Conduct */
  resourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for this Code of Conduct */
  url?: Maybe<Scalars['gh_URI']>;
};

/** Collaborators affiliation level with a subject. */
export enum Gh_CollaboratorAffiliation {
  /** All collaborators the authenticated user can see. */
  All = 'ALL',
  /** All collaborators with permissions to an organization-owned subject, regardless of organization membership status. */
  Direct = 'DIRECT',
  /** All outside collaborators of an organization-owned subject. */
  Outside = 'OUTSIDE'
}

/** Represents a comment. */
export type Gh_Comment = {
  /** The actor who authored the comment. */
  author?: Maybe<Gh_Actor>;
  /** Author's association with the subject of the comment. */
  authorAssociation: Gh_CommentAuthorAssociation;
  /** The body as Markdown. */
  body: Scalars['String'];
  /** The body rendered to HTML. */
  bodyHTML: Scalars['gh_HTML'];
  /** The body rendered to text. */
  bodyText: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Check if this comment was created via an email reply. */
  createdViaEmail: Scalars['Boolean'];
  /** The actor who edited the comment. */
  editor?: Maybe<Gh_Actor>;
  id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: Scalars['Boolean'];
  /** The moment the editor made the last edit */
  lastEditedAt?: Maybe<Scalars['gh_DateTime']>;
  /** Identifies when the comment was published at. */
  publishedAt?: Maybe<Scalars['gh_DateTime']>;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** A list of edits to this content. */
  userContentEdits?: Maybe<Gh_UserContentEditConnection>;
  /** Did the viewer author this comment. */
  viewerDidAuthor: Scalars['Boolean'];
};


/** Represents a comment. */
export type Gh_CommentUserContentEditsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** A comment author association with repository. */
export enum Gh_CommentAuthorAssociation {
  /** Author has been invited to collaborate on the repository. */
  Collaborator = 'COLLABORATOR',
  /** Author has previously committed to the repository. */
  Contributor = 'CONTRIBUTOR',
  /** Author has not previously committed to GitHub. */
  FirstTimer = 'FIRST_TIMER',
  /** Author has not previously committed to the repository. */
  FirstTimeContributor = 'FIRST_TIME_CONTRIBUTOR',
  /** Author is a placeholder for an unclaimed user. */
  Mannequin = 'MANNEQUIN',
  /** Author is a member of the organization that owns the repository. */
  Member = 'MEMBER',
  /** Author has no association with the repository. */
  None = 'NONE',
  /** Author is the owner of the repository. */
  Owner = 'OWNER'
}

/** The possible errors that will prevent a user from updating a comment. */
export enum Gh_CommentCannotUpdateReason {
  /** Unable to create comment because repository is archived. */
  Archived = 'ARCHIVED',
  /** You cannot update this comment */
  Denied = 'DENIED',
  /** You must be the author or have write access to this repository to update this comment. */
  InsufficientAccess = 'INSUFFICIENT_ACCESS',
  /** Unable to create comment because issue is locked. */
  Locked = 'LOCKED',
  /** You must be logged in to update this comment. */
  LoginRequired = 'LOGIN_REQUIRED',
  /** Repository is under maintenance. */
  Maintenance = 'MAINTENANCE',
  /** At least one email address must be verified to update this comment. */
  VerifiedEmailRequired = 'VERIFIED_EMAIL_REQUIRED'
}

/** Represents a 'comment_deleted' event on a given issue or pull request. */
export type Gh_CommentDeletedEvent = Gh_Node & {
  __typename?: 'gh_CommentDeletedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The user who authored the deleted comment. */
  deletedCommentAuthor?: Maybe<Gh_Actor>;
  id: Scalars['ID'];
};

/** Represents a Git commit. */
export type Gh_Commit = Gh_GitObject & Gh_Node & Gh_Subscribable & Gh_UniformResourceLocatable & {
  __typename?: 'gh_Commit';
  /** An abbreviated version of the Git object ID */
  abbreviatedOid: Scalars['String'];
  /** The number of additions in this commit. */
  additions: Scalars['Int'];
  /** The merged Pull Request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open Pull Requests associated with the commit */
  associatedPullRequests?: Maybe<Gh_PullRequestConnection>;
  /** Authorship details of the commit. */
  author?: Maybe<Gh_GitActor>;
  /** Check if the committer and the author match. */
  authoredByCommitter: Scalars['Boolean'];
  /** The datetime when this commit was authored. */
  authoredDate: Scalars['gh_DateTime'];
  /**
   * The list of authors for this commit based on the git author and the Co-authored-by
   * message trailer. The git author will always be first.
   *
   */
  authors: Gh_GitActorConnection;
  /** Fetches `git blame` information. */
  blame: Gh_Blame;
  /** The number of changed files in this commit. */
  changedFiles: Scalars['Int'];
  /** The check suites associated with a commit. */
  checkSuites?: Maybe<Gh_CheckSuiteConnection>;
  /** Comments made on the commit. */
  comments: Gh_CommitCommentConnection;
  /** The HTTP path for this Git object */
  commitResourcePath: Scalars['gh_URI'];
  /** The HTTP URL for this Git object */
  commitUrl: Scalars['gh_URI'];
  /** The datetime when this commit was committed. */
  committedDate: Scalars['gh_DateTime'];
  /** Check if committed via GitHub web UI. */
  committedViaWeb: Scalars['Boolean'];
  /** Committer details of the commit. */
  committer?: Maybe<Gh_GitActor>;
  /** The number of deletions in this commit. */
  deletions: Scalars['Int'];
  /** The deployments associated with a commit. */
  deployments?: Maybe<Gh_DeploymentConnection>;
  /** The tree entry representing the file located at the given path. */
  file?: Maybe<Gh_TreeEntry>;
  /** The linear commit history starting from (and including) this commit, in the same order as `git log`. */
  history: Gh_CommitHistoryConnection;
  id: Scalars['ID'];
  /** The Git commit message */
  message: Scalars['String'];
  /** The Git commit message body */
  messageBody: Scalars['String'];
  /** The commit message body rendered to HTML. */
  messageBodyHTML: Scalars['gh_HTML'];
  /** The Git commit message headline */
  messageHeadline: Scalars['String'];
  /** The commit message headline rendered to HTML. */
  messageHeadlineHTML: Scalars['gh_HTML'];
  /** The Git object ID */
  oid: Scalars['gh_GitObjectID'];
  /** The organization this commit was made on behalf of. */
  onBehalfOf?: Maybe<Gh_Organization>;
  /** The parents of a commit. */
  parents: Gh_CommitConnection;
  /** The datetime when this commit was pushed. */
  pushedDate?: Maybe<Scalars['gh_DateTime']>;
  /** The Repository this commit belongs to */
  repository: Gh_Repository;
  /** The HTTP path for this commit */
  resourcePath: Scalars['gh_URI'];
  /** Commit signing information, if present. */
  signature?: Maybe<Gh_GitSignature>;
  /** Status information for this commit */
  status?: Maybe<Gh_Status>;
  /** Check and Status rollup information for this commit. */
  statusCheckRollup?: Maybe<Gh_StatusCheckRollup>;
  /** Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file. */
  submodules: Gh_SubmoduleConnection;
  /**
   * Returns a URL to download a tarball archive for a repository.
   * Note: For private repositories, these links are temporary and expire after five minutes.
   */
  tarballUrl: Scalars['gh_URI'];
  /** Commit's root Tree */
  tree: Gh_Tree;
  /** The HTTP path for the tree of this commit */
  treeResourcePath: Scalars['gh_URI'];
  /** The HTTP URL for the tree of this commit */
  treeUrl: Scalars['gh_URI'];
  /** The HTTP URL for this commit */
  url: Scalars['gh_URI'];
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe: Scalars['Boolean'];
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: Maybe<Gh_SubscriptionState>;
  /**
   * Returns a URL to download a zipball archive for a repository.
   * Note: For private repositories, these links are temporary and expire after five minutes.
   */
  zipballUrl: Scalars['gh_URI'];
};


/** Represents a Git commit. */
export type Gh_CommitAssociatedPullRequestsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_PullRequestOrder>;
};


/** Represents a Git commit. */
export type Gh_CommitAuthorsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** Represents a Git commit. */
export type Gh_CommitBlameArgs = {
  path: Scalars['String'];
};


/** Represents a Git commit. */
export type Gh_CommitCheckSuitesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  filterBy?: InputMaybe<Gh_CheckSuiteFilter>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** Represents a Git commit. */
export type Gh_CommitCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** Represents a Git commit. */
export type Gh_CommitDeploymentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  environments?: InputMaybe<Array<Scalars['String']>>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_DeploymentOrder>;
};


/** Represents a Git commit. */
export type Gh_CommitFileArgs = {
  path: Scalars['String'];
};


/** Represents a Git commit. */
export type Gh_CommitHistoryArgs = {
  after?: InputMaybe<Scalars['String']>;
  author?: InputMaybe<Gh_CommitAuthor>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  path?: InputMaybe<Scalars['String']>;
  since?: InputMaybe<Scalars['gh_GitTimestamp']>;
  until?: InputMaybe<Scalars['gh_GitTimestamp']>;
};


/** Represents a Git commit. */
export type Gh_CommitParentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** Represents a Git commit. */
export type Gh_CommitSubmodulesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** Specifies an author for filtering Git commits. */
export type Gh_CommitAuthor = {
  /** Email addresses to filter by. Commits authored by any of the specified email addresses will be returned. */
  emails?: InputMaybe<Array<Scalars['String']>>;
  /** ID of a User to filter by. If non-null, only commits authored by this user will be returned. This field takes precedence over emails. */
  id?: InputMaybe<Scalars['ID']>;
};

/** Represents a comment on a given Commit. */
export type Gh_CommitComment = Gh_Comment & Gh_Deletable & Gh_Minimizable & Gh_Node & Gh_Reactable & Gh_RepositoryNode & Gh_Updatable & Gh_UpdatableComment & {
  __typename?: 'gh_CommitComment';
  /** The actor who authored the comment. */
  author?: Maybe<Gh_Actor>;
  /** Author's association with the subject of the comment. */
  authorAssociation: Gh_CommentAuthorAssociation;
  /** Identifies the comment body. */
  body: Scalars['String'];
  /** The body rendered to HTML. */
  bodyHTML: Scalars['gh_HTML'];
  /** The body rendered to text. */
  bodyText: Scalars['String'];
  /** Identifies the commit associated with the comment, if the commit exists. */
  commit?: Maybe<Gh_Commit>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Check if this comment was created via an email reply. */
  createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The actor who edited the comment. */
  editor?: Maybe<Gh_Actor>;
  id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: Scalars['Boolean'];
  /** Returns whether or not a comment has been minimized. */
  isMinimized: Scalars['Boolean'];
  /** The moment the editor made the last edit */
  lastEditedAt?: Maybe<Scalars['gh_DateTime']>;
  /** Returns why the comment was minimized. */
  minimizedReason?: Maybe<Scalars['String']>;
  /** Identifies the file path associated with the comment. */
  path?: Maybe<Scalars['String']>;
  /** Identifies the line position associated with the comment. */
  position?: Maybe<Scalars['Int']>;
  /** Identifies when the comment was published at. */
  publishedAt?: Maybe<Scalars['gh_DateTime']>;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: Maybe<Array<Gh_ReactionGroup>>;
  /** A list of Reactions left on the Issue. */
  reactions: Gh_ReactionConnection;
  /** The repository associated with this node. */
  repository: Gh_Repository;
  /** The HTTP path permalink for this commit comment. */
  resourcePath: Scalars['gh_URI'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The HTTP URL permalink for this commit comment. */
  url: Scalars['gh_URI'];
  /** A list of edits to this content. */
  userContentEdits?: Maybe<Gh_UserContentEditConnection>;
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: Scalars['Boolean'];
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize: Scalars['Boolean'];
  /** Can user react to this subject */
  viewerCanReact: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: Array<Gh_CommentCannotUpdateReason>;
  /** Did the viewer author this comment. */
  viewerDidAuthor: Scalars['Boolean'];
};


/** Represents a comment on a given Commit. */
export type Gh_CommitCommentReactionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Gh_ReactionContent>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_ReactionOrder>;
};


/** Represents a comment on a given Commit. */
export type Gh_CommitCommentUserContentEditsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for CommitComment. */
export type Gh_CommitCommentConnection = {
  __typename?: 'gh_CommitCommentConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_CommitCommentEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_CommitComment>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_CommitCommentEdge = {
  __typename?: 'gh_CommitCommentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_CommitComment>;
};

/** A thread of comments on a commit. */
export type Gh_CommitCommentThread = Gh_Node & Gh_RepositoryNode & {
  __typename?: 'gh_CommitCommentThread';
  /** The comments that exist in this thread. */
  comments: Gh_CommitCommentConnection;
  /** The commit the comments were made on. */
  commit?: Maybe<Gh_Commit>;
  id: Scalars['ID'];
  /** The file the comments were made on. */
  path?: Maybe<Scalars['String']>;
  /** The position in the diff for the commit that the comment was made on. */
  position?: Maybe<Scalars['Int']>;
  /** The repository associated with this node. */
  repository: Gh_Repository;
};


/** A thread of comments on a commit. */
export type Gh_CommitCommentThreadCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for Commit. */
export type Gh_CommitConnection = {
  __typename?: 'gh_CommitConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_CommitEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Commit>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Ordering options for commit contribution connections. */
export type Gh_CommitContributionOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field by which to order commit contributions. */
  field: Gh_CommitContributionOrderField;
};

/** Properties by which commit contribution connections can be ordered. */
export enum Gh_CommitContributionOrderField {
  /** Order commit contributions by how many commits they represent. */
  CommitCount = 'COMMIT_COUNT',
  /** Order commit contributions by when they were made. */
  OccurredAt = 'OCCURRED_AT'
}

/** This aggregates commits made by a user within one repository. */
export type Gh_CommitContributionsByRepository = {
  __typename?: 'gh_CommitContributionsByRepository';
  /** The commit contributions, each representing a day. */
  contributions: Gh_CreatedCommitContributionConnection;
  /** The repository in which the commits were made. */
  repository: Gh_Repository;
  /** The HTTP path for the user's commits to the repository in this time range. */
  resourcePath: Scalars['gh_URI'];
  /** The HTTP URL for the user's commits to the repository in this time range. */
  url: Scalars['gh_URI'];
};


/** This aggregates commits made by a user within one repository. */
export type Gh_CommitContributionsByRepositoryContributionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_CommitContributionOrder>;
};

/** An edge in a connection. */
export type Gh_CommitEdge = {
  __typename?: 'gh_CommitEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_Commit>;
};

/** The connection type for Commit. */
export type Gh_CommitHistoryConnection = {
  __typename?: 'gh_CommitHistoryConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_CommitEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Commit>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** A message to include with a new commit */
export type Gh_CommitMessage = {
  /** The body of the message. */
  body?: InputMaybe<Scalars['String']>;
  /** The headline of the message. */
  headline: Scalars['String'];
};

/**
 * A git ref for a commit to be appended to.
 *
 * The ref must be a branch, i.e. its fully qualified name must start
 * with `refs/heads/` (although the input is not required to be fully
 * qualified).
 *
 * The Ref may be specified by its global node ID or by the
 * repository nameWithOwner and branch name.
 *
 * ### Examples
 *
 * Specify a branch using a global node ID:
 *
 *     { "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }
 *
 * Specify a branch using nameWithOwner and branch name:
 *
 *     {
 *       "nameWithOwner": "github/graphql-client",
 *       "branchName": "main"
 *     }
 *
 *
 */
export type Gh_CommittableBranch = {
  /** The unqualified name of the branch to append the commit to. */
  branchName?: InputMaybe<Scalars['String']>;
  /** The Node ID of the Ref to be updated. */
  id?: InputMaybe<Scalars['ID']>;
  /** The nameWithOwner of the repository to commit to. */
  repositoryNameWithOwner?: InputMaybe<Scalars['String']>;
};

/** Represents a 'connected' event on a given issue or pull request. */
export type Gh_ConnectedEvent = Gh_Node & {
  __typename?: 'gh_ConnectedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** Reference originated in a different repository. */
  isCrossRepository: Scalars['Boolean'];
  /** Issue or pull request that made the reference. */
  source: Gh_ReferencedSubject;
  /** Issue or pull request which was connected. */
  subject: Gh_ReferencedSubject;
};

/** Represents a contribution a user made on GitHub, such as opening an issue. */
export type Gh_Contribution = {
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted: Scalars['Boolean'];
  /** When this contribution was made. */
  occurredAt: Scalars['gh_DateTime'];
  /** The HTTP path for this contribution. */
  resourcePath: Scalars['gh_URI'];
  /** The HTTP URL for this contribution. */
  url: Scalars['gh_URI'];
  /**
   * The user who made this contribution.
   *
   */
  user: Gh_User;
};

/** A calendar of contributions made on GitHub by a user. */
export type Gh_ContributionCalendar = {
  __typename?: 'gh_ContributionCalendar';
  /** A list of hex color codes used in this calendar. The darker the color, the more contributions it represents. */
  colors: Array<Scalars['String']>;
  /** Determine if the color set was chosen because it's currently Halloween. */
  isHalloween: Scalars['Boolean'];
  /** A list of the months of contributions in this calendar. */
  months: Array<Gh_ContributionCalendarMonth>;
  /** The count of total contributions in the calendar. */
  totalContributions: Scalars['Int'];
  /** A list of the weeks of contributions in this calendar. */
  weeks: Array<Gh_ContributionCalendarWeek>;
};

/** Represents a single day of contributions on GitHub by a user. */
export type Gh_ContributionCalendarDay = {
  __typename?: 'gh_ContributionCalendarDay';
  /** The hex color code that represents how many contributions were made on this day compared to others in the calendar. */
  color: Scalars['String'];
  /** How many contributions were made by the user on this day. */
  contributionCount: Scalars['Int'];
  /** Indication of contributions, relative to other days. Can be used to indicate which color to represent this day on a calendar. */
  contributionLevel: Gh_ContributionLevel;
  /** The day this square represents. */
  date: Scalars['gh_Date'];
  /** A number representing which day of the week this square represents, e.g., 1 is Monday. */
  weekday: Scalars['Int'];
};

/** A month of contributions in a user's contribution graph. */
export type Gh_ContributionCalendarMonth = {
  __typename?: 'gh_ContributionCalendarMonth';
  /** The date of the first day of this month. */
  firstDay: Scalars['gh_Date'];
  /** The name of the month. */
  name: Scalars['String'];
  /** How many weeks started in this month. */
  totalWeeks: Scalars['Int'];
  /** The year the month occurred in. */
  year: Scalars['Int'];
};

/** A week of contributions in a user's contribution graph. */
export type Gh_ContributionCalendarWeek = {
  __typename?: 'gh_ContributionCalendarWeek';
  /** The days of contributions in this week. */
  contributionDays: Array<Gh_ContributionCalendarDay>;
  /** The date of the earliest square in this week. */
  firstDay: Scalars['gh_Date'];
};

/** Varying levels of contributions from none to many. */
export enum Gh_ContributionLevel {
  /** Lowest 25% of days of contributions. */
  FirstQuartile = 'FIRST_QUARTILE',
  /** Highest 25% of days of contributions. More contributions than the third quartile. */
  FourthQuartile = 'FOURTH_QUARTILE',
  /** No contributions occurred. */
  None = 'NONE',
  /** Second lowest 25% of days of contributions. More contributions than the first quartile. */
  SecondQuartile = 'SECOND_QUARTILE',
  /** Second highest 25% of days of contributions. More contributions than second quartile, less than the fourth quartile. */
  ThirdQuartile = 'THIRD_QUARTILE'
}

/** Ordering options for contribution connections. */
export type Gh_ContributionOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
};

/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type Gh_ContributionsCollection = {
  __typename?: 'gh_ContributionsCollection';
  /** Commit contributions made by the user, grouped by repository. */
  commitContributionsByRepository: Array<Gh_CommitContributionsByRepository>;
  /** A calendar of this user's contributions on GitHub. */
  contributionCalendar: Gh_ContributionCalendar;
  /** The years the user has been making contributions with the most recent year first. */
  contributionYears: Array<Scalars['Int']>;
  /**
   * Determine if this collection's time span ends in the current month.
   *
   */
  doesEndInCurrentMonth: Scalars['Boolean'];
  /** The date of the first restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts. */
  earliestRestrictedContributionDate?: Maybe<Scalars['gh_Date']>;
  /** The ending date and time of this collection. */
  endedAt: Scalars['gh_DateTime'];
  /** The first issue the user opened on GitHub. This will be null if that issue was opened outside the collection's time range and ignoreTimeRange is false. If the issue is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned. */
  firstIssueContribution?: Maybe<Gh_CreatedIssueOrRestrictedContribution>;
  /** The first pull request the user opened on GitHub. This will be null if that pull request was opened outside the collection's time range and ignoreTimeRange is not true. If the pull request is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned. */
  firstPullRequestContribution?: Maybe<Gh_CreatedPullRequestOrRestrictedContribution>;
  /** The first repository the user created on GitHub. This will be null if that first repository was created outside the collection's time range and ignoreTimeRange is false. If the repository is not visible, then a RestrictedContribution is returned. */
  firstRepositoryContribution?: Maybe<Gh_CreatedRepositoryOrRestrictedContribution>;
  /** Does the user have any more activity in the timeline that occurred prior to the collection's time range? */
  hasActivityInThePast: Scalars['Boolean'];
  /** Determine if there are any contributions in this collection. */
  hasAnyContributions: Scalars['Boolean'];
  /** Determine if the user made any contributions in this time frame whose details are not visible because they were made in a private repository. Can only be true if the user enabled private contribution counts. */
  hasAnyRestrictedContributions: Scalars['Boolean'];
  /** Whether or not the collector's time span is all within the same day. */
  isSingleDay: Scalars['Boolean'];
  /** A list of issues the user opened. */
  issueContributions: Gh_CreatedIssueContributionConnection;
  /** Issue contributions made by the user, grouped by repository. */
  issueContributionsByRepository: Array<Gh_IssueContributionsByRepository>;
  /** When the user signed up for GitHub. This will be null if that sign up date falls outside the collection's time range and ignoreTimeRange is false. */
  joinedGitHubContribution?: Maybe<Gh_JoinedGitHubContribution>;
  /** The date of the most recent restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts. */
  latestRestrictedContributionDate?: Maybe<Scalars['gh_Date']>;
  /**
   * When this collection's time range does not include any activity from the user, use this
   * to get a different collection from an earlier time range that does have activity.
   *
   */
  mostRecentCollectionWithActivity?: Maybe<Gh_ContributionsCollection>;
  /**
   * Returns a different contributions collection from an earlier time range than this one
   * that does not have any contributions.
   *
   */
  mostRecentCollectionWithoutActivity?: Maybe<Gh_ContributionsCollection>;
  /**
   * The issue the user opened on GitHub that received the most comments in the specified
   * time frame.
   *
   */
  popularIssueContribution?: Maybe<Gh_CreatedIssueContribution>;
  /**
   * The pull request the user opened on GitHub that received the most comments in the
   * specified time frame.
   *
   */
  popularPullRequestContribution?: Maybe<Gh_CreatedPullRequestContribution>;
  /** Pull request contributions made by the user. */
  pullRequestContributions: Gh_CreatedPullRequestContributionConnection;
  /** Pull request contributions made by the user, grouped by repository. */
  pullRequestContributionsByRepository: Array<Gh_PullRequestContributionsByRepository>;
  /** Pull request review contributions made by the user. */
  pullRequestReviewContributions: Gh_CreatedPullRequestReviewContributionConnection;
  /** Pull request review contributions made by the user, grouped by repository. */
  pullRequestReviewContributionsByRepository: Array<Gh_PullRequestReviewContributionsByRepository>;
  /** A list of repositories owned by the user that the user created in this time range. */
  repositoryContributions: Gh_CreatedRepositoryContributionConnection;
  /** A count of contributions made by the user that the viewer cannot access. Only non-zero when the user has chosen to share their private contribution counts. */
  restrictedContributionsCount: Scalars['Int'];
  /** The beginning date and time of this collection. */
  startedAt: Scalars['gh_DateTime'];
  /** How many commits were made by the user in this time span. */
  totalCommitContributions: Scalars['Int'];
  /** How many issues the user opened. */
  totalIssueContributions: Scalars['Int'];
  /** How many pull requests the user opened. */
  totalPullRequestContributions: Scalars['Int'];
  /** How many pull request reviews the user left. */
  totalPullRequestReviewContributions: Scalars['Int'];
  /** How many different repositories the user committed to. */
  totalRepositoriesWithContributedCommits: Scalars['Int'];
  /** How many different repositories the user opened issues in. */
  totalRepositoriesWithContributedIssues: Scalars['Int'];
  /** How many different repositories the user left pull request reviews in. */
  totalRepositoriesWithContributedPullRequestReviews: Scalars['Int'];
  /** How many different repositories the user opened pull requests in. */
  totalRepositoriesWithContributedPullRequests: Scalars['Int'];
  /** How many repositories the user created. */
  totalRepositoryContributions: Scalars['Int'];
  /** The user who made the contributions in this collection. */
  user: Gh_User;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type Gh_ContributionsCollectionCommitContributionsByRepositoryArgs = {
  maxRepositories?: InputMaybe<Scalars['Int']>;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type Gh_ContributionsCollectionIssueContributionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  excludeFirst?: InputMaybe<Scalars['Boolean']>;
  excludePopular?: InputMaybe<Scalars['Boolean']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_ContributionOrder>;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type Gh_ContributionsCollectionIssueContributionsByRepositoryArgs = {
  excludeFirst?: InputMaybe<Scalars['Boolean']>;
  excludePopular?: InputMaybe<Scalars['Boolean']>;
  maxRepositories?: InputMaybe<Scalars['Int']>;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type Gh_ContributionsCollectionPullRequestContributionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  excludeFirst?: InputMaybe<Scalars['Boolean']>;
  excludePopular?: InputMaybe<Scalars['Boolean']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_ContributionOrder>;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type Gh_ContributionsCollectionPullRequestContributionsByRepositoryArgs = {
  excludeFirst?: InputMaybe<Scalars['Boolean']>;
  excludePopular?: InputMaybe<Scalars['Boolean']>;
  maxRepositories?: InputMaybe<Scalars['Int']>;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type Gh_ContributionsCollectionPullRequestReviewContributionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_ContributionOrder>;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type Gh_ContributionsCollectionPullRequestReviewContributionsByRepositoryArgs = {
  maxRepositories?: InputMaybe<Scalars['Int']>;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type Gh_ContributionsCollectionRepositoryContributionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  excludeFirst?: InputMaybe<Scalars['Boolean']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_ContributionOrder>;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type Gh_ContributionsCollectionTotalIssueContributionsArgs = {
  excludeFirst?: InputMaybe<Scalars['Boolean']>;
  excludePopular?: InputMaybe<Scalars['Boolean']>;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type Gh_ContributionsCollectionTotalPullRequestContributionsArgs = {
  excludeFirst?: InputMaybe<Scalars['Boolean']>;
  excludePopular?: InputMaybe<Scalars['Boolean']>;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type Gh_ContributionsCollectionTotalRepositoriesWithContributedIssuesArgs = {
  excludeFirst?: InputMaybe<Scalars['Boolean']>;
  excludePopular?: InputMaybe<Scalars['Boolean']>;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type Gh_ContributionsCollectionTotalRepositoriesWithContributedPullRequestsArgs = {
  excludeFirst?: InputMaybe<Scalars['Boolean']>;
  excludePopular?: InputMaybe<Scalars['Boolean']>;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type Gh_ContributionsCollectionTotalRepositoryContributionsArgs = {
  excludeFirst?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated input type of ConvertProjectCardNoteToIssue */
export type Gh_ConvertProjectCardNoteToIssueInput = {
  /** The body of the newly created issue. */
  body?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ProjectCard ID to convert. */
  projectCardId: Scalars['ID'];
  /** The ID of the repository to create the issue in. */
  repositoryId: Scalars['ID'];
  /** The title of the newly created issue. Defaults to the card's note text. */
  title?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of ConvertProjectCardNoteToIssue */
export type Gh_ConvertProjectCardNoteToIssuePayload = {
  __typename?: 'gh_ConvertProjectCardNoteToIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The updated ProjectCard. */
  projectCard?: Maybe<Gh_ProjectCard>;
};

/** Autogenerated input type of ConvertPullRequestToDraft */
export type Gh_ConvertPullRequestToDraftInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** ID of the pull request to convert to draft */
  pullRequestId: Scalars['ID'];
};

/** Autogenerated return type of ConvertPullRequestToDraft */
export type Gh_ConvertPullRequestToDraftPayload = {
  __typename?: 'gh_ConvertPullRequestToDraftPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The pull request that is now a draft. */
  pullRequest?: Maybe<Gh_PullRequest>;
};

/** Represents a 'convert_to_draft' event on a given pull request. */
export type Gh_ConvertToDraftEvent = Gh_Node & Gh_UniformResourceLocatable & {
  __typename?: 'gh_ConvertToDraftEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest: Gh_PullRequest;
  /** The HTTP path for this convert to draft event. */
  resourcePath: Scalars['gh_URI'];
  /** The HTTP URL for this convert to draft event. */
  url: Scalars['gh_URI'];
};

/** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
export type Gh_ConvertedNoteToIssueEvent = Gh_Node & {
  __typename?: 'gh_ConvertedNoteToIssueEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
};

/** Represents a 'converted_to_discussion' event on a given issue. */
export type Gh_ConvertedToDiscussionEvent = Gh_Node & {
  __typename?: 'gh_ConvertedToDiscussionEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The discussion that the issue was converted into. */
  discussion?: Maybe<Gh_Discussion>;
  id: Scalars['ID'];
};

/** Autogenerated input type of CreateBranchProtectionRule */
export type Gh_CreateBranchProtectionRuleInput = {
  /** Can this branch be deleted. */
  allowsDeletions?: InputMaybe<Scalars['Boolean']>;
  /** Are force pushes allowed on this branch. */
  allowsForcePushes?: InputMaybe<Scalars['Boolean']>;
  /** Is branch creation a protected operation. */
  blocksCreations?: InputMaybe<Scalars['Boolean']>;
  /** A list of User or Team IDs allowed to bypass force push targeting matching branches. */
  bypassForcePushActorIds?: InputMaybe<Array<Scalars['ID']>>;
  /** A list of User or Team IDs allowed to bypass pull requests targeting matching branches. */
  bypassPullRequestActorIds?: InputMaybe<Array<Scalars['ID']>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Will new commits pushed to matching branches dismiss pull request review approvals. */
  dismissesStaleReviews?: InputMaybe<Scalars['Boolean']>;
  /** Can admins overwrite branch protection. */
  isAdminEnforced?: InputMaybe<Scalars['Boolean']>;
  /** The glob-like pattern used to determine matching branches. */
  pattern: Scalars['String'];
  /** A list of User, Team or App IDs allowed to push to matching branches. */
  pushActorIds?: InputMaybe<Array<Scalars['ID']>>;
  /** The global relay id of the repository in which a new branch protection rule should be created in. */
  repositoryId: Scalars['ID'];
  /** Number of approving reviews required to update matching branches. */
  requiredApprovingReviewCount?: InputMaybe<Scalars['Int']>;
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  requiredStatusCheckContexts?: InputMaybe<Array<Scalars['String']>>;
  /** The list of required status checks */
  requiredStatusChecks?: InputMaybe<Array<Gh_RequiredStatusCheckInput>>;
  /** Are approving reviews required to update matching branches. */
  requiresApprovingReviews?: InputMaybe<Scalars['Boolean']>;
  /** Are reviews from code owners required to update matching branches. */
  requiresCodeOwnerReviews?: InputMaybe<Scalars['Boolean']>;
  /** Are commits required to be signed. */
  requiresCommitSignatures?: InputMaybe<Scalars['Boolean']>;
  /** Are conversations required to be resolved before merging. */
  requiresConversationResolution?: InputMaybe<Scalars['Boolean']>;
  /** Are merge commits prohibited from being pushed to this branch. */
  requiresLinearHistory?: InputMaybe<Scalars['Boolean']>;
  /** Are status checks required to update matching branches. */
  requiresStatusChecks?: InputMaybe<Scalars['Boolean']>;
  /** Are branches required to be up to date before merging. */
  requiresStrictStatusChecks?: InputMaybe<Scalars['Boolean']>;
  /** Is pushing to matching branches restricted. */
  restrictsPushes?: InputMaybe<Scalars['Boolean']>;
  /** Is dismissal of pull request reviews restricted. */
  restrictsReviewDismissals?: InputMaybe<Scalars['Boolean']>;
  /** A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches. */
  reviewDismissalActorIds?: InputMaybe<Array<Scalars['ID']>>;
};

/** Autogenerated return type of CreateBranchProtectionRule */
export type Gh_CreateBranchProtectionRulePayload = {
  __typename?: 'gh_CreateBranchProtectionRulePayload';
  /** The newly created BranchProtectionRule. */
  branchProtectionRule?: Maybe<Gh_BranchProtectionRule>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateCheckRun */
export type Gh_CreateCheckRunInput = {
  /** Possible further actions the integrator can perform, which a user may trigger. */
  actions?: InputMaybe<Array<Gh_CheckRunAction>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The time that the check run finished. */
  completedAt?: InputMaybe<Scalars['gh_DateTime']>;
  /** The final conclusion of the check. */
  conclusion?: InputMaybe<Gh_CheckConclusionState>;
  /** The URL of the integrator's site that has the full details of the check. */
  detailsUrl?: InputMaybe<Scalars['gh_URI']>;
  /** A reference for the run on the integrator's system. */
  externalId?: InputMaybe<Scalars['String']>;
  /** The SHA of the head commit. */
  headSha: Scalars['gh_GitObjectID'];
  /** The name of the check. */
  name: Scalars['String'];
  /** Descriptive details about the run. */
  output?: InputMaybe<Gh_CheckRunOutput>;
  /** The node ID of the repository. */
  repositoryId: Scalars['ID'];
  /** The time that the check run began. */
  startedAt?: InputMaybe<Scalars['gh_DateTime']>;
  /** The current status. */
  status?: InputMaybe<Gh_RequestableCheckStatusState>;
};

/** Autogenerated return type of CreateCheckRun */
export type Gh_CreateCheckRunPayload = {
  __typename?: 'gh_CreateCheckRunPayload';
  /** The newly created check run. */
  checkRun?: Maybe<Gh_CheckRun>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateCheckSuite */
export type Gh_CreateCheckSuiteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The SHA of the head commit. */
  headSha: Scalars['gh_GitObjectID'];
  /** The Node ID of the repository. */
  repositoryId: Scalars['ID'];
};

/** Autogenerated return type of CreateCheckSuite */
export type Gh_CreateCheckSuitePayload = {
  __typename?: 'gh_CreateCheckSuitePayload';
  /** The newly created check suite. */
  checkSuite?: Maybe<Gh_CheckSuite>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateCommitOnBranch */
export type Gh_CreateCommitOnBranchInput = {
  /** The Ref to be updated.  Must be a branch. */
  branch: Gh_CommittableBranch;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The git commit oid expected at the head of the branch prior to the commit */
  expectedHeadOid: Scalars['gh_GitObjectID'];
  /** A description of changes to files in this commit. */
  fileChanges?: InputMaybe<Gh_FileChanges>;
  /** The commit message the be included with the commit. */
  message: Gh_CommitMessage;
};

/** Autogenerated return type of CreateCommitOnBranch */
export type Gh_CreateCommitOnBranchPayload = {
  __typename?: 'gh_CreateCommitOnBranchPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The new commit. */
  commit?: Maybe<Gh_Commit>;
  /** The ref which has been updated to point to the new commit. */
  ref?: Maybe<Gh_Ref>;
};

/** Autogenerated input type of CreateDiscussion */
export type Gh_CreateDiscussionInput = {
  /** The body of the discussion. */
  body: Scalars['String'];
  /** The id of the discussion category to associate with this discussion. */
  categoryId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The id of the repository on which to create the discussion. */
  repositoryId: Scalars['ID'];
  /** The title of the discussion. */
  title: Scalars['String'];
};

/** Autogenerated return type of CreateDiscussion */
export type Gh_CreateDiscussionPayload = {
  __typename?: 'gh_CreateDiscussionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The discussion that was just created. */
  discussion?: Maybe<Gh_Discussion>;
};

/** Autogenerated input type of CreateEnterpriseOrganization */
export type Gh_CreateEnterpriseOrganizationInput = {
  /** The logins for the administrators of the new organization. */
  adminLogins: Array<Scalars['String']>;
  /** The email used for sending billing receipts. */
  billingEmail: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the enterprise owning the new organization. */
  enterpriseId: Scalars['ID'];
  /** The login of the new organization. */
  login: Scalars['String'];
  /** The profile name of the new organization. */
  profileName: Scalars['String'];
};

/** Autogenerated return type of CreateEnterpriseOrganization */
export type Gh_CreateEnterpriseOrganizationPayload = {
  __typename?: 'gh_CreateEnterpriseOrganizationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The enterprise that owns the created organization. */
  enterprise?: Maybe<Gh_Enterprise>;
  /** The organization that was created. */
  organization?: Maybe<Gh_Organization>;
};

/** Autogenerated input type of CreateEnvironment */
export type Gh_CreateEnvironmentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The name of the environment. */
  name: Scalars['String'];
  /** The node ID of the repository. */
  repositoryId: Scalars['ID'];
};

/** Autogenerated return type of CreateEnvironment */
export type Gh_CreateEnvironmentPayload = {
  __typename?: 'gh_CreateEnvironmentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The new or existing environment. */
  environment?: Maybe<Gh_Environment>;
};

/** Autogenerated input type of CreateIpAllowListEntry */
export type Gh_CreateIpAllowListEntryInput = {
  /** An IP address or range of addresses in CIDR notation. */
  allowListValue: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Whether the IP allow list entry is active when an IP allow list is enabled. */
  isActive: Scalars['Boolean'];
  /** An optional name for the IP allow list entry. */
  name?: InputMaybe<Scalars['String']>;
  /** The ID of the owner for which to create the new IP allow list entry. */
  ownerId: Scalars['ID'];
};

/** Autogenerated return type of CreateIpAllowListEntry */
export type Gh_CreateIpAllowListEntryPayload = {
  __typename?: 'gh_CreateIpAllowListEntryPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The IP allow list entry that was created. */
  ipAllowListEntry?: Maybe<Gh_IpAllowListEntry>;
};

/** Autogenerated input type of CreateIssue */
export type Gh_CreateIssueInput = {
  /** The Node ID for the user assignee for this issue. */
  assigneeIds?: InputMaybe<Array<Scalars['ID']>>;
  /** The body for the issue description. */
  body?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The name of an issue template in the repository, assigns labels and assignees from the template to the issue */
  issueTemplate?: InputMaybe<Scalars['String']>;
  /** An array of Node IDs of labels for this issue. */
  labelIds?: InputMaybe<Array<Scalars['ID']>>;
  /** The Node ID of the milestone for this issue. */
  milestoneId?: InputMaybe<Scalars['ID']>;
  /** An array of Node IDs for projects associated with this issue. */
  projectIds?: InputMaybe<Array<Scalars['ID']>>;
  /** The Node ID of the repository. */
  repositoryId: Scalars['ID'];
  /** The title for the issue. */
  title: Scalars['String'];
};

/** Autogenerated return type of CreateIssue */
export type Gh_CreateIssuePayload = {
  __typename?: 'gh_CreateIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The new issue. */
  issue?: Maybe<Gh_Issue>;
};

/** Autogenerated input type of CreateMigrationSource */
export type Gh_CreateMigrationSourceInput = {
  /** The Octoshift migration source access token. */
  accessToken?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The GitHub personal access token of the user importing to the target repository. */
  githubPat?: InputMaybe<Scalars['String']>;
  /** The Octoshift migration source name. */
  name: Scalars['String'];
  /** The ID of the organization that will own the Octoshift migration source. */
  ownerId: Scalars['ID'];
  /** The Octoshift migration source type. */
  type: Gh_MigrationSourceType;
  /** The Octoshift migration source URL. */
  url: Scalars['String'];
};

/** Autogenerated return type of CreateMigrationSource */
export type Gh_CreateMigrationSourcePayload = {
  __typename?: 'gh_CreateMigrationSourcePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The created Octoshift migration source. */
  migrationSource?: Maybe<Gh_MigrationSource>;
};

/** Autogenerated input type of CreateProject */
export type Gh_CreateProjectInput = {
  /** The description of project. */
  body?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The name of project. */
  name: Scalars['String'];
  /** The owner ID to create the project under. */
  ownerId: Scalars['ID'];
  /** A list of repository IDs to create as linked repositories for the project */
  repositoryIds?: InputMaybe<Array<Scalars['ID']>>;
  /** The name of the GitHub-provided template. */
  template?: InputMaybe<Gh_ProjectTemplate>;
};

/** Autogenerated return type of CreateProject */
export type Gh_CreateProjectPayload = {
  __typename?: 'gh_CreateProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The new project. */
  project?: Maybe<Gh_Project>;
};

/** Autogenerated input type of CreatePullRequest */
export type Gh_CreatePullRequestInput = {
  /**
   * The name of the branch you want your changes pulled into. This should be an existing branch
   * on the current repository. You cannot update the base branch on a pull request to point
   * to another repository.
   *
   */
  baseRefName: Scalars['String'];
  /** The contents of the pull request. */
  body?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Indicates whether this pull request should be a draft. */
  draft?: InputMaybe<Scalars['Boolean']>;
  /**
   * The name of the branch where your changes are implemented. For cross-repository pull requests
   * in the same network, namespace `head_ref_name` with a user like this: `username:branch`.
   *
   */
  headRefName: Scalars['String'];
  /** Indicates whether maintainers can modify the pull request. */
  maintainerCanModify?: InputMaybe<Scalars['Boolean']>;
  /** The Node ID of the repository. */
  repositoryId: Scalars['ID'];
  /** The title of the pull request. */
  title: Scalars['String'];
};

/** Autogenerated return type of CreatePullRequest */
export type Gh_CreatePullRequestPayload = {
  __typename?: 'gh_CreatePullRequestPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The new pull request. */
  pullRequest?: Maybe<Gh_PullRequest>;
};

/** Autogenerated input type of CreateRef */
export type Gh_CreateRefInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`). */
  name: Scalars['String'];
  /** The GitObjectID that the new Ref shall target. Must point to a commit. */
  oid: Scalars['gh_GitObjectID'];
  /** The Node ID of the Repository to create the Ref in. */
  repositoryId: Scalars['ID'];
};

/** Autogenerated return type of CreateRef */
export type Gh_CreateRefPayload = {
  __typename?: 'gh_CreateRefPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The newly created ref. */
  ref?: Maybe<Gh_Ref>;
};

/** Autogenerated input type of CreateRepository */
export type Gh_CreateRepositoryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** A short description of the new repository. */
  description?: InputMaybe<Scalars['String']>;
  /** Indicates if the repository should have the issues feature enabled. */
  hasIssuesEnabled?: InputMaybe<Scalars['Boolean']>;
  /** Indicates if the repository should have the wiki feature enabled. */
  hasWikiEnabled?: InputMaybe<Scalars['Boolean']>;
  /** The URL for a web page about this repository. */
  homepageUrl?: InputMaybe<Scalars['gh_URI']>;
  /** The name of the new repository. */
  name: Scalars['String'];
  /** The ID of the owner for the new repository. */
  ownerId?: InputMaybe<Scalars['ID']>;
  /** When an organization is specified as the owner, this ID identifies the team that should be granted access to the new repository. */
  teamId?: InputMaybe<Scalars['ID']>;
  /** Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure. */
  template?: InputMaybe<Scalars['Boolean']>;
  /** Indicates the repository's visibility level. */
  visibility: Gh_RepositoryVisibility;
};

/** Autogenerated return type of CreateRepository */
export type Gh_CreateRepositoryPayload = {
  __typename?: 'gh_CreateRepositoryPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The new repository. */
  repository?: Maybe<Gh_Repository>;
};

/** Autogenerated input type of CreateSponsorsTier */
export type Gh_CreateSponsorsTierInput = {
  /** The value of the new tier in US dollars. Valid values: 1-12000. */
  amount: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc. */
  description: Scalars['String'];
  /** Whether sponsorships using this tier should happen monthly/yearly or just once. */
  isRecurring?: InputMaybe<Scalars['Boolean']>;
  /** Whether to make the tier available immediately for sponsors to choose. Defaults to creating a draft tier that will not be publicly visible. */
  publish?: InputMaybe<Scalars['Boolean']>;
  /** Optional ID of the private repository that sponsors at this tier should gain read-only access to. Must be owned by an organization. */
  repositoryId?: InputMaybe<Scalars['ID']>;
  /** Optional name of the private repository that sponsors at this tier should gain read-only access to. Must be owned by an organization. Necessary if repositoryOwnerLogin is given. Will be ignored if repositoryId is given. */
  repositoryName?: InputMaybe<Scalars['String']>;
  /** Optional login of the organization owner of the private repository that sponsors at this tier should gain read-only access to. Necessary if repositoryName is given. Will be ignored if repositoryId is given. */
  repositoryOwnerLogin?: InputMaybe<Scalars['String']>;
  /** The ID of the user or organization who owns the GitHub Sponsors profile. Defaults to the current user if omitted and sponsorableLogin is not given. */
  sponsorableId?: InputMaybe<Scalars['ID']>;
  /** The username of the user or organization who owns the GitHub Sponsors profile. Defaults to the current user if omitted and sponsorableId is not given. */
  sponsorableLogin?: InputMaybe<Scalars['String']>;
  /** Optional message new sponsors at this tier will receive. */
  welcomeMessage?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of CreateSponsorsTier */
export type Gh_CreateSponsorsTierPayload = {
  __typename?: 'gh_CreateSponsorsTierPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The new tier. */
  sponsorsTier?: Maybe<Gh_SponsorsTier>;
};

/** Autogenerated input type of CreateSponsorship */
export type Gh_CreateSponsorshipInput = {
  /** The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000. */
  amount?: InputMaybe<Scalars['Int']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified. */
  isRecurring?: InputMaybe<Scalars['Boolean']>;
  /** Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used. */
  privacyLevel?: InputMaybe<Gh_SponsorshipPrivacy>;
  /** Whether the sponsor should receive email updates from the sponsorable. */
  receiveEmails?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given. */
  sponsorId?: InputMaybe<Scalars['ID']>;
  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given. */
  sponsorLogin?: InputMaybe<Scalars['String']>;
  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
  sponsorableId?: InputMaybe<Scalars['ID']>;
  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
  sponsorableLogin?: InputMaybe<Scalars['String']>;
  /** The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified. */
  tierId?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of CreateSponsorship */
export type Gh_CreateSponsorshipPayload = {
  __typename?: 'gh_CreateSponsorshipPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The sponsorship that was started. */
  sponsorship?: Maybe<Gh_Sponsorship>;
};

/** Autogenerated input type of CreateTeamDiscussionComment */
export type Gh_CreateTeamDiscussionCommentInput = {
  /** The content of the comment. */
  body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the discussion to which the comment belongs. */
  discussionId: Scalars['ID'];
};

/** Autogenerated return type of CreateTeamDiscussionComment */
export type Gh_CreateTeamDiscussionCommentPayload = {
  __typename?: 'gh_CreateTeamDiscussionCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The new comment. */
  teamDiscussionComment?: Maybe<Gh_TeamDiscussionComment>;
};

/** Autogenerated input type of CreateTeamDiscussion */
export type Gh_CreateTeamDiscussionInput = {
  /** The content of the discussion. */
  body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** If true, restricts the visibility of this discussion to team members and organization admins. If false or not specified, allows any organization member to view this discussion. */
  private?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the team to which the discussion belongs. */
  teamId: Scalars['ID'];
  /** The title of the discussion. */
  title: Scalars['String'];
};

/** Autogenerated return type of CreateTeamDiscussion */
export type Gh_CreateTeamDiscussionPayload = {
  __typename?: 'gh_CreateTeamDiscussionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The new discussion. */
  teamDiscussion?: Maybe<Gh_TeamDiscussion>;
};

/** Represents the contribution a user made by committing to a repository. */
export type Gh_CreatedCommitContribution = Gh_Contribution & {
  __typename?: 'gh_CreatedCommitContribution';
  /** How many commits were made on this day to this repository by the user. */
  commitCount: Scalars['Int'];
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted: Scalars['Boolean'];
  /** When this contribution was made. */
  occurredAt: Scalars['gh_DateTime'];
  /** The repository the user made a commit in. */
  repository: Gh_Repository;
  /** The HTTP path for this contribution. */
  resourcePath: Scalars['gh_URI'];
  /** The HTTP URL for this contribution. */
  url: Scalars['gh_URI'];
  /**
   * The user who made this contribution.
   *
   */
  user: Gh_User;
};

/** The connection type for CreatedCommitContribution. */
export type Gh_CreatedCommitContributionConnection = {
  __typename?: 'gh_CreatedCommitContributionConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_CreatedCommitContributionEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_CreatedCommitContribution>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /**
   * Identifies the total count of commits across days and repositories in the connection.
   *
   */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_CreatedCommitContributionEdge = {
  __typename?: 'gh_CreatedCommitContributionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_CreatedCommitContribution>;
};

/** Represents the contribution a user made on GitHub by opening an issue. */
export type Gh_CreatedIssueContribution = Gh_Contribution & {
  __typename?: 'gh_CreatedIssueContribution';
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted: Scalars['Boolean'];
  /** The issue that was opened. */
  issue: Gh_Issue;
  /** When this contribution was made. */
  occurredAt: Scalars['gh_DateTime'];
  /** The HTTP path for this contribution. */
  resourcePath: Scalars['gh_URI'];
  /** The HTTP URL for this contribution. */
  url: Scalars['gh_URI'];
  /**
   * The user who made this contribution.
   *
   */
  user: Gh_User;
};

/** The connection type for CreatedIssueContribution. */
export type Gh_CreatedIssueContributionConnection = {
  __typename?: 'gh_CreatedIssueContributionConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_CreatedIssueContributionEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_CreatedIssueContribution>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_CreatedIssueContributionEdge = {
  __typename?: 'gh_CreatedIssueContributionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_CreatedIssueContribution>;
};

/** Represents either a issue the viewer can access or a restricted contribution. */
export type Gh_CreatedIssueOrRestrictedContribution = Gh_CreatedIssueContribution | Gh_RestrictedContribution;

/** Represents the contribution a user made on GitHub by opening a pull request. */
export type Gh_CreatedPullRequestContribution = Gh_Contribution & {
  __typename?: 'gh_CreatedPullRequestContribution';
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted: Scalars['Boolean'];
  /** When this contribution was made. */
  occurredAt: Scalars['gh_DateTime'];
  /** The pull request that was opened. */
  pullRequest: Gh_PullRequest;
  /** The HTTP path for this contribution. */
  resourcePath: Scalars['gh_URI'];
  /** The HTTP URL for this contribution. */
  url: Scalars['gh_URI'];
  /**
   * The user who made this contribution.
   *
   */
  user: Gh_User;
};

/** The connection type for CreatedPullRequestContribution. */
export type Gh_CreatedPullRequestContributionConnection = {
  __typename?: 'gh_CreatedPullRequestContributionConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_CreatedPullRequestContributionEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_CreatedPullRequestContribution>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_CreatedPullRequestContributionEdge = {
  __typename?: 'gh_CreatedPullRequestContributionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_CreatedPullRequestContribution>;
};

/** Represents either a pull request the viewer can access or a restricted contribution. */
export type Gh_CreatedPullRequestOrRestrictedContribution = Gh_CreatedPullRequestContribution | Gh_RestrictedContribution;

/** Represents the contribution a user made by leaving a review on a pull request. */
export type Gh_CreatedPullRequestReviewContribution = Gh_Contribution & {
  __typename?: 'gh_CreatedPullRequestReviewContribution';
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted: Scalars['Boolean'];
  /** When this contribution was made. */
  occurredAt: Scalars['gh_DateTime'];
  /** The pull request the user reviewed. */
  pullRequest: Gh_PullRequest;
  /** The review the user left on the pull request. */
  pullRequestReview: Gh_PullRequestReview;
  /** The repository containing the pull request that the user reviewed. */
  repository: Gh_Repository;
  /** The HTTP path for this contribution. */
  resourcePath: Scalars['gh_URI'];
  /** The HTTP URL for this contribution. */
  url: Scalars['gh_URI'];
  /**
   * The user who made this contribution.
   *
   */
  user: Gh_User;
};

/** The connection type for CreatedPullRequestReviewContribution. */
export type Gh_CreatedPullRequestReviewContributionConnection = {
  __typename?: 'gh_CreatedPullRequestReviewContributionConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_CreatedPullRequestReviewContributionEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_CreatedPullRequestReviewContribution>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_CreatedPullRequestReviewContributionEdge = {
  __typename?: 'gh_CreatedPullRequestReviewContributionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_CreatedPullRequestReviewContribution>;
};

/** Represents the contribution a user made on GitHub by creating a repository. */
export type Gh_CreatedRepositoryContribution = Gh_Contribution & {
  __typename?: 'gh_CreatedRepositoryContribution';
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted: Scalars['Boolean'];
  /** When this contribution was made. */
  occurredAt: Scalars['gh_DateTime'];
  /** The repository that was created. */
  repository: Gh_Repository;
  /** The HTTP path for this contribution. */
  resourcePath: Scalars['gh_URI'];
  /** The HTTP URL for this contribution. */
  url: Scalars['gh_URI'];
  /**
   * The user who made this contribution.
   *
   */
  user: Gh_User;
};

/** The connection type for CreatedRepositoryContribution. */
export type Gh_CreatedRepositoryContributionConnection = {
  __typename?: 'gh_CreatedRepositoryContributionConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_CreatedRepositoryContributionEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_CreatedRepositoryContribution>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_CreatedRepositoryContributionEdge = {
  __typename?: 'gh_CreatedRepositoryContributionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_CreatedRepositoryContribution>;
};

/** Represents either a repository the viewer can access or a restricted contribution. */
export type Gh_CreatedRepositoryOrRestrictedContribution = Gh_CreatedRepositoryContribution | Gh_RestrictedContribution;

/** Represents a mention made by one issue or pull request to another. */
export type Gh_CrossReferencedEvent = Gh_Node & Gh_UniformResourceLocatable & {
  __typename?: 'gh_CrossReferencedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** Reference originated in a different repository. */
  isCrossRepository: Scalars['Boolean'];
  /** Identifies when the reference was made. */
  referencedAt: Scalars['gh_DateTime'];
  /** The HTTP path for this pull request. */
  resourcePath: Scalars['gh_URI'];
  /** Issue or pull request that made the reference. */
  source: Gh_ReferencedSubject;
  /** Issue or pull request to which the reference was made. */
  target: Gh_ReferencedSubject;
  /** The HTTP URL for this pull request. */
  url: Scalars['gh_URI'];
  /** Checks if the target will be closed when the source is merged. */
  willCloseTarget: Scalars['Boolean'];
};

/** Autogenerated input type of DeclineTopicSuggestion */
export type Gh_DeclineTopicSuggestionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The name of the suggested topic. */
  name: Scalars['String'];
  /** The reason why the suggested topic is declined. */
  reason: Gh_TopicSuggestionDeclineReason;
  /** The Node ID of the repository. */
  repositoryId: Scalars['ID'];
};

/** Autogenerated return type of DeclineTopicSuggestion */
export type Gh_DeclineTopicSuggestionPayload = {
  __typename?: 'gh_DeclineTopicSuggestionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The declined topic. */
  topic?: Maybe<Gh_Topic>;
};

/** The possible base permissions for repositories. */
export enum Gh_DefaultRepositoryPermissionField {
  /** Can read, write, and administrate repos by default */
  Admin = 'ADMIN',
  /** No access */
  None = 'NONE',
  /** Can read repos by default */
  Read = 'READ',
  /** Can read and write repos by default */
  Write = 'WRITE'
}

/** Entities that can be deleted. */
export type Gh_Deletable = {
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: Scalars['Boolean'];
};

/** Autogenerated input type of DeleteBranchProtectionRule */
export type Gh_DeleteBranchProtectionRuleInput = {
  /** The global relay id of the branch protection rule to be deleted. */
  branchProtectionRuleId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteBranchProtectionRule */
export type Gh_DeleteBranchProtectionRulePayload = {
  __typename?: 'gh_DeleteBranchProtectionRulePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of DeleteDeployment */
export type Gh_DeleteDeploymentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Node ID of the deployment to be deleted. */
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteDeployment */
export type Gh_DeleteDeploymentPayload = {
  __typename?: 'gh_DeleteDeploymentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of DeleteDiscussionComment */
export type Gh_DeleteDiscussionCommentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Node id of the discussion comment to delete. */
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteDiscussionComment */
export type Gh_DeleteDiscussionCommentPayload = {
  __typename?: 'gh_DeleteDiscussionCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The discussion comment that was just deleted. */
  comment?: Maybe<Gh_DiscussionComment>;
};

/** Autogenerated input type of DeleteDiscussion */
export type Gh_DeleteDiscussionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The id of the discussion to delete. */
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteDiscussion */
export type Gh_DeleteDiscussionPayload = {
  __typename?: 'gh_DeleteDiscussionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The discussion that was just deleted. */
  discussion?: Maybe<Gh_Discussion>;
};

/** Autogenerated input type of DeleteEnvironment */
export type Gh_DeleteEnvironmentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Node ID of the environment to be deleted. */
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteEnvironment */
export type Gh_DeleteEnvironmentPayload = {
  __typename?: 'gh_DeleteEnvironmentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of DeleteIpAllowListEntry */
export type Gh_DeleteIpAllowListEntryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the IP allow list entry to delete. */
  ipAllowListEntryId: Scalars['ID'];
};

/** Autogenerated return type of DeleteIpAllowListEntry */
export type Gh_DeleteIpAllowListEntryPayload = {
  __typename?: 'gh_DeleteIpAllowListEntryPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The IP allow list entry that was deleted. */
  ipAllowListEntry?: Maybe<Gh_IpAllowListEntry>;
};

/** Autogenerated input type of DeleteIssueComment */
export type Gh_DeleteIssueCommentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the comment to delete. */
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteIssueComment */
export type Gh_DeleteIssueCommentPayload = {
  __typename?: 'gh_DeleteIssueCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of DeleteIssue */
export type Gh_DeleteIssueInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the issue to delete. */
  issueId: Scalars['ID'];
};

/** Autogenerated return type of DeleteIssue */
export type Gh_DeleteIssuePayload = {
  __typename?: 'gh_DeleteIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The repository the issue belonged to */
  repository?: Maybe<Gh_Repository>;
};

/** Autogenerated input type of DeleteProjectCard */
export type Gh_DeleteProjectCardInput = {
  /** The id of the card to delete. */
  cardId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteProjectCard */
export type Gh_DeleteProjectCardPayload = {
  __typename?: 'gh_DeleteProjectCardPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The column the deleted card was in. */
  column?: Maybe<Gh_ProjectColumn>;
  /** The deleted card ID. */
  deletedCardId?: Maybe<Scalars['ID']>;
};

/** Autogenerated input type of DeleteProjectColumn */
export type Gh_DeleteProjectColumnInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The id of the column to delete. */
  columnId: Scalars['ID'];
};

/** Autogenerated return type of DeleteProjectColumn */
export type Gh_DeleteProjectColumnPayload = {
  __typename?: 'gh_DeleteProjectColumnPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The deleted column ID. */
  deletedColumnId?: Maybe<Scalars['ID']>;
  /** The project the deleted column was in. */
  project?: Maybe<Gh_Project>;
};

/** Autogenerated input type of DeleteProject */
export type Gh_DeleteProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Project ID to update. */
  projectId: Scalars['ID'];
};

/** Autogenerated input type of DeleteProjectNextItem */
export type Gh_DeleteProjectNextItemInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the item to be removed. */
  itemId: Scalars['ID'];
  /** The ID of the Project from which the item should be removed. */
  projectId: Scalars['ID'];
};

/** Autogenerated return type of DeleteProjectNextItem */
export type Gh_DeleteProjectNextItemPayload = {
  __typename?: 'gh_DeleteProjectNextItemPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the deleted item. */
  deletedItemId?: Maybe<Scalars['ID']>;
};

/** Autogenerated return type of DeleteProject */
export type Gh_DeleteProjectPayload = {
  __typename?: 'gh_DeleteProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The repository or organization the project was removed from. */
  owner?: Maybe<Gh_ProjectOwner>;
};

/** Autogenerated input type of DeletePullRequestReviewComment */
export type Gh_DeletePullRequestReviewCommentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the comment to delete. */
  id: Scalars['ID'];
};

/** Autogenerated return type of DeletePullRequestReviewComment */
export type Gh_DeletePullRequestReviewCommentPayload = {
  __typename?: 'gh_DeletePullRequestReviewCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The pull request review the deleted comment belonged to. */
  pullRequestReview?: Maybe<Gh_PullRequestReview>;
};

/** Autogenerated input type of DeletePullRequestReview */
export type Gh_DeletePullRequestReviewInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Node ID of the pull request review to delete. */
  pullRequestReviewId: Scalars['ID'];
};

/** Autogenerated return type of DeletePullRequestReview */
export type Gh_DeletePullRequestReviewPayload = {
  __typename?: 'gh_DeletePullRequestReviewPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The deleted pull request review. */
  pullRequestReview?: Maybe<Gh_PullRequestReview>;
};

/** Autogenerated input type of DeleteRef */
export type Gh_DeleteRefInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Node ID of the Ref to be deleted. */
  refId: Scalars['ID'];
};

/** Autogenerated return type of DeleteRef */
export type Gh_DeleteRefPayload = {
  __typename?: 'gh_DeleteRefPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of DeleteTeamDiscussionComment */
export type Gh_DeleteTeamDiscussionCommentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the comment to delete. */
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteTeamDiscussionComment */
export type Gh_DeleteTeamDiscussionCommentPayload = {
  __typename?: 'gh_DeleteTeamDiscussionCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of DeleteTeamDiscussion */
export type Gh_DeleteTeamDiscussionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The discussion ID to delete. */
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteTeamDiscussion */
export type Gh_DeleteTeamDiscussionPayload = {
  __typename?: 'gh_DeleteTeamDiscussionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of DeleteVerifiableDomain */
export type Gh_DeleteVerifiableDomainInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the verifiable domain to delete. */
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteVerifiableDomain */
export type Gh_DeleteVerifiableDomainPayload = {
  __typename?: 'gh_DeleteVerifiableDomainPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The owning account from which the domain was deleted. */
  owner?: Maybe<Gh_VerifiableDomainOwner>;
};

/** Represents a 'demilestoned' event on a given issue or pull request. */
export type Gh_DemilestonedEvent = Gh_Node & {
  __typename?: 'gh_DemilestonedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** Identifies the milestone title associated with the 'demilestoned' event. */
  milestoneTitle: Scalars['String'];
  /** Object referenced by event. */
  subject: Gh_MilestoneItem;
};

/** A Dependabot Update for a dependency in a repository */
export type Gh_DependabotUpdate = Gh_RepositoryNode & {
  __typename?: 'gh_DependabotUpdate';
  /** The error from a dependency update */
  error?: Maybe<Gh_DependabotUpdateError>;
  /** The associated pull request */
  pullRequest?: Maybe<Gh_PullRequest>;
  /** The repository associated with this node. */
  repository: Gh_Repository;
};

/** An error produced from a Dependabot Update */
export type Gh_DependabotUpdateError = {
  __typename?: 'gh_DependabotUpdateError';
  /** The body of the error */
  body: Scalars['String'];
  /** The error code */
  errorType: Scalars['String'];
  /** The title of the error */
  title: Scalars['String'];
};

/** The possible ecosystems of a dependency graph package. */
export enum Gh_DependencyGraphEcosystem {
  /** GitHub Actions */
  Actions = 'ACTIONS',
  /** PHP packages hosted at packagist.org */
  Composer = 'COMPOSER',
  /** Go modules */
  Go = 'GO',
  /** Java artifacts hosted at the Maven central repository */
  Maven = 'MAVEN',
  /** JavaScript packages hosted at npmjs.com */
  Npm = 'NPM',
  /** .NET packages hosted at the NuGet Gallery */
  Nuget = 'NUGET',
  /** Python packages hosted at PyPI.org */
  Pip = 'PIP',
  /** Ruby gems hosted at RubyGems.org */
  Rubygems = 'RUBYGEMS'
}

/** A repository deploy key. */
export type Gh_DeployKey = Gh_Node & {
  __typename?: 'gh_DeployKey';
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** The deploy key. */
  key: Scalars['String'];
  /** Whether or not the deploy key is read only. */
  readOnly: Scalars['Boolean'];
  /** The deploy key title. */
  title: Scalars['String'];
  /** Whether or not the deploy key has been verified. */
  verified: Scalars['Boolean'];
};

/** The connection type for DeployKey. */
export type Gh_DeployKeyConnection = {
  __typename?: 'gh_DeployKeyConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_DeployKeyEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_DeployKey>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_DeployKeyEdge = {
  __typename?: 'gh_DeployKeyEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_DeployKey>;
};

/** Represents a 'deployed' event on a given pull request. */
export type Gh_DeployedEvent = Gh_Node & {
  __typename?: 'gh_DeployedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The deployment associated with the 'deployed' event. */
  deployment: Gh_Deployment;
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest: Gh_PullRequest;
  /** The ref associated with the 'deployed' event. */
  ref?: Maybe<Gh_Ref>;
};

/** Represents triggered deployment instance. */
export type Gh_Deployment = Gh_Node & {
  __typename?: 'gh_Deployment';
  /** Identifies the commit sha of the deployment. */
  commit?: Maybe<Gh_Commit>;
  /** Identifies the oid of the deployment commit, even if the commit has been deleted. */
  commitOid: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the actor who triggered the deployment. */
  creator: Gh_Actor;
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The deployment description. */
  description?: Maybe<Scalars['String']>;
  /** The latest environment to which this deployment was made. */
  environment?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  /** The latest environment to which this deployment was made. */
  latestEnvironment?: Maybe<Scalars['String']>;
  /** The latest status of this deployment. */
  latestStatus?: Maybe<Gh_DeploymentStatus>;
  /** The original environment to which this deployment was made. */
  originalEnvironment?: Maybe<Scalars['String']>;
  /** Extra information that a deployment system might need. */
  payload?: Maybe<Scalars['String']>;
  /** Identifies the Ref of the deployment, if the deployment was created by ref. */
  ref?: Maybe<Gh_Ref>;
  /** Identifies the repository associated with the deployment. */
  repository: Gh_Repository;
  /** The current state of the deployment. */
  state?: Maybe<Gh_DeploymentState>;
  /** A list of statuses associated with the deployment. */
  statuses?: Maybe<Gh_DeploymentStatusConnection>;
  /** The deployment task. */
  task?: Maybe<Scalars['String']>;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
};


/** Represents triggered deployment instance. */
export type Gh_DeploymentStatusesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for Deployment. */
export type Gh_DeploymentConnection = {
  __typename?: 'gh_DeploymentConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_DeploymentEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Deployment>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_DeploymentEdge = {
  __typename?: 'gh_DeploymentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_Deployment>;
};

/** Represents a 'deployment_environment_changed' event on a given pull request. */
export type Gh_DeploymentEnvironmentChangedEvent = Gh_Node & {
  __typename?: 'gh_DeploymentEnvironmentChangedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The deployment status that updated the deployment environment. */
  deploymentStatus: Gh_DeploymentStatus;
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest: Gh_PullRequest;
};

/** Ordering options for deployment connections */
export type Gh_DeploymentOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order deployments by. */
  field: Gh_DeploymentOrderField;
};

/** Properties by which deployment connections can be ordered. */
export enum Gh_DeploymentOrderField {
  /** Order collection by creation time */
  CreatedAt = 'CREATED_AT'
}

/** A protection rule. */
export type Gh_DeploymentProtectionRule = {
  __typename?: 'gh_DeploymentProtectionRule';
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The teams or users that can review the deployment */
  reviewers: Gh_DeploymentReviewerConnection;
  /** The timeout in minutes for this protection rule. */
  timeout: Scalars['Int'];
  /** The type of protection rule. */
  type: Gh_DeploymentProtectionRuleType;
};


/** A protection rule. */
export type Gh_DeploymentProtectionRuleReviewersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for DeploymentProtectionRule. */
export type Gh_DeploymentProtectionRuleConnection = {
  __typename?: 'gh_DeploymentProtectionRuleConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_DeploymentProtectionRuleEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_DeploymentProtectionRule>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_DeploymentProtectionRuleEdge = {
  __typename?: 'gh_DeploymentProtectionRuleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_DeploymentProtectionRule>;
};

/** The possible protection rule types. */
export enum Gh_DeploymentProtectionRuleType {
  /** Required reviewers */
  RequiredReviewers = 'REQUIRED_REVIEWERS',
  /** Wait timer */
  WaitTimer = 'WAIT_TIMER'
}

/** A request to deploy a workflow run to an environment. */
export type Gh_DeploymentRequest = {
  __typename?: 'gh_DeploymentRequest';
  /** Whether or not the current user can approve the deployment */
  currentUserCanApprove: Scalars['Boolean'];
  /** The target environment of the deployment */
  environment: Gh_Environment;
  /** The teams or users that can review the deployment */
  reviewers: Gh_DeploymentReviewerConnection;
  /** The wait timer in minutes configured in the environment */
  waitTimer: Scalars['Int'];
  /** The wait timer in minutes configured in the environment */
  waitTimerStartedAt?: Maybe<Scalars['gh_DateTime']>;
};


/** A request to deploy a workflow run to an environment. */
export type Gh_DeploymentRequestReviewersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for DeploymentRequest. */
export type Gh_DeploymentRequestConnection = {
  __typename?: 'gh_DeploymentRequestConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_DeploymentRequestEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_DeploymentRequest>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_DeploymentRequestEdge = {
  __typename?: 'gh_DeploymentRequestEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_DeploymentRequest>;
};

/** A deployment review. */
export type Gh_DeploymentReview = Gh_Node & {
  __typename?: 'gh_DeploymentReview';
  /** The comment the user left. */
  comment: Scalars['String'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The environments approved or rejected */
  environments: Gh_EnvironmentConnection;
  id: Scalars['ID'];
  /** The decision of the user. */
  state: Gh_DeploymentReviewState;
  /** The user that reviewed the deployment. */
  user: Gh_User;
};


/** A deployment review. */
export type Gh_DeploymentReviewEnvironmentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for DeploymentReview. */
export type Gh_DeploymentReviewConnection = {
  __typename?: 'gh_DeploymentReviewConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_DeploymentReviewEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_DeploymentReview>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_DeploymentReviewEdge = {
  __typename?: 'gh_DeploymentReviewEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_DeploymentReview>;
};

/** The possible states for a deployment review. */
export enum Gh_DeploymentReviewState {
  /** The deployment was approved. */
  Approved = 'APPROVED',
  /** The deployment was rejected. */
  Rejected = 'REJECTED'
}

/** Users and teams. */
export type Gh_DeploymentReviewer = Gh_Team | Gh_User;

/** The connection type for DeploymentReviewer. */
export type Gh_DeploymentReviewerConnection = {
  __typename?: 'gh_DeploymentReviewerConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_DeploymentReviewerEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_DeploymentReviewer>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_DeploymentReviewerEdge = {
  __typename?: 'gh_DeploymentReviewerEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_DeploymentReviewer>;
};

/** The possible states in which a deployment can be. */
export enum Gh_DeploymentState {
  /** The pending deployment was not updated after 30 minutes. */
  Abandoned = 'ABANDONED',
  /** The deployment is currently active. */
  Active = 'ACTIVE',
  /** An inactive transient deployment. */
  Destroyed = 'DESTROYED',
  /** The deployment experienced an error. */
  Error = 'ERROR',
  /** The deployment has failed. */
  Failure = 'FAILURE',
  /** The deployment is inactive. */
  Inactive = 'INACTIVE',
  /** The deployment is in progress. */
  InProgress = 'IN_PROGRESS',
  /** The deployment is pending. */
  Pending = 'PENDING',
  /** The deployment has queued */
  Queued = 'QUEUED',
  /** The deployment is waiting. */
  Waiting = 'WAITING'
}

/** Describes the status of a given deployment attempt. */
export type Gh_DeploymentStatus = Gh_Node & {
  __typename?: 'gh_DeploymentStatus';
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the actor who triggered the deployment. */
  creator: Gh_Actor;
  /** Identifies the deployment associated with status. */
  deployment: Gh_Deployment;
  /** Identifies the description of the deployment. */
  description?: Maybe<Scalars['String']>;
  /** Identifies the environment URL of the deployment. */
  environmentUrl?: Maybe<Scalars['gh_URI']>;
  id: Scalars['ID'];
  /** Identifies the log URL of the deployment. */
  logUrl?: Maybe<Scalars['gh_URI']>;
  /** Identifies the current state of the deployment. */
  state: Gh_DeploymentStatusState;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
};

/** The connection type for DeploymentStatus. */
export type Gh_DeploymentStatusConnection = {
  __typename?: 'gh_DeploymentStatusConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_DeploymentStatusEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_DeploymentStatus>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_DeploymentStatusEdge = {
  __typename?: 'gh_DeploymentStatusEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_DeploymentStatus>;
};

/** The possible states for a deployment status. */
export enum Gh_DeploymentStatusState {
  /** The deployment experienced an error. */
  Error = 'ERROR',
  /** The deployment has failed. */
  Failure = 'FAILURE',
  /** The deployment is inactive. */
  Inactive = 'INACTIVE',
  /** The deployment is in progress. */
  InProgress = 'IN_PROGRESS',
  /** The deployment is pending. */
  Pending = 'PENDING',
  /** The deployment is queued */
  Queued = 'QUEUED',
  /** The deployment was successful. */
  Success = 'SUCCESS',
  /** The deployment is waiting. */
  Waiting = 'WAITING'
}

/** The possible sides of a diff. */
export enum Gh_DiffSide {
  /** The left side of the diff. */
  Left = 'LEFT',
  /** The right side of the diff. */
  Right = 'RIGHT'
}

/** Autogenerated input type of DisablePullRequestAutoMerge */
export type Gh_DisablePullRequestAutoMergeInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** ID of the pull request to disable auto merge on. */
  pullRequestId: Scalars['ID'];
};

/** Autogenerated return type of DisablePullRequestAutoMerge */
export type Gh_DisablePullRequestAutoMergePayload = {
  __typename?: 'gh_DisablePullRequestAutoMergePayload';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The pull request auto merge was disabled on. */
  pullRequest?: Maybe<Gh_PullRequest>;
};

/** Represents a 'disconnected' event on a given issue or pull request. */
export type Gh_DisconnectedEvent = Gh_Node & {
  __typename?: 'gh_DisconnectedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** Reference originated in a different repository. */
  isCrossRepository: Scalars['Boolean'];
  /** Issue or pull request from which the issue was disconnected. */
  source: Gh_ReferencedSubject;
  /** Issue or pull request which was disconnected. */
  subject: Gh_ReferencedSubject;
};

/** A discussion in a repository. */
export type Gh_Discussion = Gh_Comment & Gh_Deletable & Gh_Labelable & Gh_Lockable & Gh_Node & Gh_Reactable & Gh_RepositoryNode & Gh_Subscribable & Gh_Updatable & Gh_Votable & {
  __typename?: 'gh_Discussion';
  /** Reason that the conversation was locked. */
  activeLockReason?: Maybe<Gh_LockReason>;
  /** The comment chosen as this discussion's answer, if any. */
  answer?: Maybe<Gh_DiscussionComment>;
  /** The time when a user chose this discussion's answer, if answered. */
  answerChosenAt?: Maybe<Scalars['gh_DateTime']>;
  /** The user who chose this discussion's answer, if answered. */
  answerChosenBy?: Maybe<Gh_Actor>;
  /** The actor who authored the comment. */
  author?: Maybe<Gh_Actor>;
  /** Author's association with the subject of the comment. */
  authorAssociation: Gh_CommentAuthorAssociation;
  /** The main text of the discussion post. */
  body: Scalars['String'];
  /** The body rendered to HTML. */
  bodyHTML: Scalars['gh_HTML'];
  /** The body rendered to text. */
  bodyText: Scalars['String'];
  /** The category for this discussion. */
  category: Gh_DiscussionCategory;
  /** The replies to the discussion. */
  comments: Gh_DiscussionCommentConnection;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Check if this comment was created via an email reply. */
  createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The actor who edited the comment. */
  editor?: Maybe<Gh_Actor>;
  id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: Scalars['Boolean'];
  /** A list of labels associated with the object. */
  labels?: Maybe<Gh_LabelConnection>;
  /** The moment the editor made the last edit */
  lastEditedAt?: Maybe<Scalars['gh_DateTime']>;
  /** `true` if the object is locked */
  locked: Scalars['Boolean'];
  /** The number identifying this discussion within the repository. */
  number: Scalars['Int'];
  /** Identifies when the comment was published at. */
  publishedAt?: Maybe<Scalars['gh_DateTime']>;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: Maybe<Array<Gh_ReactionGroup>>;
  /** A list of Reactions left on the Issue. */
  reactions: Gh_ReactionConnection;
  /** The repository associated with this node. */
  repository: Gh_Repository;
  /** The path for this discussion. */
  resourcePath: Scalars['gh_URI'];
  /** The title of this discussion. */
  title: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** Number of upvotes that this subject has received. */
  upvoteCount: Scalars['Int'];
  /** The URL for this discussion. */
  url: Scalars['gh_URI'];
  /** A list of edits to this content. */
  userContentEdits?: Maybe<Gh_UserContentEditConnection>;
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: Scalars['Boolean'];
  /** Can user react to this subject */
  viewerCanReact: Scalars['Boolean'];
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
  /** Whether or not the current user can add or remove an upvote on this subject. */
  viewerCanUpvote: Scalars['Boolean'];
  /** Did the viewer author this comment. */
  viewerDidAuthor: Scalars['Boolean'];
  /** Whether or not the current user has already upvoted this subject. */
  viewerHasUpvoted: Scalars['Boolean'];
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: Maybe<Gh_SubscriptionState>;
};


/** A discussion in a repository. */
export type Gh_DiscussionCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A discussion in a repository. */
export type Gh_DiscussionLabelsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_LabelOrder>;
};


/** A discussion in a repository. */
export type Gh_DiscussionReactionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Gh_ReactionContent>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_ReactionOrder>;
};


/** A discussion in a repository. */
export type Gh_DiscussionUserContentEditsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** A category for discussions in a repository. */
export type Gh_DiscussionCategory = Gh_Node & Gh_RepositoryNode & {
  __typename?: 'gh_DiscussionCategory';
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** A description of this category. */
  description?: Maybe<Scalars['String']>;
  /** An emoji representing this category. */
  emoji: Scalars['String'];
  /** This category's emoji rendered as HTML. */
  emojiHTML: Scalars['gh_HTML'];
  id: Scalars['ID'];
  /** Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation. */
  isAnswerable: Scalars['Boolean'];
  /** The name of this category. */
  name: Scalars['String'];
  /** The repository associated with this node. */
  repository: Gh_Repository;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
};

/** The connection type for DiscussionCategory. */
export type Gh_DiscussionCategoryConnection = {
  __typename?: 'gh_DiscussionCategoryConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_DiscussionCategoryEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_DiscussionCategory>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_DiscussionCategoryEdge = {
  __typename?: 'gh_DiscussionCategoryEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_DiscussionCategory>;
};

/** A comment on a discussion. */
export type Gh_DiscussionComment = Gh_Comment & Gh_Deletable & Gh_Minimizable & Gh_Node & Gh_Reactable & Gh_Updatable & Gh_UpdatableComment & Gh_Votable & {
  __typename?: 'gh_DiscussionComment';
  /** The actor who authored the comment. */
  author?: Maybe<Gh_Actor>;
  /** Author's association with the subject of the comment. */
  authorAssociation: Gh_CommentAuthorAssociation;
  /** The body as Markdown. */
  body: Scalars['String'];
  /** The body rendered to HTML. */
  bodyHTML: Scalars['gh_HTML'];
  /** The body rendered to text. */
  bodyText: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Check if this comment was created via an email reply. */
  createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The time when this replied-to comment was deleted */
  deletedAt?: Maybe<Scalars['gh_DateTime']>;
  /** The discussion this comment was created in */
  discussion?: Maybe<Gh_Discussion>;
  /** The actor who edited the comment. */
  editor?: Maybe<Gh_Actor>;
  id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: Scalars['Boolean'];
  /** Has this comment been chosen as the answer of its discussion? */
  isAnswer: Scalars['Boolean'];
  /** Returns whether or not a comment has been minimized. */
  isMinimized: Scalars['Boolean'];
  /** The moment the editor made the last edit */
  lastEditedAt?: Maybe<Scalars['gh_DateTime']>;
  /** Returns why the comment was minimized. */
  minimizedReason?: Maybe<Scalars['String']>;
  /** Identifies when the comment was published at. */
  publishedAt?: Maybe<Scalars['gh_DateTime']>;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: Maybe<Array<Gh_ReactionGroup>>;
  /** A list of Reactions left on the Issue. */
  reactions: Gh_ReactionConnection;
  /** The threaded replies to this comment. */
  replies: Gh_DiscussionCommentConnection;
  /** The discussion comment this comment is a reply to */
  replyTo?: Maybe<Gh_DiscussionComment>;
  /** The path for this discussion comment. */
  resourcePath: Scalars['gh_URI'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** Number of upvotes that this subject has received. */
  upvoteCount: Scalars['Int'];
  /** The URL for this discussion comment. */
  url: Scalars['gh_URI'];
  /** A list of edits to this content. */
  userContentEdits?: Maybe<Gh_UserContentEditConnection>;
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: Scalars['Boolean'];
  /** Can the current user mark this comment as an answer? */
  viewerCanMarkAsAnswer: Scalars['Boolean'];
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize: Scalars['Boolean'];
  /** Can user react to this subject */
  viewerCanReact: Scalars['Boolean'];
  /** Can the current user unmark this comment as an answer? */
  viewerCanUnmarkAsAnswer: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
  /** Whether or not the current user can add or remove an upvote on this subject. */
  viewerCanUpvote: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: Array<Gh_CommentCannotUpdateReason>;
  /** Did the viewer author this comment. */
  viewerDidAuthor: Scalars['Boolean'];
  /** Whether or not the current user has already upvoted this subject. */
  viewerHasUpvoted: Scalars['Boolean'];
};


/** A comment on a discussion. */
export type Gh_DiscussionCommentReactionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Gh_ReactionContent>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_ReactionOrder>;
};


/** A comment on a discussion. */
export type Gh_DiscussionCommentRepliesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A comment on a discussion. */
export type Gh_DiscussionCommentUserContentEditsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for DiscussionComment. */
export type Gh_DiscussionCommentConnection = {
  __typename?: 'gh_DiscussionCommentConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_DiscussionCommentEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_DiscussionComment>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_DiscussionCommentEdge = {
  __typename?: 'gh_DiscussionCommentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_DiscussionComment>;
};

/** The connection type for Discussion. */
export type Gh_DiscussionConnection = {
  __typename?: 'gh_DiscussionConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_DiscussionEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Discussion>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_DiscussionEdge = {
  __typename?: 'gh_DiscussionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_Discussion>;
};

/** Ways in which lists of discussions can be ordered upon return. */
export type Gh_DiscussionOrder = {
  /** The direction in which to order discussions by the specified field. */
  direction: Gh_OrderDirection;
  /** The field by which to order discussions. */
  field: Gh_DiscussionOrderField;
};

/** Properties by which discussion connections can be ordered. */
export enum Gh_DiscussionOrderField {
  /** Order discussions by creation time. */
  CreatedAt = 'CREATED_AT',
  /** Order discussions by most recent modification time. */
  UpdatedAt = 'UPDATED_AT'
}

/** Autogenerated input type of DismissPullRequestReview */
export type Gh_DismissPullRequestReviewInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The contents of the pull request review dismissal message. */
  message: Scalars['String'];
  /** The Node ID of the pull request review to modify. */
  pullRequestReviewId: Scalars['ID'];
};

/** Autogenerated return type of DismissPullRequestReview */
export type Gh_DismissPullRequestReviewPayload = {
  __typename?: 'gh_DismissPullRequestReviewPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The dismissed pull request review. */
  pullRequestReview?: Maybe<Gh_PullRequestReview>;
};

/** The possible reasons that a Dependabot alert was dismissed. */
export enum Gh_DismissReason {
  /** A fix has already been started */
  FixStarted = 'FIX_STARTED',
  /** This alert is inaccurate or incorrect */
  Inaccurate = 'INACCURATE',
  /** Vulnerable code is not actually used */
  NotUsed = 'NOT_USED',
  /** No bandwidth to fix this */
  NoBandwidth = 'NO_BANDWIDTH',
  /** Risk is tolerable to this project */
  TolerableRisk = 'TOLERABLE_RISK'
}

/** Autogenerated input type of DismissRepositoryVulnerabilityAlert */
export type Gh_DismissRepositoryVulnerabilityAlertInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The reason the Dependabot alert is being dismissed. */
  dismissReason: Gh_DismissReason;
  /** The Dependabot alert ID to dismiss. */
  repositoryVulnerabilityAlertId: Scalars['ID'];
};

/** Autogenerated return type of DismissRepositoryVulnerabilityAlert */
export type Gh_DismissRepositoryVulnerabilityAlertPayload = {
  __typename?: 'gh_DismissRepositoryVulnerabilityAlertPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The Dependabot alert that was dismissed */
  repositoryVulnerabilityAlert?: Maybe<Gh_RepositoryVulnerabilityAlert>;
};

/** A draft issue within a project. */
export type Gh_DraftIssue = Gh_Node & {
  __typename?: 'gh_DraftIssue';
  /** A list of users to assigned to this draft issue. */
  assignees: Gh_UserConnection;
  /** The body of the draft issue. */
  body: Scalars['String'];
  /** The body of the draft issue rendered to HTML. */
  bodyHTML: Scalars['gh_HTML'];
  /** The body of the draft issue rendered to text. */
  bodyText: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The actor who created this draft issue. */
  creator?: Maybe<Gh_Actor>;
  id: Scalars['ID'];
  /** The project (beta) that contains this draft issue. */
  project: Gh_ProjectNext;
  /** The project (beta) item that wraps this draft issue. */
  projectItem: Gh_ProjectNextItem;
  /** The title of the draft issue */
  title: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
};


/** A draft issue within a project. */
export type Gh_DraftIssueAssigneesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** Specifies a review comment to be left with a Pull Request Review. */
export type Gh_DraftPullRequestReviewComment = {
  /** Body of the comment to leave. */
  body: Scalars['String'];
  /** Path to the file being commented on. */
  path: Scalars['String'];
  /** Position in the file to leave a comment on. */
  position: Scalars['Int'];
};

/** Specifies a review comment thread to be left with a Pull Request Review. */
export type Gh_DraftPullRequestReviewThread = {
  /** Body of the comment to leave. */
  body: Scalars['String'];
  /** The line of the blob to which the thread refers. The end of the line range for multi-line comments. */
  line: Scalars['Int'];
  /** Path to the file being commented on. */
  path: Scalars['String'];
  /** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */
  side?: InputMaybe<Gh_DiffSide>;
  /** The first line of the range to which the comment refers. */
  startLine?: InputMaybe<Scalars['Int']>;
  /** The side of the diff on which the start line resides. */
  startSide?: InputMaybe<Gh_DiffSide>;
};

/** Autogenerated input type of EnablePullRequestAutoMerge */
export type Gh_EnablePullRequestAutoMergeInput = {
  /** The email address to associate with this merge. */
  authorEmail?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Commit body to use for the commit when the PR is mergable; if omitted, a default message will be used. */
  commitBody?: InputMaybe<Scalars['String']>;
  /** Commit headline to use for the commit when the PR is mergable; if omitted, a default message will be used. */
  commitHeadline?: InputMaybe<Scalars['String']>;
  /** The merge method to use. If omitted, defaults to 'MERGE' */
  mergeMethod?: InputMaybe<Gh_PullRequestMergeMethod>;
  /** ID of the pull request to enable auto-merge on. */
  pullRequestId: Scalars['ID'];
};

/** Autogenerated return type of EnablePullRequestAutoMerge */
export type Gh_EnablePullRequestAutoMergePayload = {
  __typename?: 'gh_EnablePullRequestAutoMergePayload';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The pull request auto-merge was enabled on. */
  pullRequest?: Maybe<Gh_PullRequest>;
};

/** An account to manage multiple organizations with consolidated policy and billing. */
export type Gh_Enterprise = Gh_Node & {
  __typename?: 'gh_Enterprise';
  /** A URL pointing to the enterprise's public avatar. */
  avatarUrl: Scalars['gh_URI'];
  /** Enterprise billing information visible to enterprise billing managers. */
  billingInfo?: Maybe<Gh_EnterpriseBillingInfo>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The description of the enterprise. */
  description?: Maybe<Scalars['String']>;
  /** The description of the enterprise as HTML. */
  descriptionHTML: Scalars['gh_HTML'];
  id: Scalars['ID'];
  /** The location of the enterprise. */
  location?: Maybe<Scalars['String']>;
  /** A list of users who are members of this enterprise. */
  members: Gh_EnterpriseMemberConnection;
  /** The name of the enterprise. */
  name: Scalars['String'];
  /** A list of organizations that belong to this enterprise. */
  organizations: Gh_OrganizationConnection;
  /** Enterprise information only visible to enterprise owners. */
  ownerInfo?: Maybe<Gh_EnterpriseOwnerInfo>;
  /** The HTTP path for this enterprise. */
  resourcePath: Scalars['gh_URI'];
  /** The URL-friendly identifier for the enterprise. */
  slug: Scalars['String'];
  /** The HTTP URL for this enterprise. */
  url: Scalars['gh_URI'];
  /** A list of user accounts on this enterprise. */
  userAccounts: Gh_EnterpriseUserAccountConnection;
  /** Is the current viewer an admin of this enterprise? */
  viewerIsAdmin: Scalars['Boolean'];
  /** The URL of the enterprise website. */
  websiteUrl?: Maybe<Scalars['gh_URI']>;
};


/** An account to manage multiple organizations with consolidated policy and billing. */
export type Gh_EnterpriseAvatarUrlArgs = {
  size?: InputMaybe<Scalars['Int']>;
};


/** An account to manage multiple organizations with consolidated policy and billing. */
export type Gh_EnterpriseMembersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  deployment?: InputMaybe<Gh_EnterpriseUserDeployment>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_EnterpriseMemberOrder>;
  organizationLogins?: InputMaybe<Array<Scalars['String']>>;
  query?: InputMaybe<Scalars['String']>;
  role?: InputMaybe<Gh_EnterpriseUserAccountMembershipRole>;
};


/** An account to manage multiple organizations with consolidated policy and billing. */
export type Gh_EnterpriseOrganizationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_OrganizationOrder>;
  query?: InputMaybe<Scalars['String']>;
  viewerOrganizationRole?: InputMaybe<Gh_RoleInOrganization>;
};


/** An account to manage multiple organizations with consolidated policy and billing. */
export type Gh_EnterpriseUserAccountsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for User. */
export type Gh_EnterpriseAdministratorConnection = {
  __typename?: 'gh_EnterpriseAdministratorConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_EnterpriseAdministratorEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_User>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** A User who is an administrator of an enterprise. */
export type Gh_EnterpriseAdministratorEdge = {
  __typename?: 'gh_EnterpriseAdministratorEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_User>;
  /** The role of the administrator. */
  role: Gh_EnterpriseAdministratorRole;
};

/** An invitation for a user to become an owner or billing manager of an enterprise. */
export type Gh_EnterpriseAdministratorInvitation = Gh_Node & {
  __typename?: 'gh_EnterpriseAdministratorInvitation';
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The email of the person who was invited to the enterprise. */
  email?: Maybe<Scalars['String']>;
  /** The enterprise the invitation is for. */
  enterprise: Gh_Enterprise;
  id: Scalars['ID'];
  /** The user who was invited to the enterprise. */
  invitee?: Maybe<Gh_User>;
  /** The user who created the invitation. */
  inviter?: Maybe<Gh_User>;
  /** The invitee's pending role in the enterprise (owner or billing_manager). */
  role: Gh_EnterpriseAdministratorRole;
};

/** The connection type for EnterpriseAdministratorInvitation. */
export type Gh_EnterpriseAdministratorInvitationConnection = {
  __typename?: 'gh_EnterpriseAdministratorInvitationConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_EnterpriseAdministratorInvitationEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_EnterpriseAdministratorInvitation>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_EnterpriseAdministratorInvitationEdge = {
  __typename?: 'gh_EnterpriseAdministratorInvitationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_EnterpriseAdministratorInvitation>;
};

/** Ordering options for enterprise administrator invitation connections */
export type Gh_EnterpriseAdministratorInvitationOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order enterprise administrator invitations by. */
  field: Gh_EnterpriseAdministratorInvitationOrderField;
};

/** Properties by which enterprise administrator invitation connections can be ordered. */
export enum Gh_EnterpriseAdministratorInvitationOrderField {
  /** Order enterprise administrator member invitations by creation time */
  CreatedAt = 'CREATED_AT'
}

/** The possible administrator roles in an enterprise account. */
export enum Gh_EnterpriseAdministratorRole {
  /** Represents a billing manager of the enterprise account. */
  BillingManager = 'BILLING_MANAGER',
  /** Represents an owner of the enterprise account. */
  Owner = 'OWNER'
}

/** Metadata for an audit entry containing enterprise account information. */
export type Gh_EnterpriseAuditEntryData = {
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The slug of the enterprise. */
  enterpriseSlug?: Maybe<Scalars['String']>;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: Maybe<Scalars['gh_URI']>;
};

/** Enterprise billing information visible to enterprise billing managers and owners. */
export type Gh_EnterpriseBillingInfo = {
  __typename?: 'gh_EnterpriseBillingInfo';
  /** The number of licenseable users/emails across the enterprise. */
  allLicensableUsersCount: Scalars['Int'];
  /** The number of data packs used by all organizations owned by the enterprise. */
  assetPacks: Scalars['Int'];
  /** The bandwidth quota in GB for all organizations owned by the enterprise. */
  bandwidthQuota: Scalars['Float'];
  /** The bandwidth usage in GB for all organizations owned by the enterprise. */
  bandwidthUsage: Scalars['Float'];
  /** The bandwidth usage as a percentage of the bandwidth quota. */
  bandwidthUsagePercentage: Scalars['Int'];
  /** The storage quota in GB for all organizations owned by the enterprise. */
  storageQuota: Scalars['Float'];
  /** The storage usage in GB for all organizations owned by the enterprise. */
  storageUsage: Scalars['Float'];
  /** The storage usage as a percentage of the storage quota. */
  storageUsagePercentage: Scalars['Int'];
  /** The number of available licenses across all owned organizations based on the unique number of billable users. */
  totalAvailableLicenses: Scalars['Int'];
  /** The total number of licenses allocated. */
  totalLicenses: Scalars['Int'];
};

/** The possible values for the enterprise base repository permission setting. */
export enum Gh_EnterpriseDefaultRepositoryPermissionSettingValue {
  /** Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories. */
  Admin = 'ADMIN',
  /** Organization members will only be able to clone and pull public repositories. */
  None = 'NONE',
  /** Organizations in the enterprise choose base repository permissions for their members. */
  NoPolicy = 'NO_POLICY',
  /** Organization members will be able to clone and pull all organization repositories. */
  Read = 'READ',
  /** Organization members will be able to clone, pull, and push all organization repositories. */
  Write = 'WRITE'
}

/** The possible values for an enabled/disabled enterprise setting. */
export enum Gh_EnterpriseEnabledDisabledSettingValue {
  /** The setting is disabled for organizations in the enterprise. */
  Disabled = 'DISABLED',
  /** The setting is enabled for organizations in the enterprise. */
  Enabled = 'ENABLED',
  /** There is no policy set for organizations in the enterprise. */
  NoPolicy = 'NO_POLICY'
}

/** The possible values for an enabled/no policy enterprise setting. */
export enum Gh_EnterpriseEnabledSettingValue {
  /** The setting is enabled for organizations in the enterprise. */
  Enabled = 'ENABLED',
  /** There is no policy set for organizations in the enterprise. */
  NoPolicy = 'NO_POLICY'
}

/** An identity provider configured to provision identities for an enterprise. */
export type Gh_EnterpriseIdentityProvider = Gh_Node & {
  __typename?: 'gh_EnterpriseIdentityProvider';
  /** The digest algorithm used to sign SAML requests for the identity provider. */
  digestMethod?: Maybe<Gh_SamlDigestAlgorithm>;
  /** The enterprise this identity provider belongs to. */
  enterprise?: Maybe<Gh_Enterprise>;
  /** ExternalIdentities provisioned by this identity provider. */
  externalIdentities: Gh_ExternalIdentityConnection;
  id: Scalars['ID'];
  /** The x509 certificate used by the identity provider to sign assertions and responses. */
  idpCertificate?: Maybe<Scalars['gh_X509Certificate']>;
  /** The Issuer Entity ID for the SAML identity provider. */
  issuer?: Maybe<Scalars['String']>;
  /** Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable. */
  recoveryCodes?: Maybe<Array<Scalars['String']>>;
  /** The signature algorithm used to sign SAML requests for the identity provider. */
  signatureMethod?: Maybe<Gh_SamlSignatureAlgorithm>;
  /** The URL endpoint for the identity provider's SAML SSO. */
  ssoUrl?: Maybe<Scalars['gh_URI']>;
};


/** An identity provider configured to provision identities for an enterprise. */
export type Gh_EnterpriseIdentityProviderExternalIdentitiesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  login?: InputMaybe<Scalars['String']>;
  membersOnly?: InputMaybe<Scalars['Boolean']>;
  userName?: InputMaybe<Scalars['String']>;
};

/** An object that is a member of an enterprise. */
export type Gh_EnterpriseMember = Gh_EnterpriseUserAccount | Gh_User;

/** The connection type for EnterpriseMember. */
export type Gh_EnterpriseMemberConnection = {
  __typename?: 'gh_EnterpriseMemberConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_EnterpriseMemberEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_EnterpriseMember>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** A User who is a member of an enterprise through one or more organizations. */
export type Gh_EnterpriseMemberEdge = {
  __typename?: 'gh_EnterpriseMemberEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_EnterpriseMember>;
};

/** Ordering options for enterprise member connections. */
export type Gh_EnterpriseMemberOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order enterprise members by. */
  field: Gh_EnterpriseMemberOrderField;
};

/** Properties by which enterprise member connections can be ordered. */
export enum Gh_EnterpriseMemberOrderField {
  /** Order enterprise members by creation time */
  CreatedAt = 'CREATED_AT',
  /** Order enterprise members by login */
  Login = 'LOGIN'
}

/** The possible values for the enterprise members can create repositories setting. */
export enum Gh_EnterpriseMembersCanCreateRepositoriesSettingValue {
  /** Members will be able to create public and private repositories. */
  All = 'ALL',
  /** Members will not be able to create public or private repositories. */
  Disabled = 'DISABLED',
  /** Organization administrators choose whether to allow members to create repositories. */
  NoPolicy = 'NO_POLICY',
  /** Members will be able to create only private repositories. */
  Private = 'PRIVATE',
  /** Members will be able to create only public repositories. */
  Public = 'PUBLIC'
}

/** The possible values for the members can make purchases setting. */
export enum Gh_EnterpriseMembersCanMakePurchasesSettingValue {
  /** The setting is disabled for organizations in the enterprise. */
  Disabled = 'DISABLED',
  /** The setting is enabled for organizations in the enterprise. */
  Enabled = 'ENABLED'
}

/** The connection type for Organization. */
export type Gh_EnterpriseOrganizationMembershipConnection = {
  __typename?: 'gh_EnterpriseOrganizationMembershipConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_EnterpriseOrganizationMembershipEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Organization>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An enterprise organization that a user is a member of. */
export type Gh_EnterpriseOrganizationMembershipEdge = {
  __typename?: 'gh_EnterpriseOrganizationMembershipEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_Organization>;
  /** The role of the user in the enterprise membership. */
  role: Gh_EnterpriseUserAccountMembershipRole;
};

/** The connection type for User. */
export type Gh_EnterpriseOutsideCollaboratorConnection = {
  __typename?: 'gh_EnterpriseOutsideCollaboratorConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_EnterpriseOutsideCollaboratorEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_User>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** A User who is an outside collaborator of an enterprise through one or more organizations. */
export type Gh_EnterpriseOutsideCollaboratorEdge = {
  __typename?: 'gh_EnterpriseOutsideCollaboratorEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_User>;
  /** The enterprise organization repositories this user is a member of. */
  repositories: Gh_EnterpriseRepositoryInfoConnection;
};


/** A User who is an outside collaborator of an enterprise through one or more organizations. */
export type Gh_EnterpriseOutsideCollaboratorEdgeRepositoriesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_RepositoryOrder>;
};

/** Enterprise information only visible to enterprise owners. */
export type Gh_EnterpriseOwnerInfo = {
  __typename?: 'gh_EnterpriseOwnerInfo';
  /** A list of all of the administrators for this enterprise. */
  admins: Gh_EnterpriseAdministratorConnection;
  /** A list of users in the enterprise who currently have two-factor authentication disabled. */
  affiliatedUsersWithTwoFactorDisabled: Gh_UserConnection;
  /** Whether or not affiliated users with two-factor authentication disabled exist in the enterprise. */
  affiliatedUsersWithTwoFactorDisabledExist: Scalars['Boolean'];
  /** The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise. */
  allowPrivateRepositoryForkingSetting: Gh_EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided private repository forking setting value. */
  allowPrivateRepositoryForkingSettingOrganizations: Gh_OrganizationConnection;
  /** The setting value for base repository permissions for organizations in this enterprise. */
  defaultRepositoryPermissionSetting: Gh_EnterpriseDefaultRepositoryPermissionSettingValue;
  /** A list of enterprise organizations configured with the provided base repository permission. */
  defaultRepositoryPermissionSettingOrganizations: Gh_OrganizationConnection;
  /** A list of domains owned by the enterprise. */
  domains: Gh_VerifiableDomainConnection;
  /** Enterprise Server installations owned by the enterprise. */
  enterpriseServerInstallations: Gh_EnterpriseServerInstallationConnection;
  /** The setting value for whether the enterprise has an IP allow list enabled. */
  ipAllowListEnabledSetting: Gh_IpAllowListEnabledSettingValue;
  /** The IP addresses that are allowed to access resources owned by the enterprise. */
  ipAllowListEntries: Gh_IpAllowListEntryConnection;
  /** The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled. */
  ipAllowListForInstalledAppsEnabledSetting: Gh_IpAllowListForInstalledAppsEnabledSettingValue;
  /** Whether or not the base repository permission is currently being updated. */
  isUpdatingDefaultRepositoryPermission: Scalars['Boolean'];
  /** Whether the two-factor authentication requirement is currently being enforced. */
  isUpdatingTwoFactorRequirement: Scalars['Boolean'];
  /** The setting value for whether organization members with admin permissions on a repository can change repository visibility. */
  membersCanChangeRepositoryVisibilitySetting: Gh_EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided can change repository visibility setting value. */
  membersCanChangeRepositoryVisibilitySettingOrganizations: Gh_OrganizationConnection;
  /** The setting value for whether members of organizations in the enterprise can create internal repositories. */
  membersCanCreateInternalRepositoriesSetting?: Maybe<Scalars['Boolean']>;
  /** The setting value for whether members of organizations in the enterprise can create private repositories. */
  membersCanCreatePrivateRepositoriesSetting?: Maybe<Scalars['Boolean']>;
  /** The setting value for whether members of organizations in the enterprise can create public repositories. */
  membersCanCreatePublicRepositoriesSetting?: Maybe<Scalars['Boolean']>;
  /** The setting value for whether members of organizations in the enterprise can create repositories. */
  membersCanCreateRepositoriesSetting?: Maybe<Gh_EnterpriseMembersCanCreateRepositoriesSettingValue>;
  /** A list of enterprise organizations configured with the provided repository creation setting value. */
  membersCanCreateRepositoriesSettingOrganizations: Gh_OrganizationConnection;
  /** The setting value for whether members with admin permissions for repositories can delete issues. */
  membersCanDeleteIssuesSetting: Gh_EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided members can delete issues setting value. */
  membersCanDeleteIssuesSettingOrganizations: Gh_OrganizationConnection;
  /** The setting value for whether members with admin permissions for repositories can delete or transfer repositories. */
  membersCanDeleteRepositoriesSetting: Gh_EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided members can delete repositories setting value. */
  membersCanDeleteRepositoriesSettingOrganizations: Gh_OrganizationConnection;
  /** The setting value for whether members of organizations in the enterprise can invite outside collaborators. */
  membersCanInviteCollaboratorsSetting: Gh_EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided members can invite collaborators setting value. */
  membersCanInviteCollaboratorsSettingOrganizations: Gh_OrganizationConnection;
  /** Indicates whether members of this enterprise's organizations can purchase additional services for those organizations. */
  membersCanMakePurchasesSetting: Gh_EnterpriseMembersCanMakePurchasesSettingValue;
  /** The setting value for whether members with admin permissions for repositories can update protected branches. */
  membersCanUpdateProtectedBranchesSetting: Gh_EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided members can update protected branches setting value. */
  membersCanUpdateProtectedBranchesSettingOrganizations: Gh_OrganizationConnection;
  /** The setting value for whether members can view dependency insights. */
  membersCanViewDependencyInsightsSetting: Gh_EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided members can view dependency insights setting value. */
  membersCanViewDependencyInsightsSettingOrganizations: Gh_OrganizationConnection;
  /** Indicates if email notification delivery for this enterprise is restricted to verified or approved domains. */
  notificationDeliveryRestrictionEnabledSetting: Gh_NotificationRestrictionSettingValue;
  /** The OIDC Identity Provider for the enterprise. */
  oidcProvider?: Maybe<Gh_OidcProvider>;
  /** The setting value for whether organization projects are enabled for organizations in this enterprise. */
  organizationProjectsSetting: Gh_EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided organization projects setting value. */
  organizationProjectsSettingOrganizations: Gh_OrganizationConnection;
  /** A list of outside collaborators across the repositories in the enterprise. */
  outsideCollaborators: Gh_EnterpriseOutsideCollaboratorConnection;
  /** A list of pending administrator invitations for the enterprise. */
  pendingAdminInvitations: Gh_EnterpriseAdministratorInvitationConnection;
  /** A list of pending collaborator invitations across the repositories in the enterprise. */
  pendingCollaboratorInvitations: Gh_RepositoryInvitationConnection;
  /** A list of pending member invitations for organizations in the enterprise. */
  pendingMemberInvitations: Gh_EnterprisePendingMemberInvitationConnection;
  /** The setting value for whether repository projects are enabled in this enterprise. */
  repositoryProjectsSetting: Gh_EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided repository projects setting value. */
  repositoryProjectsSettingOrganizations: Gh_OrganizationConnection;
  /** The SAML Identity Provider for the enterprise. When used by a GitHub App, requires an installation token with read and write access to members. */
  samlIdentityProvider?: Maybe<Gh_EnterpriseIdentityProvider>;
  /** A list of enterprise organizations configured with the SAML single sign-on setting value. */
  samlIdentityProviderSettingOrganizations: Gh_OrganizationConnection;
  /** A list of members with a support entitlement. */
  supportEntitlements: Gh_EnterpriseMemberConnection;
  /** The setting value for whether team discussions are enabled for organizations in this enterprise. */
  teamDiscussionsSetting: Gh_EnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided team discussions setting value. */
  teamDiscussionsSettingOrganizations: Gh_OrganizationConnection;
  /** The setting value for whether the enterprise requires two-factor authentication for its organizations and users. */
  twoFactorRequiredSetting: Gh_EnterpriseEnabledSettingValue;
  /** A list of enterprise organizations configured with the two-factor authentication setting value. */
  twoFactorRequiredSettingOrganizations: Gh_OrganizationConnection;
};


/** Enterprise information only visible to enterprise owners. */
export type Gh_EnterpriseOwnerInfoAdminsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_EnterpriseMemberOrder>;
  organizationLogins?: InputMaybe<Array<Scalars['String']>>;
  query?: InputMaybe<Scalars['String']>;
  role?: InputMaybe<Gh_EnterpriseAdministratorRole>;
};


/** Enterprise information only visible to enterprise owners. */
export type Gh_EnterpriseOwnerInfoAffiliatedUsersWithTwoFactorDisabledArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** Enterprise information only visible to enterprise owners. */
export type Gh_EnterpriseOwnerInfoAllowPrivateRepositoryForkingSettingOrganizationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_OrganizationOrder>;
  value: Scalars['Boolean'];
};


/** Enterprise information only visible to enterprise owners. */
export type Gh_EnterpriseOwnerInfoDefaultRepositoryPermissionSettingOrganizationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_OrganizationOrder>;
  value: Gh_DefaultRepositoryPermissionField;
};


/** Enterprise information only visible to enterprise owners. */
export type Gh_EnterpriseOwnerInfoDomainsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  isApproved?: InputMaybe<Scalars['Boolean']>;
  isVerified?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_VerifiableDomainOrder>;
};


/** Enterprise information only visible to enterprise owners. */
export type Gh_EnterpriseOwnerInfoEnterpriseServerInstallationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  connectedOnly?: InputMaybe<Scalars['Boolean']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_EnterpriseServerInstallationOrder>;
};


/** Enterprise information only visible to enterprise owners. */
export type Gh_EnterpriseOwnerInfoIpAllowListEntriesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_IpAllowListEntryOrder>;
};


/** Enterprise information only visible to enterprise owners. */
export type Gh_EnterpriseOwnerInfoMembersCanChangeRepositoryVisibilitySettingOrganizationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_OrganizationOrder>;
  value: Scalars['Boolean'];
};


/** Enterprise information only visible to enterprise owners. */
export type Gh_EnterpriseOwnerInfoMembersCanCreateRepositoriesSettingOrganizationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_OrganizationOrder>;
  value: Gh_OrganizationMembersCanCreateRepositoriesSettingValue;
};


/** Enterprise information only visible to enterprise owners. */
export type Gh_EnterpriseOwnerInfoMembersCanDeleteIssuesSettingOrganizationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_OrganizationOrder>;
  value: Scalars['Boolean'];
};


/** Enterprise information only visible to enterprise owners. */
export type Gh_EnterpriseOwnerInfoMembersCanDeleteRepositoriesSettingOrganizationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_OrganizationOrder>;
  value: Scalars['Boolean'];
};


/** Enterprise information only visible to enterprise owners. */
export type Gh_EnterpriseOwnerInfoMembersCanInviteCollaboratorsSettingOrganizationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_OrganizationOrder>;
  value: Scalars['Boolean'];
};


/** Enterprise information only visible to enterprise owners. */
export type Gh_EnterpriseOwnerInfoMembersCanUpdateProtectedBranchesSettingOrganizationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_OrganizationOrder>;
  value: Scalars['Boolean'];
};


/** Enterprise information only visible to enterprise owners. */
export type Gh_EnterpriseOwnerInfoMembersCanViewDependencyInsightsSettingOrganizationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_OrganizationOrder>;
  value: Scalars['Boolean'];
};


/** Enterprise information only visible to enterprise owners. */
export type Gh_EnterpriseOwnerInfoOrganizationProjectsSettingOrganizationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_OrganizationOrder>;
  value: Scalars['Boolean'];
};


/** Enterprise information only visible to enterprise owners. */
export type Gh_EnterpriseOwnerInfoOutsideCollaboratorsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  hasTwoFactorEnabled?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  login?: InputMaybe<Scalars['String']>;
  orderBy?: InputMaybe<Gh_EnterpriseMemberOrder>;
  organizationLogins?: InputMaybe<Array<Scalars['String']>>;
  query?: InputMaybe<Scalars['String']>;
  visibility?: InputMaybe<Gh_RepositoryVisibility>;
};


/** Enterprise information only visible to enterprise owners. */
export type Gh_EnterpriseOwnerInfoPendingAdminInvitationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_EnterpriseAdministratorInvitationOrder>;
  query?: InputMaybe<Scalars['String']>;
  role?: InputMaybe<Gh_EnterpriseAdministratorRole>;
};


/** Enterprise information only visible to enterprise owners. */
export type Gh_EnterpriseOwnerInfoPendingCollaboratorInvitationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_RepositoryInvitationOrder>;
  query?: InputMaybe<Scalars['String']>;
};


/** Enterprise information only visible to enterprise owners. */
export type Gh_EnterpriseOwnerInfoPendingMemberInvitationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  organizationLogins?: InputMaybe<Array<Scalars['String']>>;
  query?: InputMaybe<Scalars['String']>;
};


/** Enterprise information only visible to enterprise owners. */
export type Gh_EnterpriseOwnerInfoRepositoryProjectsSettingOrganizationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_OrganizationOrder>;
  value: Scalars['Boolean'];
};


/** Enterprise information only visible to enterprise owners. */
export type Gh_EnterpriseOwnerInfoSamlIdentityProviderSettingOrganizationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_OrganizationOrder>;
  value: Gh_IdentityProviderConfigurationState;
};


/** Enterprise information only visible to enterprise owners. */
export type Gh_EnterpriseOwnerInfoSupportEntitlementsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_EnterpriseMemberOrder>;
};


/** Enterprise information only visible to enterprise owners. */
export type Gh_EnterpriseOwnerInfoTeamDiscussionsSettingOrganizationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_OrganizationOrder>;
  value: Scalars['Boolean'];
};


/** Enterprise information only visible to enterprise owners. */
export type Gh_EnterpriseOwnerInfoTwoFactorRequiredSettingOrganizationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_OrganizationOrder>;
  value: Scalars['Boolean'];
};

/** The connection type for OrganizationInvitation. */
export type Gh_EnterprisePendingMemberInvitationConnection = {
  __typename?: 'gh_EnterprisePendingMemberInvitationConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_EnterprisePendingMemberInvitationEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_OrganizationInvitation>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  /** Identifies the total count of unique users in the connection. */
  totalUniqueUserCount: Scalars['Int'];
};

/** An invitation to be a member in an enterprise organization. */
export type Gh_EnterprisePendingMemberInvitationEdge = {
  __typename?: 'gh_EnterprisePendingMemberInvitationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_OrganizationInvitation>;
};

/** A subset of repository information queryable from an enterprise. */
export type Gh_EnterpriseRepositoryInfo = Gh_Node & {
  __typename?: 'gh_EnterpriseRepositoryInfo';
  id: Scalars['ID'];
  /** Identifies if the repository is private or internal. */
  isPrivate: Scalars['Boolean'];
  /** The repository's name. */
  name: Scalars['String'];
  /** The repository's name with owner. */
  nameWithOwner: Scalars['String'];
};

/** The connection type for EnterpriseRepositoryInfo. */
export type Gh_EnterpriseRepositoryInfoConnection = {
  __typename?: 'gh_EnterpriseRepositoryInfoConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_EnterpriseRepositoryInfoEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_EnterpriseRepositoryInfo>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_EnterpriseRepositoryInfoEdge = {
  __typename?: 'gh_EnterpriseRepositoryInfoEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_EnterpriseRepositoryInfo>;
};

/** An Enterprise Server installation. */
export type Gh_EnterpriseServerInstallation = Gh_Node & {
  __typename?: 'gh_EnterpriseServerInstallation';
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The customer name to which the Enterprise Server installation belongs. */
  customerName: Scalars['String'];
  /** The host name of the Enterprise Server installation. */
  hostName: Scalars['String'];
  id: Scalars['ID'];
  /** Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect. */
  isConnected: Scalars['Boolean'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** User accounts on this Enterprise Server installation. */
  userAccounts: Gh_EnterpriseServerUserAccountConnection;
  /** User accounts uploads for the Enterprise Server installation. */
  userAccountsUploads: Gh_EnterpriseServerUserAccountsUploadConnection;
};


/** An Enterprise Server installation. */
export type Gh_EnterpriseServerInstallationUserAccountsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_EnterpriseServerUserAccountOrder>;
};


/** An Enterprise Server installation. */
export type Gh_EnterpriseServerInstallationUserAccountsUploadsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_EnterpriseServerUserAccountsUploadOrder>;
};

/** The connection type for EnterpriseServerInstallation. */
export type Gh_EnterpriseServerInstallationConnection = {
  __typename?: 'gh_EnterpriseServerInstallationConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_EnterpriseServerInstallationEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_EnterpriseServerInstallation>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_EnterpriseServerInstallationEdge = {
  __typename?: 'gh_EnterpriseServerInstallationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_EnterpriseServerInstallation>;
};

/** Ordering options for Enterprise Server installation connections. */
export type Gh_EnterpriseServerInstallationOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order Enterprise Server installations by. */
  field: Gh_EnterpriseServerInstallationOrderField;
};

/** Properties by which Enterprise Server installation connections can be ordered. */
export enum Gh_EnterpriseServerInstallationOrderField {
  /** Order Enterprise Server installations by creation time */
  CreatedAt = 'CREATED_AT',
  /** Order Enterprise Server installations by customer name */
  CustomerName = 'CUSTOMER_NAME',
  /** Order Enterprise Server installations by host name */
  HostName = 'HOST_NAME'
}

/** A user account on an Enterprise Server installation. */
export type Gh_EnterpriseServerUserAccount = Gh_Node & {
  __typename?: 'gh_EnterpriseServerUserAccount';
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** User emails belonging to this user account. */
  emails: Gh_EnterpriseServerUserAccountEmailConnection;
  /** The Enterprise Server installation on which this user account exists. */
  enterpriseServerInstallation: Gh_EnterpriseServerInstallation;
  id: Scalars['ID'];
  /** Whether the user account is a site administrator on the Enterprise Server installation. */
  isSiteAdmin: Scalars['Boolean'];
  /** The login of the user account on the Enterprise Server installation. */
  login: Scalars['String'];
  /** The profile name of the user account on the Enterprise Server installation. */
  profileName?: Maybe<Scalars['String']>;
  /** The date and time when the user account was created on the Enterprise Server installation. */
  remoteCreatedAt: Scalars['gh_DateTime'];
  /** The ID of the user account on the Enterprise Server installation. */
  remoteUserId: Scalars['Int'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
};


/** A user account on an Enterprise Server installation. */
export type Gh_EnterpriseServerUserAccountEmailsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_EnterpriseServerUserAccountEmailOrder>;
};

/** The connection type for EnterpriseServerUserAccount. */
export type Gh_EnterpriseServerUserAccountConnection = {
  __typename?: 'gh_EnterpriseServerUserAccountConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_EnterpriseServerUserAccountEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_EnterpriseServerUserAccount>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_EnterpriseServerUserAccountEdge = {
  __typename?: 'gh_EnterpriseServerUserAccountEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_EnterpriseServerUserAccount>;
};

/** An email belonging to a user account on an Enterprise Server installation. */
export type Gh_EnterpriseServerUserAccountEmail = Gh_Node & {
  __typename?: 'gh_EnterpriseServerUserAccountEmail';
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The email address. */
  email: Scalars['String'];
  id: Scalars['ID'];
  /** Indicates whether this is the primary email of the associated user account. */
  isPrimary: Scalars['Boolean'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The user account to which the email belongs. */
  userAccount: Gh_EnterpriseServerUserAccount;
};

/** The connection type for EnterpriseServerUserAccountEmail. */
export type Gh_EnterpriseServerUserAccountEmailConnection = {
  __typename?: 'gh_EnterpriseServerUserAccountEmailConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_EnterpriseServerUserAccountEmailEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_EnterpriseServerUserAccountEmail>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_EnterpriseServerUserAccountEmailEdge = {
  __typename?: 'gh_EnterpriseServerUserAccountEmailEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_EnterpriseServerUserAccountEmail>;
};

/** Ordering options for Enterprise Server user account email connections. */
export type Gh_EnterpriseServerUserAccountEmailOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order emails by. */
  field: Gh_EnterpriseServerUserAccountEmailOrderField;
};

/** Properties by which Enterprise Server user account email connections can be ordered. */
export enum Gh_EnterpriseServerUserAccountEmailOrderField {
  /** Order emails by email */
  Email = 'EMAIL'
}

/** Ordering options for Enterprise Server user account connections. */
export type Gh_EnterpriseServerUserAccountOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order user accounts by. */
  field: Gh_EnterpriseServerUserAccountOrderField;
};

/** Properties by which Enterprise Server user account connections can be ordered. */
export enum Gh_EnterpriseServerUserAccountOrderField {
  /** Order user accounts by login */
  Login = 'LOGIN',
  /** Order user accounts by creation time on the Enterprise Server installation */
  RemoteCreatedAt = 'REMOTE_CREATED_AT'
}

/** A user accounts upload from an Enterprise Server installation. */
export type Gh_EnterpriseServerUserAccountsUpload = Gh_Node & {
  __typename?: 'gh_EnterpriseServerUserAccountsUpload';
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The enterprise to which this upload belongs. */
  enterprise: Gh_Enterprise;
  /** The Enterprise Server installation for which this upload was generated. */
  enterpriseServerInstallation: Gh_EnterpriseServerInstallation;
  id: Scalars['ID'];
  /** The name of the file uploaded. */
  name: Scalars['String'];
  /** The synchronization state of the upload */
  syncState: Gh_EnterpriseServerUserAccountsUploadSyncState;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
};

/** The connection type for EnterpriseServerUserAccountsUpload. */
export type Gh_EnterpriseServerUserAccountsUploadConnection = {
  __typename?: 'gh_EnterpriseServerUserAccountsUploadConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_EnterpriseServerUserAccountsUploadEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_EnterpriseServerUserAccountsUpload>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_EnterpriseServerUserAccountsUploadEdge = {
  __typename?: 'gh_EnterpriseServerUserAccountsUploadEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_EnterpriseServerUserAccountsUpload>;
};

/** Ordering options for Enterprise Server user accounts upload connections. */
export type Gh_EnterpriseServerUserAccountsUploadOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order user accounts uploads by. */
  field: Gh_EnterpriseServerUserAccountsUploadOrderField;
};

/** Properties by which Enterprise Server user accounts upload connections can be ordered. */
export enum Gh_EnterpriseServerUserAccountsUploadOrderField {
  /** Order user accounts uploads by creation time */
  CreatedAt = 'CREATED_AT'
}

/** Synchronization state of the Enterprise Server user accounts upload */
export enum Gh_EnterpriseServerUserAccountsUploadSyncState {
  /** The synchronization of the upload failed. */
  Failure = 'FAILURE',
  /** The synchronization of the upload is pending. */
  Pending = 'PENDING',
  /** The synchronization of the upload succeeded. */
  Success = 'SUCCESS'
}

/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */
export type Gh_EnterpriseUserAccount = Gh_Actor & Gh_Node & {
  __typename?: 'gh_EnterpriseUserAccount';
  /** A URL pointing to the enterprise user account's public avatar. */
  avatarUrl: Scalars['gh_URI'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The enterprise in which this user account exists. */
  enterprise: Gh_Enterprise;
  id: Scalars['ID'];
  /** An identifier for the enterprise user account, a login or email address */
  login: Scalars['String'];
  /** The name of the enterprise user account */
  name?: Maybe<Scalars['String']>;
  /** A list of enterprise organizations this user is a member of. */
  organizations: Gh_EnterpriseOrganizationMembershipConnection;
  /** The HTTP path for this user. */
  resourcePath: Scalars['gh_URI'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The HTTP URL for this user. */
  url: Scalars['gh_URI'];
  /** The user within the enterprise. */
  user?: Maybe<Gh_User>;
};


/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */
export type Gh_EnterpriseUserAccountAvatarUrlArgs = {
  size?: InputMaybe<Scalars['Int']>;
};


/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */
export type Gh_EnterpriseUserAccountOrganizationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_OrganizationOrder>;
  query?: InputMaybe<Scalars['String']>;
  role?: InputMaybe<Gh_EnterpriseUserAccountMembershipRole>;
};

/** The connection type for EnterpriseUserAccount. */
export type Gh_EnterpriseUserAccountConnection = {
  __typename?: 'gh_EnterpriseUserAccountConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_EnterpriseUserAccountEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_EnterpriseUserAccount>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_EnterpriseUserAccountEdge = {
  __typename?: 'gh_EnterpriseUserAccountEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_EnterpriseUserAccount>;
};

/** The possible roles for enterprise membership. */
export enum Gh_EnterpriseUserAccountMembershipRole {
  /** The user is a member of the enterprise membership. */
  Member = 'MEMBER',
  /** The user is an owner of the enterprise membership. */
  Owner = 'OWNER'
}

/** The possible GitHub Enterprise deployments where this user can exist. */
export enum Gh_EnterpriseUserDeployment {
  /** The user is part of a GitHub Enterprise Cloud deployment. */
  Cloud = 'CLOUD',
  /** The user is part of a GitHub Enterprise Server deployment. */
  Server = 'SERVER'
}

/** An environment. */
export type Gh_Environment = Gh_Node & {
  __typename?: 'gh_Environment';
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  /** The name of the environment */
  name: Scalars['String'];
  /** The protection rules defined for this environment */
  protectionRules: Gh_DeploymentProtectionRuleConnection;
};


/** An environment. */
export type Gh_EnvironmentProtectionRulesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for Environment. */
export type Gh_EnvironmentConnection = {
  __typename?: 'gh_EnvironmentConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_EnvironmentEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Environment>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_EnvironmentEdge = {
  __typename?: 'gh_EnvironmentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_Environment>;
};

/** An external identity provisioned by SAML SSO or SCIM. */
export type Gh_ExternalIdentity = Gh_Node & {
  __typename?: 'gh_ExternalIdentity';
  /** The GUID for this identity */
  guid: Scalars['String'];
  id: Scalars['ID'];
  /** Organization invitation for this SCIM-provisioned external identity */
  organizationInvitation?: Maybe<Gh_OrganizationInvitation>;
  /** SAML Identity attributes */
  samlIdentity?: Maybe<Gh_ExternalIdentitySamlAttributes>;
  /** SCIM Identity attributes */
  scimIdentity?: Maybe<Gh_ExternalIdentityScimAttributes>;
  /** User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member. */
  user?: Maybe<Gh_User>;
};

/** The connection type for ExternalIdentity. */
export type Gh_ExternalIdentityConnection = {
  __typename?: 'gh_ExternalIdentityConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_ExternalIdentityEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_ExternalIdentity>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_ExternalIdentityEdge = {
  __typename?: 'gh_ExternalIdentityEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_ExternalIdentity>;
};

/** SAML attributes for the External Identity */
export type Gh_ExternalIdentitySamlAttributes = {
  __typename?: 'gh_ExternalIdentitySamlAttributes';
  /** The emails associated with the SAML identity */
  emails?: Maybe<Array<Gh_UserEmailMetadata>>;
  /** Family name of the SAML identity */
  familyName?: Maybe<Scalars['String']>;
  /** Given name of the SAML identity */
  givenName?: Maybe<Scalars['String']>;
  /** The groups linked to this identity in IDP */
  groups?: Maybe<Array<Scalars['String']>>;
  /** The NameID of the SAML identity */
  nameId?: Maybe<Scalars['String']>;
  /** The userName of the SAML identity */
  username?: Maybe<Scalars['String']>;
};

/** SCIM attributes for the External Identity */
export type Gh_ExternalIdentityScimAttributes = {
  __typename?: 'gh_ExternalIdentityScimAttributes';
  /** The emails associated with the SCIM identity */
  emails?: Maybe<Array<Gh_UserEmailMetadata>>;
  /** Family name of the SCIM identity */
  familyName?: Maybe<Scalars['String']>;
  /** Given name of the SCIM identity */
  givenName?: Maybe<Scalars['String']>;
  /** The groups linked to this identity in IDP */
  groups?: Maybe<Array<Scalars['String']>>;
  /** The userName of the SCIM identity */
  username?: Maybe<Scalars['String']>;
};

/** A command to add a file at the given path with the given contents as part of a commit.  Any existing file at that that path will be replaced. */
export type Gh_FileAddition = {
  /** The base64 encoded contents of the file */
  contents: Scalars['gh_Base64String'];
  /** The path in the repository where the file will be located */
  path: Scalars['String'];
};

/**
 * A description of a set of changes to a file tree to be made as part of
 * a git commit, modeled as zero or more file `additions` and zero or more
 * file `deletions`.
 *
 * Both fields are optional; omitting both will produce a commit with no
 * file changes.
 *
 * `deletions` and `additions` describe changes to files identified
 * by their path in the git tree using unix-style path separators, i.e.
 * `/`.  The root of a git tree is an empty string, so paths are not
 * slash-prefixed.
 *
 * `path` values must be unique across all `additions` and `deletions`
 * provided.  Any duplication will result in a validation error.
 *
 * ### Encoding
 *
 * File contents must be provided in full for each `FileAddition`.
 *
 * The `contents` of a `FileAddition` must be encoded using RFC 4648
 * compliant base64, i.e. correct padding is required and no characters
 * outside the standard alphabet may be used.  Invalid base64
 * encoding will be rejected with a validation error.
 *
 * The encoded contents may be binary.
 *
 * For text files, no assumptions are made about the character encoding of
 * the file contents (after base64 decoding).  No charset transcoding or
 * line-ending normalization will be performed; it is the client's
 * responsibility to manage the character encoding of files they provide.
 * However, for maximum compatibility we recommend using UTF-8 encoding
 * and ensuring that all files in a repository use a consistent
 * line-ending convention (`\n` or `\r\n`), and that all files end
 * with a newline.
 *
 * ### Modeling file changes
 *
 * Each of the the five types of conceptual changes that can be made in a
 * git commit can be described using the `FileChanges` type as follows:
 *
 * 1. New file addition: create file `hello world\n` at path `docs/README.txt`:
 *
 *        {
 *          "additions" [
 *            {
 *              "path": "docs/README.txt",
 *              "contents": base64encode("hello world\n")
 *            }
 *          ]
 *        }
 *
 * 2. Existing file modification: change existing `docs/README.txt` to have new
 *    content `new content here\n`:
 *
 *        {
 *          "additions" [
 *            {
 *              "path": "docs/README.txt",
 *              "contents": base64encode("new content here\n")
 *            }
 *          ]
 *        }
 *
 * 3. Existing file deletion: remove existing file `docs/README.txt`.
 *    Note that the path is required to exist -- specifying a
 *    path that does not exist on the given branch will abort the
 *    commit and return an error.
 *
 *        {
 *          "deletions" [
 *            {
 *              "path": "docs/README.txt"
 *            }
 *          ]
 *        }
 *
 *
 * 4. File rename with no changes: rename `docs/README.txt` with
 *    previous content `hello world\n` to the same content at
 *    `newdocs/README.txt`:
 *
 *        {
 *          "deletions" [
 *            {
 *              "path": "docs/README.txt",
 *            }
 *          ],
 *          "additions" [
 *            {
 *              "path": "newdocs/README.txt",
 *              "contents": base64encode("hello world\n")
 *            }
 *          ]
 *        }
 *
 *
 * 5. File rename with changes: rename `docs/README.txt` with
 *    previous content `hello world\n` to a file at path
 *    `newdocs/README.txt` with content `new contents\n`:
 *
 *        {
 *          "deletions" [
 *            {
 *              "path": "docs/README.txt",
 *            }
 *          ],
 *          "additions" [
 *            {
 *              "path": "newdocs/README.txt",
 *              "contents": base64encode("new contents\n")
 *            }
 *          ]
 *        }
 *
 */
export type Gh_FileChanges = {
  /** File to add or change. */
  additions?: InputMaybe<Array<Gh_FileAddition>>;
  /** Files to delete. */
  deletions?: InputMaybe<Array<Gh_FileDeletion>>;
};

/** A command to delete the file at the given path as part of a commit. */
export type Gh_FileDeletion = {
  /** The path to delete */
  path: Scalars['String'];
};

/** The possible viewed states of a file . */
export enum Gh_FileViewedState {
  /** The file has new changes since last viewed. */
  Dismissed = 'DISMISSED',
  /** The file has not been marked as viewed. */
  Unviewed = 'UNVIEWED',
  /** The file has been marked as viewed. */
  Viewed = 'VIEWED'
}

/** Autogenerated input type of FollowOrganization */
export type Gh_FollowOrganizationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** ID of the organization to follow. */
  organizationId: Scalars['ID'];
};

/** Autogenerated return type of FollowOrganization */
export type Gh_FollowOrganizationPayload = {
  __typename?: 'gh_FollowOrganizationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The organization that was followed. */
  organization?: Maybe<Gh_Organization>;
};

/** Autogenerated input type of FollowUser */
export type Gh_FollowUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** ID of the user to follow. */
  userId: Scalars['ID'];
};

/** Autogenerated return type of FollowUser */
export type Gh_FollowUserPayload = {
  __typename?: 'gh_FollowUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The user that was followed. */
  user?: Maybe<Gh_User>;
};

/** The connection type for User. */
export type Gh_FollowerConnection = {
  __typename?: 'gh_FollowerConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_UserEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_User>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** The connection type for User. */
export type Gh_FollowingConnection = {
  __typename?: 'gh_FollowingConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_UserEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_User>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** A funding platform link for a repository. */
export type Gh_FundingLink = {
  __typename?: 'gh_FundingLink';
  /** The funding platform this link is for. */
  platform: Gh_FundingPlatform;
  /** The configured URL for this funding link. */
  url: Scalars['gh_URI'];
};

/** The possible funding platforms for repository funding links. */
export enum Gh_FundingPlatform {
  /** Community Bridge funding platform. */
  CommunityBridge = 'COMMUNITY_BRIDGE',
  /** Custom funding platform. */
  Custom = 'CUSTOM',
  /** GitHub funding platform. */
  Github = 'GITHUB',
  /** IssueHunt funding platform. */
  Issuehunt = 'ISSUEHUNT',
  /** Ko-fi funding platform. */
  KoFi = 'KO_FI',
  /** LFX Crowdfunding funding platform. */
  LfxCrowdfunding = 'LFX_CROWDFUNDING',
  /** Liberapay funding platform. */
  Liberapay = 'LIBERAPAY',
  /** Open Collective funding platform. */
  OpenCollective = 'OPEN_COLLECTIVE',
  /** Otechie funding platform. */
  Otechie = 'OTECHIE',
  /** Patreon funding platform. */
  Patreon = 'PATREON',
  /** Tidelift funding platform. */
  Tidelift = 'TIDELIFT'
}

/** A generic hovercard context with a message and icon */
export type Gh_GenericHovercardContext = Gh_HovercardContext & {
  __typename?: 'gh_GenericHovercardContext';
  /** A string describing this context */
  message: Scalars['String'];
  /** An octicon to accompany this context */
  octicon: Scalars['String'];
};

/** A Gist. */
export type Gh_Gist = Gh_Node & Gh_Starrable & Gh_UniformResourceLocatable & {
  __typename?: 'gh_Gist';
  /** A list of comments associated with the gist */
  comments: Gh_GistCommentConnection;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The gist description. */
  description?: Maybe<Scalars['String']>;
  /** The files in this gist. */
  files?: Maybe<Array<Maybe<Gh_GistFile>>>;
  /** A list of forks associated with the gist */
  forks: Gh_GistConnection;
  id: Scalars['ID'];
  /** Identifies if the gist is a fork. */
  isFork: Scalars['Boolean'];
  /** Whether the gist is public or not. */
  isPublic: Scalars['Boolean'];
  /** The gist name. */
  name: Scalars['String'];
  /** The gist owner. */
  owner?: Maybe<Gh_RepositoryOwner>;
  /** Identifies when the gist was last pushed to. */
  pushedAt?: Maybe<Scalars['gh_DateTime']>;
  /** The HTML path to this resource. */
  resourcePath: Scalars['gh_URI'];
  /**
   * Returns a count of how many stargazers there are on this object
   *
   */
  stargazerCount: Scalars['Int'];
  /** A list of users who have starred this starrable. */
  stargazers: Gh_StargazerConnection;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The HTTP URL for this Gist. */
  url: Scalars['gh_URI'];
  /** Returns a boolean indicating whether the viewing user has starred this starrable. */
  viewerHasStarred: Scalars['Boolean'];
};


/** A Gist. */
export type Gh_GistCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A Gist. */
export type Gh_GistFilesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  oid?: InputMaybe<Scalars['gh_GitObjectID']>;
};


/** A Gist. */
export type Gh_GistForksArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_GistOrder>;
};


/** A Gist. */
export type Gh_GistStargazersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_StarOrder>;
};

/** Represents a comment on an Gist. */
export type Gh_GistComment = Gh_Comment & Gh_Deletable & Gh_Minimizable & Gh_Node & Gh_Updatable & Gh_UpdatableComment & {
  __typename?: 'gh_GistComment';
  /** The actor who authored the comment. */
  author?: Maybe<Gh_Actor>;
  /** Author's association with the gist. */
  authorAssociation: Gh_CommentAuthorAssociation;
  /** Identifies the comment body. */
  body: Scalars['String'];
  /** The body rendered to HTML. */
  bodyHTML: Scalars['gh_HTML'];
  /** The body rendered to text. */
  bodyText: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Check if this comment was created via an email reply. */
  createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The actor who edited the comment. */
  editor?: Maybe<Gh_Actor>;
  /** The associated gist. */
  gist: Gh_Gist;
  id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: Scalars['Boolean'];
  /** Returns whether or not a comment has been minimized. */
  isMinimized: Scalars['Boolean'];
  /** The moment the editor made the last edit */
  lastEditedAt?: Maybe<Scalars['gh_DateTime']>;
  /** Returns why the comment was minimized. */
  minimizedReason?: Maybe<Scalars['String']>;
  /** Identifies when the comment was published at. */
  publishedAt?: Maybe<Scalars['gh_DateTime']>;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** A list of edits to this content. */
  userContentEdits?: Maybe<Gh_UserContentEditConnection>;
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: Scalars['Boolean'];
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: Array<Gh_CommentCannotUpdateReason>;
  /** Did the viewer author this comment. */
  viewerDidAuthor: Scalars['Boolean'];
};


/** Represents a comment on an Gist. */
export type Gh_GistCommentUserContentEditsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for GistComment. */
export type Gh_GistCommentConnection = {
  __typename?: 'gh_GistCommentConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_GistCommentEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_GistComment>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_GistCommentEdge = {
  __typename?: 'gh_GistCommentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_GistComment>;
};

/** The connection type for Gist. */
export type Gh_GistConnection = {
  __typename?: 'gh_GistConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_GistEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Gist>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_GistEdge = {
  __typename?: 'gh_GistEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_Gist>;
};

/** A file in a gist. */
export type Gh_GistFile = {
  __typename?: 'gh_GistFile';
  /** The file name encoded to remove characters that are invalid in URL paths. */
  encodedName?: Maybe<Scalars['String']>;
  /** The gist file encoding. */
  encoding?: Maybe<Scalars['String']>;
  /** The file extension from the file name. */
  extension?: Maybe<Scalars['String']>;
  /** Indicates if this file is an image. */
  isImage: Scalars['Boolean'];
  /** Whether the file's contents were truncated. */
  isTruncated: Scalars['Boolean'];
  /** The programming language this file is written in. */
  language?: Maybe<Gh_Language>;
  /** The gist file name. */
  name?: Maybe<Scalars['String']>;
  /** The gist file size in bytes. */
  size?: Maybe<Scalars['Int']>;
  /** UTF8 text data or null if the file is binary */
  text?: Maybe<Scalars['String']>;
};


/** A file in a gist. */
export type Gh_GistFileTextArgs = {
  truncate?: InputMaybe<Scalars['Int']>;
};

/** Ordering options for gist connections */
export type Gh_GistOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order repositories by. */
  field: Gh_GistOrderField;
};

/** Properties by which gist connections can be ordered. */
export enum Gh_GistOrderField {
  /** Order gists by creation time */
  CreatedAt = 'CREATED_AT',
  /** Order gists by push time */
  PushedAt = 'PUSHED_AT',
  /** Order gists by update time */
  UpdatedAt = 'UPDATED_AT'
}

/** The privacy of a Gist */
export enum Gh_GistPrivacy {
  /** Gists that are public and secret */
  All = 'ALL',
  /** Public */
  Public = 'PUBLIC',
  /** Secret */
  Secret = 'SECRET'
}

/** Represents an actor in a Git commit (ie. an author or committer). */
export type Gh_GitActor = {
  __typename?: 'gh_GitActor';
  /** A URL pointing to the author's public avatar. */
  avatarUrl: Scalars['gh_URI'];
  /** The timestamp of the Git action (authoring or committing). */
  date?: Maybe<Scalars['gh_GitTimestamp']>;
  /** The email in the Git commit. */
  email?: Maybe<Scalars['String']>;
  /** The name in the Git commit. */
  name?: Maybe<Scalars['String']>;
  /** The GitHub user corresponding to the email field. Null if no such user exists. */
  user?: Maybe<Gh_User>;
};


/** Represents an actor in a Git commit (ie. an author or committer). */
export type Gh_GitActorAvatarUrlArgs = {
  size?: InputMaybe<Scalars['Int']>;
};

/** The connection type for GitActor. */
export type Gh_GitActorConnection = {
  __typename?: 'gh_GitActorConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_GitActorEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_GitActor>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_GitActorEdge = {
  __typename?: 'gh_GitActorEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_GitActor>;
};

/** Represents information about the GitHub instance. */
export type Gh_GitHubMetadata = {
  __typename?: 'gh_GitHubMetadata';
  /** Returns a String that's a SHA of `github-services` */
  gitHubServicesSha: Scalars['gh_GitObjectID'];
  /** IP addresses that users connect to for git operations */
  gitIpAddresses?: Maybe<Array<Scalars['String']>>;
  /** IP addresses that service hooks are sent from */
  hookIpAddresses?: Maybe<Array<Scalars['String']>>;
  /** IP addresses that the importer connects from */
  importerIpAddresses?: Maybe<Array<Scalars['String']>>;
  /** Whether or not users are verified */
  isPasswordAuthenticationVerifiable: Scalars['Boolean'];
  /** IP addresses for GitHub Pages' A records */
  pagesIpAddresses?: Maybe<Array<Scalars['String']>>;
};

/** Represents a Git object. */
export type Gh_GitObject = {
  /** An abbreviated version of the Git object ID */
  abbreviatedOid: Scalars['String'];
  /** The HTTP path for this Git object */
  commitResourcePath: Scalars['gh_URI'];
  /** The HTTP URL for this Git object */
  commitUrl: Scalars['gh_URI'];
  id: Scalars['ID'];
  /** The Git object ID */
  oid: Scalars['gh_GitObjectID'];
  /** The Repository the Git object belongs to */
  repository: Gh_Repository;
};

/** Information about a signature (GPG or S/MIME) on a Commit or Tag. */
export type Gh_GitSignature = {
  /** Email used to sign this object. */
  email: Scalars['String'];
  /** True if the signature is valid and verified by GitHub. */
  isValid: Scalars['Boolean'];
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload: Scalars['String'];
  /** ASCII-armored signature header from object. */
  signature: Scalars['String'];
  /** GitHub user corresponding to the email signing this commit. */
  signer?: Maybe<Gh_User>;
  /** The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid. */
  state: Gh_GitSignatureState;
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub: Scalars['Boolean'];
};

/** The state of a Git signature. */
export enum Gh_GitSignatureState {
  /** The signing certificate or its chain could not be verified */
  BadCert = 'BAD_CERT',
  /** Invalid email used for signing */
  BadEmail = 'BAD_EMAIL',
  /** Signing key expired */
  ExpiredKey = 'EXPIRED_KEY',
  /** Internal error - the GPG verification service misbehaved */
  GpgverifyError = 'GPGVERIFY_ERROR',
  /** Internal error - the GPG verification service is unavailable at the moment */
  GpgverifyUnavailable = 'GPGVERIFY_UNAVAILABLE',
  /** Invalid signature */
  Invalid = 'INVALID',
  /** Malformed signature */
  MalformedSig = 'MALFORMED_SIG',
  /** The usage flags for the key that signed this don't allow signing */
  NotSigningKey = 'NOT_SIGNING_KEY',
  /** Email used for signing not known to GitHub */
  NoUser = 'NO_USER',
  /** Valid signature, though certificate revocation check failed */
  OcspError = 'OCSP_ERROR',
  /** Valid signature, pending certificate revocation checking */
  OcspPending = 'OCSP_PENDING',
  /** One or more certificates in chain has been revoked */
  OcspRevoked = 'OCSP_REVOKED',
  /** Key used for signing not known to GitHub */
  UnknownKey = 'UNKNOWN_KEY',
  /** Unknown signature type */
  UnknownSigType = 'UNKNOWN_SIG_TYPE',
  /** Unsigned */
  Unsigned = 'UNSIGNED',
  /** Email used for signing unverified on GitHub */
  UnverifiedEmail = 'UNVERIFIED_EMAIL',
  /** Valid signature and verified by GitHub */
  Valid = 'VALID'
}

/** Represents a GPG signature on a Commit or Tag. */
export type Gh_GpgSignature = Gh_GitSignature & {
  __typename?: 'gh_GpgSignature';
  /** Email used to sign this object. */
  email: Scalars['String'];
  /** True if the signature is valid and verified by GitHub. */
  isValid: Scalars['Boolean'];
  /** Hex-encoded ID of the key that signed this object. */
  keyId?: Maybe<Scalars['String']>;
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload: Scalars['String'];
  /** ASCII-armored signature header from object. */
  signature: Scalars['String'];
  /** GitHub user corresponding to the email signing this commit. */
  signer?: Maybe<Gh_User>;
  /** The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid. */
  state: Gh_GitSignatureState;
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub: Scalars['Boolean'];
};

/** Autogenerated input type of GrantEnterpriseOrganizationsMigratorRole */
export type Gh_GrantEnterpriseOrganizationsMigratorRoleInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */
  enterpriseId: Scalars['ID'];
  /** The login of the user to grant the migrator role */
  login: Scalars['String'];
};

/** Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole */
export type Gh_GrantEnterpriseOrganizationsMigratorRolePayload = {
  __typename?: 'gh_GrantEnterpriseOrganizationsMigratorRolePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The organizations that had the migrator role applied to for the given user. */
  organizations?: Maybe<Gh_OrganizationConnection>;
};


/** Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole */
export type Gh_GrantEnterpriseOrganizationsMigratorRolePayloadOrganizationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** Autogenerated input type of GrantMigratorRole */
export type Gh_GrantMigratorRoleInput = {
  /** The user login or Team slug to grant the migrator role. */
  actor: Scalars['String'];
  /** Specifies the type of the actor, can be either USER or TEAM. */
  actorType: Gh_ActorType;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the organization that the user/team belongs to. */
  organizationId: Scalars['ID'];
};

/** Autogenerated return type of GrantMigratorRole */
export type Gh_GrantMigratorRolePayload = {
  __typename?: 'gh_GrantMigratorRolePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Did the operation succeed? */
  success?: Maybe<Scalars['Boolean']>;
};

/** Represents a 'head_ref_deleted' event on a given pull request. */
export type Gh_HeadRefDeletedEvent = Gh_Node & {
  __typename?: 'gh_HeadRefDeletedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the Ref associated with the `head_ref_deleted` event. */
  headRef?: Maybe<Gh_Ref>;
  /** Identifies the name of the Ref associated with the `head_ref_deleted` event. */
  headRefName: Scalars['String'];
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest: Gh_PullRequest;
};

/** Represents a 'head_ref_force_pushed' event on a given pull request. */
export type Gh_HeadRefForcePushedEvent = Gh_Node & {
  __typename?: 'gh_HeadRefForcePushedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the after commit SHA for the 'head_ref_force_pushed' event. */
  afterCommit?: Maybe<Gh_Commit>;
  /** Identifies the before commit SHA for the 'head_ref_force_pushed' event. */
  beforeCommit?: Maybe<Gh_Commit>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest: Gh_PullRequest;
  /** Identifies the fully qualified ref name for the 'head_ref_force_pushed' event. */
  ref?: Maybe<Gh_Ref>;
};

/** Represents a 'head_ref_restored' event on a given pull request. */
export type Gh_HeadRefRestoredEvent = Gh_Node & {
  __typename?: 'gh_HeadRefRestoredEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest: Gh_PullRequest;
};

/** Detail needed to display a hovercard for a user */
export type Gh_Hovercard = {
  __typename?: 'gh_Hovercard';
  /** Each of the contexts for this hovercard */
  contexts: Array<Gh_HovercardContext>;
};

/** An individual line of a hovercard */
export type Gh_HovercardContext = {
  /** A string describing this context */
  message: Scalars['String'];
  /** An octicon to accompany this context */
  octicon: Scalars['String'];
};

/** The possible states in which authentication can be configured with an identity provider. */
export enum Gh_IdentityProviderConfigurationState {
  /** Authentication with an identity provider is configured but not enforced. */
  Configured = 'CONFIGURED',
  /** Authentication with an identity provider is configured and enforced. */
  Enforced = 'ENFORCED',
  /** Authentication with an identity provider is not configured. */
  Unconfigured = 'UNCONFIGURED'
}

/** Autogenerated input type of InviteEnterpriseAdmin */
export type Gh_InviteEnterpriseAdminInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The email of the person to invite as an administrator. */
  email?: InputMaybe<Scalars['String']>;
  /** The ID of the enterprise to which you want to invite an administrator. */
  enterpriseId: Scalars['ID'];
  /** The login of a user to invite as an administrator. */
  invitee?: InputMaybe<Scalars['String']>;
  /** The role of the administrator. */
  role?: InputMaybe<Gh_EnterpriseAdministratorRole>;
};

/** Autogenerated return type of InviteEnterpriseAdmin */
export type Gh_InviteEnterpriseAdminPayload = {
  __typename?: 'gh_InviteEnterpriseAdminPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The created enterprise administrator invitation. */
  invitation?: Maybe<Gh_EnterpriseAdministratorInvitation>;
};

/** The possible values for the IP allow list enabled setting. */
export enum Gh_IpAllowListEnabledSettingValue {
  /** The setting is disabled for the owner. */
  Disabled = 'DISABLED',
  /** The setting is enabled for the owner. */
  Enabled = 'ENABLED'
}

/** An IP address or range of addresses that is allowed to access an owner's resources. */
export type Gh_IpAllowListEntry = Gh_Node & {
  __typename?: 'gh_IpAllowListEntry';
  /** A single IP address or range of IP addresses in CIDR notation. */
  allowListValue: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** Whether the entry is currently active. */
  isActive: Scalars['Boolean'];
  /** The name of the IP allow list entry. */
  name?: Maybe<Scalars['String']>;
  /** The owner of the IP allow list entry. */
  owner: Gh_IpAllowListOwner;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
};

/** The connection type for IpAllowListEntry. */
export type Gh_IpAllowListEntryConnection = {
  __typename?: 'gh_IpAllowListEntryConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_IpAllowListEntryEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_IpAllowListEntry>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_IpAllowListEntryEdge = {
  __typename?: 'gh_IpAllowListEntryEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_IpAllowListEntry>;
};

/** Ordering options for IP allow list entry connections. */
export type Gh_IpAllowListEntryOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order IP allow list entries by. */
  field: Gh_IpAllowListEntryOrderField;
};

/** Properties by which IP allow list entry connections can be ordered. */
export enum Gh_IpAllowListEntryOrderField {
  /** Order IP allow list entries by the allow list value. */
  AllowListValue = 'ALLOW_LIST_VALUE',
  /** Order IP allow list entries by creation time. */
  CreatedAt = 'CREATED_AT'
}

/** The possible values for the IP allow list configuration for installed GitHub Apps setting. */
export enum Gh_IpAllowListForInstalledAppsEnabledSettingValue {
  /** The setting is disabled for the owner. */
  Disabled = 'DISABLED',
  /** The setting is enabled for the owner. */
  Enabled = 'ENABLED'
}

/** Types that can own an IP allow list. */
export type Gh_IpAllowListOwner = Gh_App | Gh_Enterprise | Gh_Organization;

/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type Gh_Issue = Gh_Assignable & Gh_Closable & Gh_Comment & Gh_Labelable & Gh_Lockable & Gh_Node & Gh_ProjectNextOwner & Gh_ProjectV2Owner & Gh_Reactable & Gh_RepositoryNode & Gh_Subscribable & Gh_UniformResourceLocatable & Gh_Updatable & Gh_UpdatableComment & {
  __typename?: 'gh_Issue';
  /** Reason that the conversation was locked. */
  activeLockReason?: Maybe<Gh_LockReason>;
  /** A list of Users assigned to this object. */
  assignees: Gh_UserConnection;
  /** The actor who authored the comment. */
  author?: Maybe<Gh_Actor>;
  /** Author's association with the subject of the comment. */
  authorAssociation: Gh_CommentAuthorAssociation;
  /** Identifies the body of the issue. */
  body: Scalars['String'];
  /** The body rendered to HTML. */
  bodyHTML: Scalars['gh_HTML'];
  /** The http path for this issue body */
  bodyResourcePath: Scalars['gh_URI'];
  /** Identifies the body of the issue rendered to text. */
  bodyText: Scalars['String'];
  /** The http URL for this issue body */
  bodyUrl: Scalars['gh_URI'];
  /** `true` if the object is closed (definition of closed may depend on type) */
  closed: Scalars['Boolean'];
  /** Identifies the date and time when the object was closed. */
  closedAt?: Maybe<Scalars['gh_DateTime']>;
  /** A list of comments associated with the Issue. */
  comments: Gh_IssueCommentConnection;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Check if this comment was created via an email reply. */
  createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The actor who edited the comment. */
  editor?: Maybe<Gh_Actor>;
  /** The hovercard information for this issue */
  hovercard: Gh_Hovercard;
  id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: Scalars['Boolean'];
  /** Indicates whether or not this issue is currently pinned to the repository issues list */
  isPinned?: Maybe<Scalars['Boolean']>;
  /** Is this issue read by the viewer */
  isReadByViewer?: Maybe<Scalars['Boolean']>;
  /** A list of labels associated with the object. */
  labels?: Maybe<Gh_LabelConnection>;
  /** The moment the editor made the last edit */
  lastEditedAt?: Maybe<Scalars['gh_DateTime']>;
  /** `true` if the object is locked */
  locked: Scalars['Boolean'];
  /** Identifies the milestone associated with the issue. */
  milestone?: Maybe<Gh_Milestone>;
  /** Identifies the issue number. */
  number: Scalars['Int'];
  /** A list of Users that are participating in the Issue conversation. */
  participants: Gh_UserConnection;
  /** List of project cards associated with this issue. */
  projectCards: Gh_ProjectCardConnection;
  /** Find a project by project (beta) number. */
  projectNext?: Maybe<Gh_ProjectNext>;
  /** List of project (beta) items associated with this issue. */
  projectNextItems: Gh_ProjectNextItemConnection;
  /** A list of projects (beta) under the owner. */
  projectsNext: Gh_ProjectNextConnection;
  /** Identifies when the comment was published at. */
  publishedAt?: Maybe<Scalars['gh_DateTime']>;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: Maybe<Array<Gh_ReactionGroup>>;
  /** A list of Reactions left on the Issue. */
  reactions: Gh_ReactionConnection;
  /** The repository associated with this node. */
  repository: Gh_Repository;
  /** The HTTP path for this issue */
  resourcePath: Scalars['gh_URI'];
  /** Identifies the state of the issue. */
  state: Gh_IssueState;
  /** A list of events, comments, commits, etc. associated with the issue. */
  timeline: Gh_IssueTimelineConnection;
  /** A list of events, comments, commits, etc. associated with the issue. */
  timelineItems: Gh_IssueTimelineItemsConnection;
  /** Identifies the issue title. */
  title: Scalars['String'];
  /** Identifies the issue title rendered to HTML. */
  titleHTML: Scalars['String'];
  /** A list of issues that track this issue */
  trackedInIssues: Gh_IssueConnection;
  /** A list of issues tracked inside the current issue */
  trackedIssues: Gh_IssueConnection;
  /** The number of tracked issues for this issue */
  trackedIssuesCount: Scalars['Int'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The HTTP URL for this issue */
  url: Scalars['gh_URI'];
  /** A list of edits to this content. */
  userContentEdits?: Maybe<Gh_UserContentEditConnection>;
  /** Can user react to this subject */
  viewerCanReact: Scalars['Boolean'];
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: Array<Gh_CommentCannotUpdateReason>;
  /** Did the viewer author this comment. */
  viewerDidAuthor: Scalars['Boolean'];
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: Maybe<Gh_SubscriptionState>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type Gh_IssueAssigneesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type Gh_IssueCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_IssueCommentOrder>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type Gh_IssueHovercardArgs = {
  includeNotificationContexts?: InputMaybe<Scalars['Boolean']>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type Gh_IssueLabelsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_LabelOrder>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type Gh_IssueParticipantsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type Gh_IssueProjectCardsArgs = {
  after?: InputMaybe<Scalars['String']>;
  archivedStates?: InputMaybe<Array<InputMaybe<Gh_ProjectCardArchivedState>>>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type Gh_IssueProjectNextArgs = {
  number: Scalars['Int'];
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type Gh_IssueProjectNextItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  includeArchived?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type Gh_IssueProjectsNextArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  query?: InputMaybe<Scalars['String']>;
  sortBy?: InputMaybe<Gh_ProjectNextOrderField>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type Gh_IssueReactionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Gh_ReactionContent>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_ReactionOrder>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type Gh_IssueTimelineArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  since?: InputMaybe<Scalars['gh_DateTime']>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type Gh_IssueTimelineItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  itemTypes?: InputMaybe<Array<Gh_IssueTimelineItemsItemType>>;
  last?: InputMaybe<Scalars['Int']>;
  since?: InputMaybe<Scalars['gh_DateTime']>;
  skip?: InputMaybe<Scalars['Int']>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type Gh_IssueTrackedInIssuesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type Gh_IssueTrackedIssuesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type Gh_IssueTrackedIssuesCountArgs = {
  states?: InputMaybe<Array<InputMaybe<Gh_TrackedIssueStates>>>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type Gh_IssueUserContentEditsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** Represents a comment on an Issue. */
export type Gh_IssueComment = Gh_Comment & Gh_Deletable & Gh_Minimizable & Gh_Node & Gh_Reactable & Gh_RepositoryNode & Gh_Updatable & Gh_UpdatableComment & {
  __typename?: 'gh_IssueComment';
  /** The actor who authored the comment. */
  author?: Maybe<Gh_Actor>;
  /** Author's association with the subject of the comment. */
  authorAssociation: Gh_CommentAuthorAssociation;
  /** The body as Markdown. */
  body: Scalars['String'];
  /** The body rendered to HTML. */
  bodyHTML: Scalars['gh_HTML'];
  /** The body rendered to text. */
  bodyText: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Check if this comment was created via an email reply. */
  createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The actor who edited the comment. */
  editor?: Maybe<Gh_Actor>;
  id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: Scalars['Boolean'];
  /** Returns whether or not a comment has been minimized. */
  isMinimized: Scalars['Boolean'];
  /** Identifies the issue associated with the comment. */
  issue: Gh_Issue;
  /** The moment the editor made the last edit */
  lastEditedAt?: Maybe<Scalars['gh_DateTime']>;
  /** Returns why the comment was minimized. */
  minimizedReason?: Maybe<Scalars['String']>;
  /** Identifies when the comment was published at. */
  publishedAt?: Maybe<Scalars['gh_DateTime']>;
  /**
   * Returns the pull request associated with the comment, if this comment was made on a
   * pull request.
   *
   */
  pullRequest?: Maybe<Gh_PullRequest>;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: Maybe<Array<Gh_ReactionGroup>>;
  /** A list of Reactions left on the Issue. */
  reactions: Gh_ReactionConnection;
  /** The repository associated with this node. */
  repository: Gh_Repository;
  /** The HTTP path for this issue comment */
  resourcePath: Scalars['gh_URI'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The HTTP URL for this issue comment */
  url: Scalars['gh_URI'];
  /** A list of edits to this content. */
  userContentEdits?: Maybe<Gh_UserContentEditConnection>;
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: Scalars['Boolean'];
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize: Scalars['Boolean'];
  /** Can user react to this subject */
  viewerCanReact: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: Array<Gh_CommentCannotUpdateReason>;
  /** Did the viewer author this comment. */
  viewerDidAuthor: Scalars['Boolean'];
};


/** Represents a comment on an Issue. */
export type Gh_IssueCommentReactionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Gh_ReactionContent>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_ReactionOrder>;
};


/** Represents a comment on an Issue. */
export type Gh_IssueCommentUserContentEditsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for IssueComment. */
export type Gh_IssueCommentConnection = {
  __typename?: 'gh_IssueCommentConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_IssueCommentEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_IssueComment>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_IssueCommentEdge = {
  __typename?: 'gh_IssueCommentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_IssueComment>;
};

/** Ways in which lists of issue comments can be ordered upon return. */
export type Gh_IssueCommentOrder = {
  /** The direction in which to order issue comments by the specified field. */
  direction: Gh_OrderDirection;
  /** The field in which to order issue comments by. */
  field: Gh_IssueCommentOrderField;
};

/** Properties by which issue comment connections can be ordered. */
export enum Gh_IssueCommentOrderField {
  /** Order issue comments by update time */
  UpdatedAt = 'UPDATED_AT'
}

/** The connection type for Issue. */
export type Gh_IssueConnection = {
  __typename?: 'gh_IssueConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_IssueEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Issue>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** This aggregates issues opened by a user within one repository. */
export type Gh_IssueContributionsByRepository = {
  __typename?: 'gh_IssueContributionsByRepository';
  /** The issue contributions. */
  contributions: Gh_CreatedIssueContributionConnection;
  /** The repository in which the issues were opened. */
  repository: Gh_Repository;
};


/** This aggregates issues opened by a user within one repository. */
export type Gh_IssueContributionsByRepositoryContributionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_ContributionOrder>;
};

/** An edge in a connection. */
export type Gh_IssueEdge = {
  __typename?: 'gh_IssueEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_Issue>;
};

/** Ways in which to filter lists of issues. */
export type Gh_IssueFilters = {
  /** List issues assigned to given name. Pass in `null` for issues with no assigned user, and `*` for issues assigned to any user. */
  assignee?: InputMaybe<Scalars['String']>;
  /** List issues created by given name. */
  createdBy?: InputMaybe<Scalars['String']>;
  /** List issues where the list of label names exist on the issue. */
  labels?: InputMaybe<Array<Scalars['String']>>;
  /** List issues where the given name is mentioned in the issue. */
  mentioned?: InputMaybe<Scalars['String']>;
  /** List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its database ID. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone. */
  milestone?: InputMaybe<Scalars['String']>;
  /** List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its number field. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone. */
  milestoneNumber?: InputMaybe<Scalars['String']>;
  /** List issues that have been updated at or after the given date. */
  since?: InputMaybe<Scalars['gh_DateTime']>;
  /** List issues filtered by the list of states given. */
  states?: InputMaybe<Array<Gh_IssueState>>;
  /** List issues subscribed to by viewer. */
  viewerSubscribed?: InputMaybe<Scalars['Boolean']>;
};

/** Used for return value of Repository.issueOrPullRequest. */
export type Gh_IssueOrPullRequest = Gh_Issue | Gh_PullRequest;

/** Ways in which lists of issues can be ordered upon return. */
export type Gh_IssueOrder = {
  /** The direction in which to order issues by the specified field. */
  direction: Gh_OrderDirection;
  /** The field in which to order issues by. */
  field: Gh_IssueOrderField;
};

/** Properties by which issue connections can be ordered. */
export enum Gh_IssueOrderField {
  /** Order issues by comment count */
  Comments = 'COMMENTS',
  /** Order issues by creation time */
  CreatedAt = 'CREATED_AT',
  /** Order issues by update time */
  UpdatedAt = 'UPDATED_AT'
}

/** The possible states of an issue. */
export enum Gh_IssueState {
  /** An issue that has been closed */
  Closed = 'CLOSED',
  /** An issue that is still open */
  Open = 'OPEN'
}

/** A repository issue template. */
export type Gh_IssueTemplate = {
  __typename?: 'gh_IssueTemplate';
  /** The template purpose. */
  about?: Maybe<Scalars['String']>;
  /** The suggested issue body. */
  body?: Maybe<Scalars['String']>;
  /** The template name. */
  name: Scalars['String'];
  /** The suggested issue title. */
  title?: Maybe<Scalars['String']>;
};

/** The connection type for IssueTimelineItem. */
export type Gh_IssueTimelineConnection = {
  __typename?: 'gh_IssueTimelineConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_IssueTimelineItemEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_IssueTimelineItem>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An item in an issue timeline */
export type Gh_IssueTimelineItem = Gh_AssignedEvent | Gh_ClosedEvent | Gh_Commit | Gh_CrossReferencedEvent | Gh_DemilestonedEvent | Gh_IssueComment | Gh_LabeledEvent | Gh_LockedEvent | Gh_MilestonedEvent | Gh_ReferencedEvent | Gh_RenamedTitleEvent | Gh_ReopenedEvent | Gh_SubscribedEvent | Gh_TransferredEvent | Gh_UnassignedEvent | Gh_UnlabeledEvent | Gh_UnlockedEvent | Gh_UnsubscribedEvent | Gh_UserBlockedEvent;

/** An edge in a connection. */
export type Gh_IssueTimelineItemEdge = {
  __typename?: 'gh_IssueTimelineItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_IssueTimelineItem>;
};

/** An item in an issue timeline */
export type Gh_IssueTimelineItems = Gh_AddedToProjectEvent | Gh_AssignedEvent | Gh_ClosedEvent | Gh_CommentDeletedEvent | Gh_ConnectedEvent | Gh_ConvertedNoteToIssueEvent | Gh_ConvertedToDiscussionEvent | Gh_CrossReferencedEvent | Gh_DemilestonedEvent | Gh_DisconnectedEvent | Gh_IssueComment | Gh_LabeledEvent | Gh_LockedEvent | Gh_MarkedAsDuplicateEvent | Gh_MentionedEvent | Gh_MilestonedEvent | Gh_MovedColumnsInProjectEvent | Gh_PinnedEvent | Gh_ReferencedEvent | Gh_RemovedFromProjectEvent | Gh_RenamedTitleEvent | Gh_ReopenedEvent | Gh_SubscribedEvent | Gh_TransferredEvent | Gh_UnassignedEvent | Gh_UnlabeledEvent | Gh_UnlockedEvent | Gh_UnmarkedAsDuplicateEvent | Gh_UnpinnedEvent | Gh_UnsubscribedEvent | Gh_UserBlockedEvent;

/** The connection type for IssueTimelineItems. */
export type Gh_IssueTimelineItemsConnection = {
  __typename?: 'gh_IssueTimelineItemsConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_IssueTimelineItemsEdge>>>;
  /** Identifies the count of items after applying `before` and `after` filters. */
  filteredCount: Scalars['Int'];
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_IssueTimelineItems>>>;
  /** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
  pageCount: Scalars['Int'];
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  /** Identifies the date and time when the timeline was last updated. */
  updatedAt: Scalars['gh_DateTime'];
};

/** An edge in a connection. */
export type Gh_IssueTimelineItemsEdge = {
  __typename?: 'gh_IssueTimelineItemsEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_IssueTimelineItems>;
};

/** The possible item types found in a timeline. */
export enum Gh_IssueTimelineItemsItemType {
  /** Represents a 'added_to_project' event on a given issue or pull request. */
  AddedToProjectEvent = 'ADDED_TO_PROJECT_EVENT',
  /** Represents an 'assigned' event on any assignable object. */
  AssignedEvent = 'ASSIGNED_EVENT',
  /** Represents a 'closed' event on any `Closable`. */
  ClosedEvent = 'CLOSED_EVENT',
  /** Represents a 'comment_deleted' event on a given issue or pull request. */
  CommentDeletedEvent = 'COMMENT_DELETED_EVENT',
  /** Represents a 'connected' event on a given issue or pull request. */
  ConnectedEvent = 'CONNECTED_EVENT',
  /** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
  ConvertedNoteToIssueEvent = 'CONVERTED_NOTE_TO_ISSUE_EVENT',
  /** Represents a 'converted_to_discussion' event on a given issue. */
  ConvertedToDiscussionEvent = 'CONVERTED_TO_DISCUSSION_EVENT',
  /** Represents a mention made by one issue or pull request to another. */
  CrossReferencedEvent = 'CROSS_REFERENCED_EVENT',
  /** Represents a 'demilestoned' event on a given issue or pull request. */
  DemilestonedEvent = 'DEMILESTONED_EVENT',
  /** Represents a 'disconnected' event on a given issue or pull request. */
  DisconnectedEvent = 'DISCONNECTED_EVENT',
  /** Represents a comment on an Issue. */
  IssueComment = 'ISSUE_COMMENT',
  /** Represents a 'labeled' event on a given issue or pull request. */
  LabeledEvent = 'LABELED_EVENT',
  /** Represents a 'locked' event on a given issue or pull request. */
  LockedEvent = 'LOCKED_EVENT',
  /** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
  MarkedAsDuplicateEvent = 'MARKED_AS_DUPLICATE_EVENT',
  /** Represents a 'mentioned' event on a given issue or pull request. */
  MentionedEvent = 'MENTIONED_EVENT',
  /** Represents a 'milestoned' event on a given issue or pull request. */
  MilestonedEvent = 'MILESTONED_EVENT',
  /** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
  MovedColumnsInProjectEvent = 'MOVED_COLUMNS_IN_PROJECT_EVENT',
  /** Represents a 'pinned' event on a given issue or pull request. */
  PinnedEvent = 'PINNED_EVENT',
  /** Represents a 'referenced' event on a given `ReferencedSubject`. */
  ReferencedEvent = 'REFERENCED_EVENT',
  /** Represents a 'removed_from_project' event on a given issue or pull request. */
  RemovedFromProjectEvent = 'REMOVED_FROM_PROJECT_EVENT',
  /** Represents a 'renamed' event on a given issue or pull request */
  RenamedTitleEvent = 'RENAMED_TITLE_EVENT',
  /** Represents a 'reopened' event on any `Closable`. */
  ReopenedEvent = 'REOPENED_EVENT',
  /** Represents a 'subscribed' event on a given `Subscribable`. */
  SubscribedEvent = 'SUBSCRIBED_EVENT',
  /** Represents a 'transferred' event on a given issue or pull request. */
  TransferredEvent = 'TRANSFERRED_EVENT',
  /** Represents an 'unassigned' event on any assignable object. */
  UnassignedEvent = 'UNASSIGNED_EVENT',
  /** Represents an 'unlabeled' event on a given issue or pull request. */
  UnlabeledEvent = 'UNLABELED_EVENT',
  /** Represents an 'unlocked' event on a given issue or pull request. */
  UnlockedEvent = 'UNLOCKED_EVENT',
  /** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
  UnmarkedAsDuplicateEvent = 'UNMARKED_AS_DUPLICATE_EVENT',
  /** Represents an 'unpinned' event on a given issue or pull request. */
  UnpinnedEvent = 'UNPINNED_EVENT',
  /** Represents an 'unsubscribed' event on a given `Subscribable`. */
  UnsubscribedEvent = 'UNSUBSCRIBED_EVENT',
  /** Represents a 'user_blocked' event on a given user. */
  UserBlockedEvent = 'USER_BLOCKED_EVENT'
}

/** Represents a user signing up for a GitHub account. */
export type Gh_JoinedGitHubContribution = Gh_Contribution & {
  __typename?: 'gh_JoinedGitHubContribution';
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted: Scalars['Boolean'];
  /** When this contribution was made. */
  occurredAt: Scalars['gh_DateTime'];
  /** The HTTP path for this contribution. */
  resourcePath: Scalars['gh_URI'];
  /** The HTTP URL for this contribution. */
  url: Scalars['gh_URI'];
  /**
   * The user who made this contribution.
   *
   */
  user: Gh_User;
};

/** A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository. */
export type Gh_Label = Gh_Node & {
  __typename?: 'gh_Label';
  /** Identifies the label color. */
  color: Scalars['String'];
  /** Identifies the date and time when the label was created. */
  createdAt?: Maybe<Scalars['gh_DateTime']>;
  /** A brief description of this label. */
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  /** Indicates whether or not this is a default label. */
  isDefault: Scalars['Boolean'];
  /** A list of issues associated with this label. */
  issues: Gh_IssueConnection;
  /** Identifies the label name. */
  name: Scalars['String'];
  /** A list of pull requests associated with this label. */
  pullRequests: Gh_PullRequestConnection;
  /** The repository associated with this label. */
  repository: Gh_Repository;
  /** The HTTP path for this label. */
  resourcePath: Scalars['gh_URI'];
  /** Identifies the date and time when the label was last updated. */
  updatedAt?: Maybe<Scalars['gh_DateTime']>;
  /** The HTTP URL for this label. */
  url: Scalars['gh_URI'];
};


/** A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository. */
export type Gh_LabelIssuesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  filterBy?: InputMaybe<Gh_IssueFilters>;
  first?: InputMaybe<Scalars['Int']>;
  labels?: InputMaybe<Array<Scalars['String']>>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_IssueOrder>;
  states?: InputMaybe<Array<Gh_IssueState>>;
};


/** A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository. */
export type Gh_LabelPullRequestsArgs = {
  after?: InputMaybe<Scalars['String']>;
  baseRefName?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  headRefName?: InputMaybe<Scalars['String']>;
  labels?: InputMaybe<Array<Scalars['String']>>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_IssueOrder>;
  states?: InputMaybe<Array<Gh_PullRequestState>>;
};

/** The connection type for Label. */
export type Gh_LabelConnection = {
  __typename?: 'gh_LabelConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_LabelEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Label>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_LabelEdge = {
  __typename?: 'gh_LabelEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_Label>;
};

/** Ways in which lists of labels can be ordered upon return. */
export type Gh_LabelOrder = {
  /** The direction in which to order labels by the specified field. */
  direction: Gh_OrderDirection;
  /** The field in which to order labels by. */
  field: Gh_LabelOrderField;
};

/** Properties by which label connections can be ordered. */
export enum Gh_LabelOrderField {
  /** Order labels by creation time */
  CreatedAt = 'CREATED_AT',
  /** Order labels by name  */
  Name = 'NAME'
}

/** An object that can have labels assigned to it. */
export type Gh_Labelable = {
  /** A list of labels associated with the object. */
  labels?: Maybe<Gh_LabelConnection>;
};


/** An object that can have labels assigned to it. */
export type Gh_LabelableLabelsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_LabelOrder>;
};

/** Represents a 'labeled' event on a given issue or pull request. */
export type Gh_LabeledEvent = Gh_Node & {
  __typename?: 'gh_LabeledEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** Identifies the label associated with the 'labeled' event. */
  label: Gh_Label;
  /** Identifies the `Labelable` associated with the event. */
  labelable: Gh_Labelable;
};

/** Represents a given language found in repositories. */
export type Gh_Language = Gh_Node & {
  __typename?: 'gh_Language';
  /** The color defined for the current language. */
  color?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  /** The name of the current language. */
  name: Scalars['String'];
};

/** A list of languages associated with the parent. */
export type Gh_LanguageConnection = {
  __typename?: 'gh_LanguageConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_LanguageEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Language>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  /** The total size in bytes of files written in that language. */
  totalSize: Scalars['Int'];
};

/** Represents the language of a repository. */
export type Gh_LanguageEdge = {
  __typename?: 'gh_LanguageEdge';
  cursor: Scalars['String'];
  node: Gh_Language;
  /** The number of bytes of code written in the language. */
  size: Scalars['Int'];
};

/** Ordering options for language connections. */
export type Gh_LanguageOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order languages by. */
  field: Gh_LanguageOrderField;
};

/** Properties by which language connections can be ordered. */
export enum Gh_LanguageOrderField {
  /** Order languages by the size of all files containing the language */
  Size = 'SIZE'
}

/** A repository's open source license */
export type Gh_License = Gh_Node & {
  __typename?: 'gh_License';
  /** The full text of the license */
  body: Scalars['String'];
  /** The conditions set by the license */
  conditions: Array<Maybe<Gh_LicenseRule>>;
  /** A human-readable description of the license */
  description?: Maybe<Scalars['String']>;
  /** Whether the license should be featured */
  featured: Scalars['Boolean'];
  /** Whether the license should be displayed in license pickers */
  hidden: Scalars['Boolean'];
  id: Scalars['ID'];
  /** Instructions on how to implement the license */
  implementation?: Maybe<Scalars['String']>;
  /** The lowercased SPDX ID of the license */
  key: Scalars['String'];
  /** The limitations set by the license */
  limitations: Array<Maybe<Gh_LicenseRule>>;
  /** The license full name specified by <https://spdx.org/licenses> */
  name: Scalars['String'];
  /** Customary short name if applicable (e.g, GPLv3) */
  nickname?: Maybe<Scalars['String']>;
  /** The permissions set by the license */
  permissions: Array<Maybe<Gh_LicenseRule>>;
  /** Whether the license is a pseudo-license placeholder (e.g., other, no-license) */
  pseudoLicense: Scalars['Boolean'];
  /** Short identifier specified by <https://spdx.org/licenses> */
  spdxId?: Maybe<Scalars['String']>;
  /** URL to the license on <https://choosealicense.com> */
  url?: Maybe<Scalars['gh_URI']>;
};

/** Describes a License's conditions, permissions, and limitations */
export type Gh_LicenseRule = {
  __typename?: 'gh_LicenseRule';
  /** A description of the rule */
  description: Scalars['String'];
  /** The machine-readable rule key */
  key: Scalars['String'];
  /** The human-readable rule label */
  label: Scalars['String'];
};

/** Autogenerated input type of LinkRepositoryToProject */
export type Gh_LinkRepositoryToProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the Project to link to a Repository */
  projectId: Scalars['ID'];
  /** The ID of the Repository to link to a Project. */
  repositoryId: Scalars['ID'];
};

/** Autogenerated return type of LinkRepositoryToProject */
export type Gh_LinkRepositoryToProjectPayload = {
  __typename?: 'gh_LinkRepositoryToProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The linked Project. */
  project?: Maybe<Gh_Project>;
  /** The linked Repository. */
  repository?: Maybe<Gh_Repository>;
};

/** Autogenerated input type of LockLockable */
export type Gh_LockLockableInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** A reason for why the item will be locked. */
  lockReason?: InputMaybe<Gh_LockReason>;
  /** ID of the item to be locked. */
  lockableId: Scalars['ID'];
};

/** Autogenerated return type of LockLockable */
export type Gh_LockLockablePayload = {
  __typename?: 'gh_LockLockablePayload';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The item that was locked. */
  lockedRecord?: Maybe<Gh_Lockable>;
};

/** The possible reasons that an issue or pull request was locked. */
export enum Gh_LockReason {
  /** The issue or pull request was locked because the conversation was off-topic. */
  OffTopic = 'OFF_TOPIC',
  /** The issue or pull request was locked because the conversation was resolved. */
  Resolved = 'RESOLVED',
  /** The issue or pull request was locked because the conversation was spam. */
  Spam = 'SPAM',
  /** The issue or pull request was locked because the conversation was too heated. */
  TooHeated = 'TOO_HEATED'
}

/** An object that can be locked. */
export type Gh_Lockable = {
  /** Reason that the conversation was locked. */
  activeLockReason?: Maybe<Gh_LockReason>;
  /** `true` if the object is locked */
  locked: Scalars['Boolean'];
};

/** Represents a 'locked' event on a given issue or pull request. */
export type Gh_LockedEvent = Gh_Node & {
  __typename?: 'gh_LockedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** Reason that the conversation was locked (optional). */
  lockReason?: Maybe<Gh_LockReason>;
  /** Object that was locked. */
  lockable: Gh_Lockable;
};

/** A placeholder user for attribution of imported data on GitHub. */
export type Gh_Mannequin = Gh_Actor & Gh_Node & Gh_UniformResourceLocatable & {
  __typename?: 'gh_Mannequin';
  /** A URL pointing to the GitHub App's public avatar. */
  avatarUrl: Scalars['gh_URI'];
  /** The user that has claimed the data attributed to this mannequin. */
  claimant?: Maybe<Gh_User>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The mannequin's email on the source instance. */
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  /** The username of the actor. */
  login: Scalars['String'];
  /** The HTML path to this resource. */
  resourcePath: Scalars['gh_URI'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The URL to this resource. */
  url: Scalars['gh_URI'];
};


/** A placeholder user for attribution of imported data on GitHub. */
export type Gh_MannequinAvatarUrlArgs = {
  size?: InputMaybe<Scalars['Int']>;
};

/** Autogenerated input type of MarkDiscussionCommentAsAnswer */
export type Gh_MarkDiscussionCommentAsAnswerInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Node ID of the discussion comment to mark as an answer. */
  id: Scalars['ID'];
};

/** Autogenerated return type of MarkDiscussionCommentAsAnswer */
export type Gh_MarkDiscussionCommentAsAnswerPayload = {
  __typename?: 'gh_MarkDiscussionCommentAsAnswerPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The discussion that includes the chosen comment. */
  discussion?: Maybe<Gh_Discussion>;
};

/** Autogenerated input type of MarkFileAsViewed */
export type Gh_MarkFileAsViewedInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The path of the file to mark as viewed */
  path: Scalars['String'];
  /** The Node ID of the pull request. */
  pullRequestId: Scalars['ID'];
};

/** Autogenerated return type of MarkFileAsViewed */
export type Gh_MarkFileAsViewedPayload = {
  __typename?: 'gh_MarkFileAsViewedPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The updated pull request. */
  pullRequest?: Maybe<Gh_PullRequest>;
};

/** Autogenerated input type of MarkPullRequestReadyForReview */
export type Gh_MarkPullRequestReadyForReviewInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** ID of the pull request to be marked as ready for review. */
  pullRequestId: Scalars['ID'];
};

/** Autogenerated return type of MarkPullRequestReadyForReview */
export type Gh_MarkPullRequestReadyForReviewPayload = {
  __typename?: 'gh_MarkPullRequestReadyForReviewPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The pull request that is ready for review. */
  pullRequest?: Maybe<Gh_PullRequest>;
};

/** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
export type Gh_MarkedAsDuplicateEvent = Gh_Node & {
  __typename?: 'gh_MarkedAsDuplicateEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** The authoritative issue or pull request which has been duplicated by another. */
  canonical?: Maybe<Gh_IssueOrPullRequest>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The issue or pull request which has been marked as a duplicate of another. */
  duplicate?: Maybe<Gh_IssueOrPullRequest>;
  id: Scalars['ID'];
  /** Canonical and duplicate belong to different repositories. */
  isCrossRepository: Scalars['Boolean'];
};

/** A public description of a Marketplace category. */
export type Gh_MarketplaceCategory = Gh_Node & {
  __typename?: 'gh_MarketplaceCategory';
  /** The category's description. */
  description?: Maybe<Scalars['String']>;
  /** The technical description of how apps listed in this category work with GitHub. */
  howItWorks?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  /** The category's name. */
  name: Scalars['String'];
  /** How many Marketplace listings have this as their primary category. */
  primaryListingCount: Scalars['Int'];
  /** The HTTP path for this Marketplace category. */
  resourcePath: Scalars['gh_URI'];
  /** How many Marketplace listings have this as their secondary category. */
  secondaryListingCount: Scalars['Int'];
  /** The short name of the category used in its URL. */
  slug: Scalars['String'];
  /** The HTTP URL for this Marketplace category. */
  url: Scalars['gh_URI'];
};

/** A listing in the GitHub integration marketplace. */
export type Gh_MarketplaceListing = Gh_Node & {
  __typename?: 'gh_MarketplaceListing';
  /** The GitHub App this listing represents. */
  app?: Maybe<Gh_App>;
  /** URL to the listing owner's company site. */
  companyUrl?: Maybe<Scalars['gh_URI']>;
  /** The HTTP path for configuring access to the listing's integration or OAuth app */
  configurationResourcePath: Scalars['gh_URI'];
  /** The HTTP URL for configuring access to the listing's integration or OAuth app */
  configurationUrl: Scalars['gh_URI'];
  /** URL to the listing's documentation. */
  documentationUrl?: Maybe<Scalars['gh_URI']>;
  /** The listing's detailed description. */
  extendedDescription?: Maybe<Scalars['String']>;
  /** The listing's detailed description rendered to HTML. */
  extendedDescriptionHTML: Scalars['gh_HTML'];
  /** The listing's introductory description. */
  fullDescription: Scalars['String'];
  /** The listing's introductory description rendered to HTML. */
  fullDescriptionHTML: Scalars['gh_HTML'];
  /** Does this listing have any plans with a free trial? */
  hasPublishedFreeTrialPlans: Scalars['Boolean'];
  /** Does this listing have a terms of service link? */
  hasTermsOfService: Scalars['Boolean'];
  /** Whether the creator of the app is a verified org */
  hasVerifiedOwner: Scalars['Boolean'];
  /** A technical description of how this app works with GitHub. */
  howItWorks?: Maybe<Scalars['String']>;
  /** The listing's technical description rendered to HTML. */
  howItWorksHTML: Scalars['gh_HTML'];
  id: Scalars['ID'];
  /** URL to install the product to the viewer's account or organization. */
  installationUrl?: Maybe<Scalars['gh_URI']>;
  /** Whether this listing's app has been installed for the current viewer */
  installedForViewer: Scalars['Boolean'];
  /** Whether this listing has been removed from the Marketplace. */
  isArchived: Scalars['Boolean'];
  /** Whether this listing is still an editable draft that has not been submitted for review and is not publicly visible in the Marketplace. */
  isDraft: Scalars['Boolean'];
  /** Whether the product this listing represents is available as part of a paid plan. */
  isPaid: Scalars['Boolean'];
  /** Whether this listing has been approved for display in the Marketplace. */
  isPublic: Scalars['Boolean'];
  /** Whether this listing has been rejected by GitHub for display in the Marketplace. */
  isRejected: Scalars['Boolean'];
  /** Whether this listing has been approved for unverified display in the Marketplace. */
  isUnverified: Scalars['Boolean'];
  /** Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace. */
  isUnverifiedPending: Scalars['Boolean'];
  /** Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
  isVerificationPendingFromDraft: Scalars['Boolean'];
  /** Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
  isVerificationPendingFromUnverified: Scalars['Boolean'];
  /** Whether this listing has been approved for verified display in the Marketplace. */
  isVerified: Scalars['Boolean'];
  /** The hex color code, without the leading '#', for the logo background. */
  logoBackgroundColor: Scalars['String'];
  /** URL for the listing's logo image. */
  logoUrl?: Maybe<Scalars['gh_URI']>;
  /** The listing's full name. */
  name: Scalars['String'];
  /** The listing's very short description without a trailing period or ampersands. */
  normalizedShortDescription: Scalars['String'];
  /** URL to the listing's detailed pricing. */
  pricingUrl?: Maybe<Scalars['gh_URI']>;
  /** The category that best describes the listing. */
  primaryCategory: Gh_MarketplaceCategory;
  /** URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL. */
  privacyPolicyUrl: Scalars['gh_URI'];
  /** The HTTP path for the Marketplace listing. */
  resourcePath: Scalars['gh_URI'];
  /** The URLs for the listing's screenshots. */
  screenshotUrls: Array<Maybe<Scalars['String']>>;
  /** An alternate category that describes the listing. */
  secondaryCategory?: Maybe<Gh_MarketplaceCategory>;
  /** The listing's very short description. */
  shortDescription: Scalars['String'];
  /** The short name of the listing used in its URL. */
  slug: Scalars['String'];
  /** URL to the listing's status page. */
  statusUrl?: Maybe<Scalars['gh_URI']>;
  /** An email address for support for this listing's app. */
  supportEmail?: Maybe<Scalars['String']>;
  /** Either a URL or an email address for support for this listing's app, may return an empty string for listings that do not require a support URL. */
  supportUrl: Scalars['gh_URI'];
  /** URL to the listing's terms of service. */
  termsOfServiceUrl?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the Marketplace listing. */
  url: Scalars['gh_URI'];
  /** Can the current viewer add plans for this Marketplace listing. */
  viewerCanAddPlans: Scalars['Boolean'];
  /** Can the current viewer approve this Marketplace listing. */
  viewerCanApprove: Scalars['Boolean'];
  /** Can the current viewer delist this Marketplace listing. */
  viewerCanDelist: Scalars['Boolean'];
  /** Can the current viewer edit this Marketplace listing. */
  viewerCanEdit: Scalars['Boolean'];
  /**
   * Can the current viewer edit the primary and secondary category of this
   * Marketplace listing.
   *
   */
  viewerCanEditCategories: Scalars['Boolean'];
  /** Can the current viewer edit the plans for this Marketplace listing. */
  viewerCanEditPlans: Scalars['Boolean'];
  /**
   * Can the current viewer return this Marketplace listing to draft state
   * so it becomes editable again.
   *
   */
  viewerCanRedraft: Scalars['Boolean'];
  /**
   * Can the current viewer reject this Marketplace listing by returning it to
   * an editable draft state or rejecting it entirely.
   *
   */
  viewerCanReject: Scalars['Boolean'];
  /**
   * Can the current viewer request this listing be reviewed for display in
   * the Marketplace as verified.
   *
   */
  viewerCanRequestApproval: Scalars['Boolean'];
  /**
   * Indicates whether the current user has an active subscription to this Marketplace listing.
   *
   */
  viewerHasPurchased: Scalars['Boolean'];
  /**
   * Indicates if the current user has purchased a subscription to this Marketplace listing
   * for all of the organizations the user owns.
   *
   */
  viewerHasPurchasedForAllOrganizations: Scalars['Boolean'];
  /**
   * Does the current viewer role allow them to administer this Marketplace listing.
   *
   */
  viewerIsListingAdmin: Scalars['Boolean'];
};


/** A listing in the GitHub integration marketplace. */
export type Gh_MarketplaceListingLogoUrlArgs = {
  size?: InputMaybe<Scalars['Int']>;
};

/** Look up Marketplace Listings */
export type Gh_MarketplaceListingConnection = {
  __typename?: 'gh_MarketplaceListingConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_MarketplaceListingEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_MarketplaceListing>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_MarketplaceListingEdge = {
  __typename?: 'gh_MarketplaceListingEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_MarketplaceListing>;
};

/** Entities that have members who can set status messages. */
export type Gh_MemberStatusable = {
  /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
  memberStatuses: Gh_UserStatusConnection;
};


/** Entities that have members who can set status messages. */
export type Gh_MemberStatusableMemberStatusesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_UserStatusOrder>;
};

/** Audit log entry for a members_can_delete_repos.clear event. */
export type Gh_MembersCanDeleteReposClearAuditEntry = Gh_AuditEntry & Gh_EnterpriseAuditEntryData & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_MembersCanDeleteReposClearAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The slug of the enterprise. */
  enterpriseSlug?: Maybe<Scalars['String']>;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: Maybe<Scalars['gh_URI']>;
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a members_can_delete_repos.disable event. */
export type Gh_MembersCanDeleteReposDisableAuditEntry = Gh_AuditEntry & Gh_EnterpriseAuditEntryData & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_MembersCanDeleteReposDisableAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The slug of the enterprise. */
  enterpriseSlug?: Maybe<Scalars['String']>;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: Maybe<Scalars['gh_URI']>;
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a members_can_delete_repos.enable event. */
export type Gh_MembersCanDeleteReposEnableAuditEntry = Gh_AuditEntry & Gh_EnterpriseAuditEntryData & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_MembersCanDeleteReposEnableAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The slug of the enterprise. */
  enterpriseSlug?: Maybe<Scalars['String']>;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: Maybe<Scalars['gh_URI']>;
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Represents a 'mentioned' event on a given issue or pull request. */
export type Gh_MentionedEvent = Gh_Node & {
  __typename?: 'gh_MentionedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
};

/** Autogenerated input type of MergeBranch */
export type Gh_MergeBranchInput = {
  /** The email address to associate with this commit. */
  authorEmail?: InputMaybe<Scalars['String']>;
  /** The name of the base branch that the provided head will be merged into. */
  base: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Message to use for the merge commit. If omitted, a default will be used. */
  commitMessage?: InputMaybe<Scalars['String']>;
  /** The head to merge into the base branch. This can be a branch name or a commit GitObjectID. */
  head: Scalars['String'];
  /** The Node ID of the Repository containing the base branch that will be modified. */
  repositoryId: Scalars['ID'];
};

/** Autogenerated return type of MergeBranch */
export type Gh_MergeBranchPayload = {
  __typename?: 'gh_MergeBranchPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The resulting merge Commit. */
  mergeCommit?: Maybe<Gh_Commit>;
};

/** Autogenerated input type of MergePullRequest */
export type Gh_MergePullRequestInput = {
  /** The email address to associate with this merge. */
  authorEmail?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Commit body to use for the merge commit; if omitted, a default message will be used */
  commitBody?: InputMaybe<Scalars['String']>;
  /** Commit headline to use for the merge commit; if omitted, a default message will be used. */
  commitHeadline?: InputMaybe<Scalars['String']>;
  /** OID that the pull request head ref must match to allow merge; if omitted, no check is performed. */
  expectedHeadOid?: InputMaybe<Scalars['gh_GitObjectID']>;
  /** The merge method to use. If omitted, defaults to 'MERGE' */
  mergeMethod?: InputMaybe<Gh_PullRequestMergeMethod>;
  /** ID of the pull request to be merged. */
  pullRequestId: Scalars['ID'];
};

/** Autogenerated return type of MergePullRequest */
export type Gh_MergePullRequestPayload = {
  __typename?: 'gh_MergePullRequestPayload';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The pull request that was merged. */
  pullRequest?: Maybe<Gh_PullRequest>;
};

/** Whether or not a PullRequest can be merged. */
export enum Gh_MergeableState {
  /** The pull request cannot be merged due to merge conflicts. */
  Conflicting = 'CONFLICTING',
  /** The pull request can be merged. */
  Mergeable = 'MERGEABLE',
  /** The mergeability of the pull request is still being calculated. */
  Unknown = 'UNKNOWN'
}

/** Represents a 'merged' event on a given pull request. */
export type Gh_MergedEvent = Gh_Node & Gh_UniformResourceLocatable & {
  __typename?: 'gh_MergedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the commit associated with the `merge` event. */
  commit?: Maybe<Gh_Commit>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** Identifies the Ref associated with the `merge` event. */
  mergeRef?: Maybe<Gh_Ref>;
  /** Identifies the name of the Ref associated with the `merge` event. */
  mergeRefName: Scalars['String'];
  /** PullRequest referenced by event. */
  pullRequest: Gh_PullRequest;
  /** The HTTP path for this merged event. */
  resourcePath: Scalars['gh_URI'];
  /** The HTTP URL for this merged event. */
  url: Scalars['gh_URI'];
};

/** Represents an Octoshift migration. */
export type Gh_Migration = {
  /** The Octoshift migration flag to continue on error. */
  continueOnError: Scalars['Boolean'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The reason the migration failed. */
  failureReason?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  /** The URL for the migration log (expires 1 day after migration completes). */
  migrationLogUrl?: Maybe<Scalars['gh_URI']>;
  /** The Octoshift migration source. */
  migrationSource: Gh_MigrationSource;
  /** The target repository name. */
  repositoryName: Scalars['String'];
  /** The Octoshift migration source URL. */
  sourceUrl: Scalars['gh_URI'];
  /** The Octoshift migration state. */
  state: Gh_MigrationState;
};

/** An Octoshift migration source. */
export type Gh_MigrationSource = Gh_Node & {
  __typename?: 'gh_MigrationSource';
  id: Scalars['ID'];
  /** The Octoshift migration source name. */
  name: Scalars['String'];
  /** The Octoshift migration source type. */
  type: Gh_MigrationSourceType;
  /** The Octoshift migration source URL. */
  url: Scalars['gh_URI'];
};

/** Represents the different Octoshift migration sources. */
export enum Gh_MigrationSourceType {
  /** An Azure DevOps migration source. */
  AzureDevops = 'AZURE_DEVOPS',
  /** A Bitbucket Server migration source. */
  BitbucketServer = 'BITBUCKET_SERVER',
  /** A GitHub migration source. */
  Github = 'GITHUB',
  /** A GitHub Migration API source. */
  GithubArchive = 'GITHUB_ARCHIVE',
  /** A GitLab migration source. */
  Gitlab = 'GITLAB'
}

/** The Octoshift migration state. */
export enum Gh_MigrationState {
  /** The Octoshift migration has failed. */
  Failed = 'FAILED',
  /** The Octoshift migration is in progress. */
  InProgress = 'IN_PROGRESS',
  /** The Octoshift migration has not started. */
  NotStarted = 'NOT_STARTED',
  /** The Octoshift migration has been queued. */
  Queued = 'QUEUED',
  /** The Octoshift migration has succeeded. */
  Succeeded = 'SUCCEEDED'
}

/** Represents a Milestone object on a given repository. */
export type Gh_Milestone = Gh_Closable & Gh_Node & Gh_UniformResourceLocatable & {
  __typename?: 'gh_Milestone';
  /** `true` if the object is closed (definition of closed may depend on type) */
  closed: Scalars['Boolean'];
  /** Identifies the date and time when the object was closed. */
  closedAt?: Maybe<Scalars['gh_DateTime']>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the actor who created the milestone. */
  creator?: Maybe<Gh_Actor>;
  /** Identifies the description of the milestone. */
  description?: Maybe<Scalars['String']>;
  /** Identifies the due date of the milestone. */
  dueOn?: Maybe<Scalars['gh_DateTime']>;
  id: Scalars['ID'];
  /** A list of issues associated with the milestone. */
  issues: Gh_IssueConnection;
  /** Identifies the number of the milestone. */
  number: Scalars['Int'];
  /** Identifies the percentage complete for the milestone */
  progressPercentage: Scalars['Float'];
  /** A list of pull requests associated with the milestone. */
  pullRequests: Gh_PullRequestConnection;
  /** The repository associated with this milestone. */
  repository: Gh_Repository;
  /** The HTTP path for this milestone */
  resourcePath: Scalars['gh_URI'];
  /** Identifies the state of the milestone. */
  state: Gh_MilestoneState;
  /** Identifies the title of the milestone. */
  title: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The HTTP URL for this milestone */
  url: Scalars['gh_URI'];
};


/** Represents a Milestone object on a given repository. */
export type Gh_MilestoneIssuesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  filterBy?: InputMaybe<Gh_IssueFilters>;
  first?: InputMaybe<Scalars['Int']>;
  labels?: InputMaybe<Array<Scalars['String']>>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_IssueOrder>;
  states?: InputMaybe<Array<Gh_IssueState>>;
};


/** Represents a Milestone object on a given repository. */
export type Gh_MilestonePullRequestsArgs = {
  after?: InputMaybe<Scalars['String']>;
  baseRefName?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  headRefName?: InputMaybe<Scalars['String']>;
  labels?: InputMaybe<Array<Scalars['String']>>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_IssueOrder>;
  states?: InputMaybe<Array<Gh_PullRequestState>>;
};

/** The connection type for Milestone. */
export type Gh_MilestoneConnection = {
  __typename?: 'gh_MilestoneConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_MilestoneEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Milestone>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_MilestoneEdge = {
  __typename?: 'gh_MilestoneEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_Milestone>;
};

/** Types that can be inside a Milestone. */
export type Gh_MilestoneItem = Gh_Issue | Gh_PullRequest;

/** Ordering options for milestone connections. */
export type Gh_MilestoneOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order milestones by. */
  field: Gh_MilestoneOrderField;
};

/** Properties by which milestone connections can be ordered. */
export enum Gh_MilestoneOrderField {
  /** Order milestones by when they were created. */
  CreatedAt = 'CREATED_AT',
  /** Order milestones by when they are due. */
  DueDate = 'DUE_DATE',
  /** Order milestones by their number. */
  Number = 'NUMBER',
  /** Order milestones by when they were last updated. */
  UpdatedAt = 'UPDATED_AT'
}

/** The possible states of a milestone. */
export enum Gh_MilestoneState {
  /** A milestone that has been closed. */
  Closed = 'CLOSED',
  /** A milestone that is still open. */
  Open = 'OPEN'
}

/** Represents a 'milestoned' event on a given issue or pull request. */
export type Gh_MilestonedEvent = Gh_Node & {
  __typename?: 'gh_MilestonedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** Identifies the milestone title associated with the 'milestoned' event. */
  milestoneTitle: Scalars['String'];
  /** Object referenced by event. */
  subject: Gh_MilestoneItem;
};

/** Entities that can be minimized. */
export type Gh_Minimizable = {
  /** Returns whether or not a comment has been minimized. */
  isMinimized: Scalars['Boolean'];
  /** Returns why the comment was minimized. */
  minimizedReason?: Maybe<Scalars['String']>;
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize: Scalars['Boolean'];
};

/** Autogenerated input type of MinimizeComment */
export type Gh_MinimizeCommentInput = {
  /** The classification of comment */
  classifier: Gh_ReportedContentClassifiers;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Node ID of the subject to modify. */
  subjectId: Scalars['ID'];
};

/** Autogenerated return type of MinimizeComment */
export type Gh_MinimizeCommentPayload = {
  __typename?: 'gh_MinimizeCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The comment that was minimized. */
  minimizedComment?: Maybe<Gh_Minimizable>;
};

/** Autogenerated input type of MoveProjectCard */
export type Gh_MoveProjectCardInput = {
  /** Place the new card after the card with this id. Pass null to place it at the top. */
  afterCardId?: InputMaybe<Scalars['ID']>;
  /** The id of the card to move. */
  cardId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The id of the column to move it into. */
  columnId: Scalars['ID'];
};

/** Autogenerated return type of MoveProjectCard */
export type Gh_MoveProjectCardPayload = {
  __typename?: 'gh_MoveProjectCardPayload';
  /** The new edge of the moved card. */
  cardEdge?: Maybe<Gh_ProjectCardEdge>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of MoveProjectColumn */
export type Gh_MoveProjectColumnInput = {
  /** Place the new column after the column with this id. Pass null to place it at the front. */
  afterColumnId?: InputMaybe<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The id of the column to move. */
  columnId: Scalars['ID'];
};

/** Autogenerated return type of MoveProjectColumn */
export type Gh_MoveProjectColumnPayload = {
  __typename?: 'gh_MoveProjectColumnPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The new edge of the moved column. */
  columnEdge?: Maybe<Gh_ProjectColumnEdge>;
};

/** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
export type Gh_MovedColumnsInProjectEvent = Gh_Node & {
  __typename?: 'gh_MovedColumnsInProjectEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
};

export type Gh_Mutation = {
  __typename?: 'gh_Mutation';
  /** Clear all of a customer's queued migrations */
  abortQueuedMigrations?: Maybe<Gh_AbortQueuedMigrationsPayload>;
  /** Accepts a pending invitation for a user to become an administrator of an enterprise. */
  acceptEnterpriseAdministratorInvitation?: Maybe<Gh_AcceptEnterpriseAdministratorInvitationPayload>;
  /** Applies a suggested topic to the repository. */
  acceptTopicSuggestion?: Maybe<Gh_AcceptTopicSuggestionPayload>;
  /** Adds assignees to an assignable object. */
  addAssigneesToAssignable?: Maybe<Gh_AddAssigneesToAssignablePayload>;
  /** Adds a comment to an Issue or Pull Request. */
  addComment?: Maybe<Gh_AddCommentPayload>;
  /** Adds a comment to a Discussion, possibly as a reply to another comment. */
  addDiscussionComment?: Maybe<Gh_AddDiscussionCommentPayload>;
  /** Adds a support entitlement to an enterprise member. */
  addEnterpriseSupportEntitlement?: Maybe<Gh_AddEnterpriseSupportEntitlementPayload>;
  /** Adds labels to a labelable object. */
  addLabelsToLabelable?: Maybe<Gh_AddLabelsToLabelablePayload>;
  /** Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both. */
  addProjectCard?: Maybe<Gh_AddProjectCardPayload>;
  /** Adds a column to a Project. */
  addProjectColumn?: Maybe<Gh_AddProjectColumnPayload>;
  /** Creates a new draft issue and add it to a Project. */
  addProjectDraftIssue?: Maybe<Gh_AddProjectDraftIssuePayload>;
  /** Adds an existing item (Issue or PullRequest) to a Project. */
  addProjectNextItem?: Maybe<Gh_AddProjectNextItemPayload>;
  /** Adds a review to a Pull Request. */
  addPullRequestReview?: Maybe<Gh_AddPullRequestReviewPayload>;
  /** Adds a comment to a review. */
  addPullRequestReviewComment?: Maybe<Gh_AddPullRequestReviewCommentPayload>;
  /** Adds a new thread to a pending Pull Request Review. */
  addPullRequestReviewThread?: Maybe<Gh_AddPullRequestReviewThreadPayload>;
  /** Adds a reaction to a subject. */
  addReaction?: Maybe<Gh_AddReactionPayload>;
  /** Adds a star to a Starrable. */
  addStar?: Maybe<Gh_AddStarPayload>;
  /** Add an upvote to a discussion or discussion comment. */
  addUpvote?: Maybe<Gh_AddUpvotePayload>;
  /** Adds a verifiable domain to an owning account. */
  addVerifiableDomain?: Maybe<Gh_AddVerifiableDomainPayload>;
  /** Approve all pending deployments under one or more environments */
  approveDeployments?: Maybe<Gh_ApproveDeploymentsPayload>;
  /** Approve a verifiable domain for notification delivery. */
  approveVerifiableDomain?: Maybe<Gh_ApproveVerifiableDomainPayload>;
  /** Marks a repository as archived. */
  archiveRepository?: Maybe<Gh_ArchiveRepositoryPayload>;
  /** Cancels a pending invitation for an administrator to join an enterprise. */
  cancelEnterpriseAdminInvitation?: Maybe<Gh_CancelEnterpriseAdminInvitationPayload>;
  /** Cancel an active sponsorship. */
  cancelSponsorship?: Maybe<Gh_CancelSponsorshipPayload>;
  /** Update your status on GitHub. */
  changeUserStatus?: Maybe<Gh_ChangeUserStatusPayload>;
  /** Clears all labels from a labelable object. */
  clearLabelsFromLabelable?: Maybe<Gh_ClearLabelsFromLabelablePayload>;
  /** Creates a new project by cloning configuration from an existing project. */
  cloneProject?: Maybe<Gh_CloneProjectPayload>;
  /** Create a new repository with the same files and directory structure as a template repository. */
  cloneTemplateRepository?: Maybe<Gh_CloneTemplateRepositoryPayload>;
  /** Close an issue. */
  closeIssue?: Maybe<Gh_CloseIssuePayload>;
  /** Close a pull request. */
  closePullRequest?: Maybe<Gh_ClosePullRequestPayload>;
  /** Convert a project note card to one associated with a newly created issue. */
  convertProjectCardNoteToIssue?: Maybe<Gh_ConvertProjectCardNoteToIssuePayload>;
  /** Converts a pull request to draft */
  convertPullRequestToDraft?: Maybe<Gh_ConvertPullRequestToDraftPayload>;
  /** Create a new branch protection rule */
  createBranchProtectionRule?: Maybe<Gh_CreateBranchProtectionRulePayload>;
  /** Create a check run. */
  createCheckRun?: Maybe<Gh_CreateCheckRunPayload>;
  /** Create a check suite */
  createCheckSuite?: Maybe<Gh_CreateCheckSuitePayload>;
  /**
   * Appends a commit to the given branch as the authenticated user.
   *
   * This mutation creates a commit whose parent is the HEAD of the provided
   * branch and also updates that branch to point to the new commit.
   * It can be thought of as similar to `git commit`.
   *
   * ### Locating a Branch
   *
   * Commits are appended to a `branch` of type `Ref`.
   * This must refer to a git branch (i.e.  the fully qualified path must
   * begin with `refs/heads/`, although including this prefix is optional.
   *
   * Callers may specify the `branch` to commit to either by its global node
   * ID or by passing both of `repositoryNameWithOwner` and `refName`.  For
   * more details see the documentation for `CommittableBranch`.
   *
   * ### Describing Changes
   *
   * `fileChanges` are specified as a `FilesChanges` object describing
   * `FileAdditions` and `FileDeletions`.
   *
   * Please see the documentation for `FileChanges` for more information on
   * how to use this argument to describe any set of file changes.
   *
   * ### Authorship
   *
   * Similar to the web commit interface, this mutation does not support
   * specifying the author or committer of the commit and will not add
   * support for this in the future.
   *
   * A commit created by a successful execution of this mutation will be
   * authored by the owner of the credential which authenticates the API
   * request.  The committer will be identical to that of commits authored
   * using the web interface.
   *
   * If you need full control over author and committer information, please
   * use the Git Database REST API instead.
   *
   * ### Commit Signing
   *
   * Commits made using this mutation are automatically signed by GitHub if
   * supported and will be marked as verified in the user interface.
   *
   */
  createCommitOnBranch?: Maybe<Gh_CreateCommitOnBranchPayload>;
  /** Create a discussion. */
  createDiscussion?: Maybe<Gh_CreateDiscussionPayload>;
  /** Creates an organization as part of an enterprise account. */
  createEnterpriseOrganization?: Maybe<Gh_CreateEnterpriseOrganizationPayload>;
  /** Creates an environment or simply returns it if already exists. */
  createEnvironment?: Maybe<Gh_CreateEnvironmentPayload>;
  /** Creates a new IP allow list entry. */
  createIpAllowListEntry?: Maybe<Gh_CreateIpAllowListEntryPayload>;
  /** Creates a new issue. */
  createIssue?: Maybe<Gh_CreateIssuePayload>;
  /** Creates an Octoshift migration source. */
  createMigrationSource?: Maybe<Gh_CreateMigrationSourcePayload>;
  /** Creates a new project. */
  createProject?: Maybe<Gh_CreateProjectPayload>;
  /** Create a new pull request */
  createPullRequest?: Maybe<Gh_CreatePullRequestPayload>;
  /** Create a new Git Ref. */
  createRef?: Maybe<Gh_CreateRefPayload>;
  /** Create a new repository. */
  createRepository?: Maybe<Gh_CreateRepositoryPayload>;
  /** Create a new payment tier for your GitHub Sponsors profile. */
  createSponsorsTier?: Maybe<Gh_CreateSponsorsTierPayload>;
  /** Start a new sponsorship of a maintainer in GitHub Sponsors, or reactivate a past sponsorship. */
  createSponsorship?: Maybe<Gh_CreateSponsorshipPayload>;
  /** Creates a new team discussion. */
  createTeamDiscussion?: Maybe<Gh_CreateTeamDiscussionPayload>;
  /** Creates a new team discussion comment. */
  createTeamDiscussionComment?: Maybe<Gh_CreateTeamDiscussionCommentPayload>;
  /** Rejects a suggested topic for the repository. */
  declineTopicSuggestion?: Maybe<Gh_DeclineTopicSuggestionPayload>;
  /** Delete a branch protection rule */
  deleteBranchProtectionRule?: Maybe<Gh_DeleteBranchProtectionRulePayload>;
  /** Deletes a deployment. */
  deleteDeployment?: Maybe<Gh_DeleteDeploymentPayload>;
  /** Delete a discussion and all of its replies. */
  deleteDiscussion?: Maybe<Gh_DeleteDiscussionPayload>;
  /** Delete a discussion comment. If it has replies, wipe it instead. */
  deleteDiscussionComment?: Maybe<Gh_DeleteDiscussionCommentPayload>;
  /** Deletes an environment */
  deleteEnvironment?: Maybe<Gh_DeleteEnvironmentPayload>;
  /** Deletes an IP allow list entry. */
  deleteIpAllowListEntry?: Maybe<Gh_DeleteIpAllowListEntryPayload>;
  /** Deletes an Issue object. */
  deleteIssue?: Maybe<Gh_DeleteIssuePayload>;
  /** Deletes an IssueComment object. */
  deleteIssueComment?: Maybe<Gh_DeleteIssueCommentPayload>;
  /** Deletes a project. */
  deleteProject?: Maybe<Gh_DeleteProjectPayload>;
  /** Deletes a project card. */
  deleteProjectCard?: Maybe<Gh_DeleteProjectCardPayload>;
  /** Deletes a project column. */
  deleteProjectColumn?: Maybe<Gh_DeleteProjectColumnPayload>;
  /** Deletes an item from a Project. */
  deleteProjectNextItem?: Maybe<Gh_DeleteProjectNextItemPayload>;
  /** Deletes a pull request review. */
  deletePullRequestReview?: Maybe<Gh_DeletePullRequestReviewPayload>;
  /** Deletes a pull request review comment. */
  deletePullRequestReviewComment?: Maybe<Gh_DeletePullRequestReviewCommentPayload>;
  /** Delete a Git Ref. */
  deleteRef?: Maybe<Gh_DeleteRefPayload>;
  /** Deletes a team discussion. */
  deleteTeamDiscussion?: Maybe<Gh_DeleteTeamDiscussionPayload>;
  /** Deletes a team discussion comment. */
  deleteTeamDiscussionComment?: Maybe<Gh_DeleteTeamDiscussionCommentPayload>;
  /** Deletes a verifiable domain. */
  deleteVerifiableDomain?: Maybe<Gh_DeleteVerifiableDomainPayload>;
  /** Disable auto merge on the given pull request */
  disablePullRequestAutoMerge?: Maybe<Gh_DisablePullRequestAutoMergePayload>;
  /** Dismisses an approved or rejected pull request review. */
  dismissPullRequestReview?: Maybe<Gh_DismissPullRequestReviewPayload>;
  /** Dismisses the Dependabot alert. */
  dismissRepositoryVulnerabilityAlert?: Maybe<Gh_DismissRepositoryVulnerabilityAlertPayload>;
  /** Enable the default auto-merge on a pull request. */
  enablePullRequestAutoMerge?: Maybe<Gh_EnablePullRequestAutoMergePayload>;
  /** Follow an organization. */
  followOrganization?: Maybe<Gh_FollowOrganizationPayload>;
  /** Follow a user. */
  followUser?: Maybe<Gh_FollowUserPayload>;
  /** Grant the migrator role to a user for all organizations under an enterprise account. */
  grantEnterpriseOrganizationsMigratorRole?: Maybe<Gh_GrantEnterpriseOrganizationsMigratorRolePayload>;
  /** Grant the migrator role to a user or a team. */
  grantMigratorRole?: Maybe<Gh_GrantMigratorRolePayload>;
  /** Invite someone to become an administrator of the enterprise. */
  inviteEnterpriseAdmin?: Maybe<Gh_InviteEnterpriseAdminPayload>;
  /** Creates a repository link for a project. */
  linkRepositoryToProject?: Maybe<Gh_LinkRepositoryToProjectPayload>;
  /** Lock a lockable object */
  lockLockable?: Maybe<Gh_LockLockablePayload>;
  /** Mark a discussion comment as the chosen answer for discussions in an answerable category. */
  markDiscussionCommentAsAnswer?: Maybe<Gh_MarkDiscussionCommentAsAnswerPayload>;
  /** Mark a pull request file as viewed */
  markFileAsViewed?: Maybe<Gh_MarkFileAsViewedPayload>;
  /** Marks a pull request ready for review. */
  markPullRequestReadyForReview?: Maybe<Gh_MarkPullRequestReadyForReviewPayload>;
  /** Merge a head into a branch. */
  mergeBranch?: Maybe<Gh_MergeBranchPayload>;
  /** Merge a pull request. */
  mergePullRequest?: Maybe<Gh_MergePullRequestPayload>;
  /** Minimizes a comment on an Issue, Commit, Pull Request, or Gist */
  minimizeComment?: Maybe<Gh_MinimizeCommentPayload>;
  /** Moves a project card to another place. */
  moveProjectCard?: Maybe<Gh_MoveProjectCardPayload>;
  /** Moves a project column to another place. */
  moveProjectColumn?: Maybe<Gh_MoveProjectColumnPayload>;
  /** Pin an issue to a repository */
  pinIssue?: Maybe<Gh_PinIssuePayload>;
  /** Regenerates the identity provider recovery codes for an enterprise */
  regenerateEnterpriseIdentityProviderRecoveryCodes?: Maybe<Gh_RegenerateEnterpriseIdentityProviderRecoveryCodesPayload>;
  /** Regenerates a verifiable domain's verification token. */
  regenerateVerifiableDomainToken?: Maybe<Gh_RegenerateVerifiableDomainTokenPayload>;
  /** Reject all pending deployments under one or more environments */
  rejectDeployments?: Maybe<Gh_RejectDeploymentsPayload>;
  /** Removes assignees from an assignable object. */
  removeAssigneesFromAssignable?: Maybe<Gh_RemoveAssigneesFromAssignablePayload>;
  /** Removes an administrator from the enterprise. */
  removeEnterpriseAdmin?: Maybe<Gh_RemoveEnterpriseAdminPayload>;
  /** Removes the identity provider from an enterprise */
  removeEnterpriseIdentityProvider?: Maybe<Gh_RemoveEnterpriseIdentityProviderPayload>;
  /** Removes an organization from the enterprise */
  removeEnterpriseOrganization?: Maybe<Gh_RemoveEnterpriseOrganizationPayload>;
  /** Removes a support entitlement from an enterprise member. */
  removeEnterpriseSupportEntitlement?: Maybe<Gh_RemoveEnterpriseSupportEntitlementPayload>;
  /** Removes labels from a Labelable object. */
  removeLabelsFromLabelable?: Maybe<Gh_RemoveLabelsFromLabelablePayload>;
  /** Removes outside collaborator from all repositories in an organization. */
  removeOutsideCollaborator?: Maybe<Gh_RemoveOutsideCollaboratorPayload>;
  /** Removes a reaction from a subject. */
  removeReaction?: Maybe<Gh_RemoveReactionPayload>;
  /** Removes a star from a Starrable. */
  removeStar?: Maybe<Gh_RemoveStarPayload>;
  /** Remove an upvote to a discussion or discussion comment. */
  removeUpvote?: Maybe<Gh_RemoveUpvotePayload>;
  /** Reopen a issue. */
  reopenIssue?: Maybe<Gh_ReopenIssuePayload>;
  /** Reopen a pull request. */
  reopenPullRequest?: Maybe<Gh_ReopenPullRequestPayload>;
  /** Set review requests on a pull request. */
  requestReviews?: Maybe<Gh_RequestReviewsPayload>;
  /** Rerequests an existing check suite. */
  rerequestCheckSuite?: Maybe<Gh_RerequestCheckSuitePayload>;
  /** Marks a review thread as resolved. */
  resolveReviewThread?: Maybe<Gh_ResolveReviewThreadPayload>;
  /** Revoke the migrator role to a user for all organizations under an enterprise account. */
  revokeEnterpriseOrganizationsMigratorRole?: Maybe<Gh_RevokeEnterpriseOrganizationsMigratorRolePayload>;
  /** Revoke the migrator role from a user or a team. */
  revokeMigratorRole?: Maybe<Gh_RevokeMigratorRolePayload>;
  /** Creates or updates the identity provider for an enterprise. */
  setEnterpriseIdentityProvider?: Maybe<Gh_SetEnterpriseIdentityProviderPayload>;
  /** Set an organization level interaction limit for an organization's public repositories. */
  setOrganizationInteractionLimit?: Maybe<Gh_SetOrganizationInteractionLimitPayload>;
  /** Sets an interaction limit setting for a repository. */
  setRepositoryInteractionLimit?: Maybe<Gh_SetRepositoryInteractionLimitPayload>;
  /** Set a user level interaction limit for an user's public repositories. */
  setUserInteractionLimit?: Maybe<Gh_SetUserInteractionLimitPayload>;
  /** Start a repository migration. */
  startRepositoryMigration?: Maybe<Gh_StartRepositoryMigrationPayload>;
  /** Submits a pending pull request review. */
  submitPullRequestReview?: Maybe<Gh_SubmitPullRequestReviewPayload>;
  /** Transfer an issue to a different repository */
  transferIssue?: Maybe<Gh_TransferIssuePayload>;
  /** Unarchives a repository. */
  unarchiveRepository?: Maybe<Gh_UnarchiveRepositoryPayload>;
  /** Unfollow an organization. */
  unfollowOrganization?: Maybe<Gh_UnfollowOrganizationPayload>;
  /** Unfollow a user. */
  unfollowUser?: Maybe<Gh_UnfollowUserPayload>;
  /** Deletes a repository link from a project. */
  unlinkRepositoryFromProject?: Maybe<Gh_UnlinkRepositoryFromProjectPayload>;
  /** Unlock a lockable object */
  unlockLockable?: Maybe<Gh_UnlockLockablePayload>;
  /** Unmark a discussion comment as the chosen answer for discussions in an answerable category. */
  unmarkDiscussionCommentAsAnswer?: Maybe<Gh_UnmarkDiscussionCommentAsAnswerPayload>;
  /** Unmark a pull request file as viewed */
  unmarkFileAsViewed?: Maybe<Gh_UnmarkFileAsViewedPayload>;
  /** Unmark an issue as a duplicate of another issue. */
  unmarkIssueAsDuplicate?: Maybe<Gh_UnmarkIssueAsDuplicatePayload>;
  /** Unminimizes a comment on an Issue, Commit, Pull Request, or Gist */
  unminimizeComment?: Maybe<Gh_UnminimizeCommentPayload>;
  /** Unpin a pinned issue from a repository */
  unpinIssue?: Maybe<Gh_UnpinIssuePayload>;
  /** Marks a review thread as unresolved. */
  unresolveReviewThread?: Maybe<Gh_UnresolveReviewThreadPayload>;
  /** Create a new branch protection rule */
  updateBranchProtectionRule?: Maybe<Gh_UpdateBranchProtectionRulePayload>;
  /** Update a check run */
  updateCheckRun?: Maybe<Gh_UpdateCheckRunPayload>;
  /** Modifies the settings of an existing check suite */
  updateCheckSuitePreferences?: Maybe<Gh_UpdateCheckSuitePreferencesPayload>;
  /** Update a discussion */
  updateDiscussion?: Maybe<Gh_UpdateDiscussionPayload>;
  /** Update the contents of a comment on a Discussion */
  updateDiscussionComment?: Maybe<Gh_UpdateDiscussionCommentPayload>;
  /** Updates the role of an enterprise administrator. */
  updateEnterpriseAdministratorRole?: Maybe<Gh_UpdateEnterpriseAdministratorRolePayload>;
  /** Sets whether private repository forks are enabled for an enterprise. */
  updateEnterpriseAllowPrivateRepositoryForkingSetting?: Maybe<Gh_UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload>;
  /** Sets the base repository permission for organizations in an enterprise. */
  updateEnterpriseDefaultRepositoryPermissionSetting?: Maybe<Gh_UpdateEnterpriseDefaultRepositoryPermissionSettingPayload>;
  /** Sets whether organization members with admin permissions on a repository can change repository visibility. */
  updateEnterpriseMembersCanChangeRepositoryVisibilitySetting?: Maybe<Gh_UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload>;
  /** Sets the members can create repositories setting for an enterprise. */
  updateEnterpriseMembersCanCreateRepositoriesSetting?: Maybe<Gh_UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload>;
  /** Sets the members can delete issues setting for an enterprise. */
  updateEnterpriseMembersCanDeleteIssuesSetting?: Maybe<Gh_UpdateEnterpriseMembersCanDeleteIssuesSettingPayload>;
  /** Sets the members can delete repositories setting for an enterprise. */
  updateEnterpriseMembersCanDeleteRepositoriesSetting?: Maybe<Gh_UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload>;
  /** Sets whether members can invite collaborators are enabled for an enterprise. */
  updateEnterpriseMembersCanInviteCollaboratorsSetting?: Maybe<Gh_UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload>;
  /** Sets whether or not an organization admin can make purchases. */
  updateEnterpriseMembersCanMakePurchasesSetting?: Maybe<Gh_UpdateEnterpriseMembersCanMakePurchasesSettingPayload>;
  /** Sets the members can update protected branches setting for an enterprise. */
  updateEnterpriseMembersCanUpdateProtectedBranchesSetting?: Maybe<Gh_UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload>;
  /** Sets the members can view dependency insights for an enterprise. */
  updateEnterpriseMembersCanViewDependencyInsightsSetting?: Maybe<Gh_UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload>;
  /** Sets whether organization projects are enabled for an enterprise. */
  updateEnterpriseOrganizationProjectsSetting?: Maybe<Gh_UpdateEnterpriseOrganizationProjectsSettingPayload>;
  /** Updates the role of an enterprise owner with an organization. */
  updateEnterpriseOwnerOrganizationRole?: Maybe<Gh_UpdateEnterpriseOwnerOrganizationRolePayload>;
  /** Updates an enterprise's profile. */
  updateEnterpriseProfile?: Maybe<Gh_UpdateEnterpriseProfilePayload>;
  /** Sets whether repository projects are enabled for a enterprise. */
  updateEnterpriseRepositoryProjectsSetting?: Maybe<Gh_UpdateEnterpriseRepositoryProjectsSettingPayload>;
  /** Sets whether team discussions are enabled for an enterprise. */
  updateEnterpriseTeamDiscussionsSetting?: Maybe<Gh_UpdateEnterpriseTeamDiscussionsSettingPayload>;
  /** Sets whether two factor authentication is required for all users in an enterprise. */
  updateEnterpriseTwoFactorAuthenticationRequiredSetting?: Maybe<Gh_UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload>;
  /** Updates an environment. */
  updateEnvironment?: Maybe<Gh_UpdateEnvironmentPayload>;
  /** Sets whether an IP allow list is enabled on an owner. */
  updateIpAllowListEnabledSetting?: Maybe<Gh_UpdateIpAllowListEnabledSettingPayload>;
  /** Updates an IP allow list entry. */
  updateIpAllowListEntry?: Maybe<Gh_UpdateIpAllowListEntryPayload>;
  /** Sets whether IP allow list configuration for installed GitHub Apps is enabled on an owner. */
  updateIpAllowListForInstalledAppsEnabledSetting?: Maybe<Gh_UpdateIpAllowListForInstalledAppsEnabledSettingPayload>;
  /** Updates an Issue. */
  updateIssue?: Maybe<Gh_UpdateIssuePayload>;
  /** Updates an IssueComment object. */
  updateIssueComment?: Maybe<Gh_UpdateIssueCommentPayload>;
  /** Update the setting to restrict notifications to only verified or approved domains available to an owner. */
  updateNotificationRestrictionSetting?: Maybe<Gh_UpdateNotificationRestrictionSettingPayload>;
  /** Sets whether private repository forks are enabled for an organization. */
  updateOrganizationAllowPrivateRepositoryForkingSetting?: Maybe<Gh_UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload>;
  /** Updates an existing project. */
  updateProject?: Maybe<Gh_UpdateProjectPayload>;
  /** Updates an existing project card. */
  updateProjectCard?: Maybe<Gh_UpdateProjectCardPayload>;
  /** Updates an existing project column. */
  updateProjectColumn?: Maybe<Gh_UpdateProjectColumnPayload>;
  /** Updates a draft issue within a Project. */
  updateProjectDraftIssue?: Maybe<Gh_UpdateProjectDraftIssuePayload>;
  /** Updates an existing project (beta). */
  updateProjectNext?: Maybe<Gh_UpdateProjectNextPayload>;
  /** Updates a field of an item from a Project. */
  updateProjectNextItemField?: Maybe<Gh_UpdateProjectNextItemFieldPayload>;
  /** Update a pull request */
  updatePullRequest?: Maybe<Gh_UpdatePullRequestPayload>;
  /** Merge HEAD from upstream branch into pull request branch */
  updatePullRequestBranch?: Maybe<Gh_UpdatePullRequestBranchPayload>;
  /** Updates the body of a pull request review. */
  updatePullRequestReview?: Maybe<Gh_UpdatePullRequestReviewPayload>;
  /** Updates a pull request review comment. */
  updatePullRequestReviewComment?: Maybe<Gh_UpdatePullRequestReviewCommentPayload>;
  /** Update a Git Ref. */
  updateRef?: Maybe<Gh_UpdateRefPayload>;
  /** Update information about a repository. */
  updateRepository?: Maybe<Gh_UpdateRepositoryPayload>;
  /** Change visibility of your sponsorship and opt in or out of email updates from the maintainer. */
  updateSponsorshipPreferences?: Maybe<Gh_UpdateSponsorshipPreferencesPayload>;
  /** Updates the state for subscribable subjects. */
  updateSubscription?: Maybe<Gh_UpdateSubscriptionPayload>;
  /** Updates a team discussion. */
  updateTeamDiscussion?: Maybe<Gh_UpdateTeamDiscussionPayload>;
  /** Updates a discussion comment. */
  updateTeamDiscussionComment?: Maybe<Gh_UpdateTeamDiscussionCommentPayload>;
  /** Update team repository. */
  updateTeamsRepository?: Maybe<Gh_UpdateTeamsRepositoryPayload>;
  /** Replaces the repository's topics with the given topics. */
  updateTopics?: Maybe<Gh_UpdateTopicsPayload>;
  /** Verify that a verifiable domain has the expected DNS record. */
  verifyVerifiableDomain?: Maybe<Gh_VerifyVerifiableDomainPayload>;
};


export type Gh_MutationAbortQueuedMigrationsArgs = {
  input: Gh_AbortQueuedMigrationsInput;
};


export type Gh_MutationAcceptEnterpriseAdministratorInvitationArgs = {
  input: Gh_AcceptEnterpriseAdministratorInvitationInput;
};


export type Gh_MutationAcceptTopicSuggestionArgs = {
  input: Gh_AcceptTopicSuggestionInput;
};


export type Gh_MutationAddAssigneesToAssignableArgs = {
  input: Gh_AddAssigneesToAssignableInput;
};


export type Gh_MutationAddCommentArgs = {
  input: Gh_AddCommentInput;
};


export type Gh_MutationAddDiscussionCommentArgs = {
  input: Gh_AddDiscussionCommentInput;
};


export type Gh_MutationAddEnterpriseSupportEntitlementArgs = {
  input: Gh_AddEnterpriseSupportEntitlementInput;
};


export type Gh_MutationAddLabelsToLabelableArgs = {
  input: Gh_AddLabelsToLabelableInput;
};


export type Gh_MutationAddProjectCardArgs = {
  input: Gh_AddProjectCardInput;
};


export type Gh_MutationAddProjectColumnArgs = {
  input: Gh_AddProjectColumnInput;
};


export type Gh_MutationAddProjectDraftIssueArgs = {
  input: Gh_AddProjectDraftIssueInput;
};


export type Gh_MutationAddProjectNextItemArgs = {
  input: Gh_AddProjectNextItemInput;
};


export type Gh_MutationAddPullRequestReviewArgs = {
  input: Gh_AddPullRequestReviewInput;
};


export type Gh_MutationAddPullRequestReviewCommentArgs = {
  input: Gh_AddPullRequestReviewCommentInput;
};


export type Gh_MutationAddPullRequestReviewThreadArgs = {
  input: Gh_AddPullRequestReviewThreadInput;
};


export type Gh_MutationAddReactionArgs = {
  input: Gh_AddReactionInput;
};


export type Gh_MutationAddStarArgs = {
  input: Gh_AddStarInput;
};


export type Gh_MutationAddUpvoteArgs = {
  input: Gh_AddUpvoteInput;
};


export type Gh_MutationAddVerifiableDomainArgs = {
  input: Gh_AddVerifiableDomainInput;
};


export type Gh_MutationApproveDeploymentsArgs = {
  input: Gh_ApproveDeploymentsInput;
};


export type Gh_MutationApproveVerifiableDomainArgs = {
  input: Gh_ApproveVerifiableDomainInput;
};


export type Gh_MutationArchiveRepositoryArgs = {
  input: Gh_ArchiveRepositoryInput;
};


export type Gh_MutationCancelEnterpriseAdminInvitationArgs = {
  input: Gh_CancelEnterpriseAdminInvitationInput;
};


export type Gh_MutationCancelSponsorshipArgs = {
  input: Gh_CancelSponsorshipInput;
};


export type Gh_MutationChangeUserStatusArgs = {
  input: Gh_ChangeUserStatusInput;
};


export type Gh_MutationClearLabelsFromLabelableArgs = {
  input: Gh_ClearLabelsFromLabelableInput;
};


export type Gh_MutationCloneProjectArgs = {
  input: Gh_CloneProjectInput;
};


export type Gh_MutationCloneTemplateRepositoryArgs = {
  input: Gh_CloneTemplateRepositoryInput;
};


export type Gh_MutationCloseIssueArgs = {
  input: Gh_CloseIssueInput;
};


export type Gh_MutationClosePullRequestArgs = {
  input: Gh_ClosePullRequestInput;
};


export type Gh_MutationConvertProjectCardNoteToIssueArgs = {
  input: Gh_ConvertProjectCardNoteToIssueInput;
};


export type Gh_MutationConvertPullRequestToDraftArgs = {
  input: Gh_ConvertPullRequestToDraftInput;
};


export type Gh_MutationCreateBranchProtectionRuleArgs = {
  input: Gh_CreateBranchProtectionRuleInput;
};


export type Gh_MutationCreateCheckRunArgs = {
  input: Gh_CreateCheckRunInput;
};


export type Gh_MutationCreateCheckSuiteArgs = {
  input: Gh_CreateCheckSuiteInput;
};


export type Gh_MutationCreateCommitOnBranchArgs = {
  input: Gh_CreateCommitOnBranchInput;
};


export type Gh_MutationCreateDiscussionArgs = {
  input: Gh_CreateDiscussionInput;
};


export type Gh_MutationCreateEnterpriseOrganizationArgs = {
  input: Gh_CreateEnterpriseOrganizationInput;
};


export type Gh_MutationCreateEnvironmentArgs = {
  input: Gh_CreateEnvironmentInput;
};


export type Gh_MutationCreateIpAllowListEntryArgs = {
  input: Gh_CreateIpAllowListEntryInput;
};


export type Gh_MutationCreateIssueArgs = {
  input: Gh_CreateIssueInput;
};


export type Gh_MutationCreateMigrationSourceArgs = {
  input: Gh_CreateMigrationSourceInput;
};


export type Gh_MutationCreateProjectArgs = {
  input: Gh_CreateProjectInput;
};


export type Gh_MutationCreatePullRequestArgs = {
  input: Gh_CreatePullRequestInput;
};


export type Gh_MutationCreateRefArgs = {
  input: Gh_CreateRefInput;
};


export type Gh_MutationCreateRepositoryArgs = {
  input: Gh_CreateRepositoryInput;
};


export type Gh_MutationCreateSponsorsTierArgs = {
  input: Gh_CreateSponsorsTierInput;
};


export type Gh_MutationCreateSponsorshipArgs = {
  input: Gh_CreateSponsorshipInput;
};


export type Gh_MutationCreateTeamDiscussionArgs = {
  input: Gh_CreateTeamDiscussionInput;
};


export type Gh_MutationCreateTeamDiscussionCommentArgs = {
  input: Gh_CreateTeamDiscussionCommentInput;
};


export type Gh_MutationDeclineTopicSuggestionArgs = {
  input: Gh_DeclineTopicSuggestionInput;
};


export type Gh_MutationDeleteBranchProtectionRuleArgs = {
  input: Gh_DeleteBranchProtectionRuleInput;
};


export type Gh_MutationDeleteDeploymentArgs = {
  input: Gh_DeleteDeploymentInput;
};


export type Gh_MutationDeleteDiscussionArgs = {
  input: Gh_DeleteDiscussionInput;
};


export type Gh_MutationDeleteDiscussionCommentArgs = {
  input: Gh_DeleteDiscussionCommentInput;
};


export type Gh_MutationDeleteEnvironmentArgs = {
  input: Gh_DeleteEnvironmentInput;
};


export type Gh_MutationDeleteIpAllowListEntryArgs = {
  input: Gh_DeleteIpAllowListEntryInput;
};


export type Gh_MutationDeleteIssueArgs = {
  input: Gh_DeleteIssueInput;
};


export type Gh_MutationDeleteIssueCommentArgs = {
  input: Gh_DeleteIssueCommentInput;
};


export type Gh_MutationDeleteProjectArgs = {
  input: Gh_DeleteProjectInput;
};


export type Gh_MutationDeleteProjectCardArgs = {
  input: Gh_DeleteProjectCardInput;
};


export type Gh_MutationDeleteProjectColumnArgs = {
  input: Gh_DeleteProjectColumnInput;
};


export type Gh_MutationDeleteProjectNextItemArgs = {
  input: Gh_DeleteProjectNextItemInput;
};


export type Gh_MutationDeletePullRequestReviewArgs = {
  input: Gh_DeletePullRequestReviewInput;
};


export type Gh_MutationDeletePullRequestReviewCommentArgs = {
  input: Gh_DeletePullRequestReviewCommentInput;
};


export type Gh_MutationDeleteRefArgs = {
  input: Gh_DeleteRefInput;
};


export type Gh_MutationDeleteTeamDiscussionArgs = {
  input: Gh_DeleteTeamDiscussionInput;
};


export type Gh_MutationDeleteTeamDiscussionCommentArgs = {
  input: Gh_DeleteTeamDiscussionCommentInput;
};


export type Gh_MutationDeleteVerifiableDomainArgs = {
  input: Gh_DeleteVerifiableDomainInput;
};


export type Gh_MutationDisablePullRequestAutoMergeArgs = {
  input: Gh_DisablePullRequestAutoMergeInput;
};


export type Gh_MutationDismissPullRequestReviewArgs = {
  input: Gh_DismissPullRequestReviewInput;
};


export type Gh_MutationDismissRepositoryVulnerabilityAlertArgs = {
  input: Gh_DismissRepositoryVulnerabilityAlertInput;
};


export type Gh_MutationEnablePullRequestAutoMergeArgs = {
  input: Gh_EnablePullRequestAutoMergeInput;
};


export type Gh_MutationFollowOrganizationArgs = {
  input: Gh_FollowOrganizationInput;
};


export type Gh_MutationFollowUserArgs = {
  input: Gh_FollowUserInput;
};


export type Gh_MutationGrantEnterpriseOrganizationsMigratorRoleArgs = {
  input: Gh_GrantEnterpriseOrganizationsMigratorRoleInput;
};


export type Gh_MutationGrantMigratorRoleArgs = {
  input: Gh_GrantMigratorRoleInput;
};


export type Gh_MutationInviteEnterpriseAdminArgs = {
  input: Gh_InviteEnterpriseAdminInput;
};


export type Gh_MutationLinkRepositoryToProjectArgs = {
  input: Gh_LinkRepositoryToProjectInput;
};


export type Gh_MutationLockLockableArgs = {
  input: Gh_LockLockableInput;
};


export type Gh_MutationMarkDiscussionCommentAsAnswerArgs = {
  input: Gh_MarkDiscussionCommentAsAnswerInput;
};


export type Gh_MutationMarkFileAsViewedArgs = {
  input: Gh_MarkFileAsViewedInput;
};


export type Gh_MutationMarkPullRequestReadyForReviewArgs = {
  input: Gh_MarkPullRequestReadyForReviewInput;
};


export type Gh_MutationMergeBranchArgs = {
  input: Gh_MergeBranchInput;
};


export type Gh_MutationMergePullRequestArgs = {
  input: Gh_MergePullRequestInput;
};


export type Gh_MutationMinimizeCommentArgs = {
  input: Gh_MinimizeCommentInput;
};


export type Gh_MutationMoveProjectCardArgs = {
  input: Gh_MoveProjectCardInput;
};


export type Gh_MutationMoveProjectColumnArgs = {
  input: Gh_MoveProjectColumnInput;
};


export type Gh_MutationPinIssueArgs = {
  input: Gh_PinIssueInput;
};


export type Gh_MutationRegenerateEnterpriseIdentityProviderRecoveryCodesArgs = {
  input: Gh_RegenerateEnterpriseIdentityProviderRecoveryCodesInput;
};


export type Gh_MutationRegenerateVerifiableDomainTokenArgs = {
  input: Gh_RegenerateVerifiableDomainTokenInput;
};


export type Gh_MutationRejectDeploymentsArgs = {
  input: Gh_RejectDeploymentsInput;
};


export type Gh_MutationRemoveAssigneesFromAssignableArgs = {
  input: Gh_RemoveAssigneesFromAssignableInput;
};


export type Gh_MutationRemoveEnterpriseAdminArgs = {
  input: Gh_RemoveEnterpriseAdminInput;
};


export type Gh_MutationRemoveEnterpriseIdentityProviderArgs = {
  input: Gh_RemoveEnterpriseIdentityProviderInput;
};


export type Gh_MutationRemoveEnterpriseOrganizationArgs = {
  input: Gh_RemoveEnterpriseOrganizationInput;
};


export type Gh_MutationRemoveEnterpriseSupportEntitlementArgs = {
  input: Gh_RemoveEnterpriseSupportEntitlementInput;
};


export type Gh_MutationRemoveLabelsFromLabelableArgs = {
  input: Gh_RemoveLabelsFromLabelableInput;
};


export type Gh_MutationRemoveOutsideCollaboratorArgs = {
  input: Gh_RemoveOutsideCollaboratorInput;
};


export type Gh_MutationRemoveReactionArgs = {
  input: Gh_RemoveReactionInput;
};


export type Gh_MutationRemoveStarArgs = {
  input: Gh_RemoveStarInput;
};


export type Gh_MutationRemoveUpvoteArgs = {
  input: Gh_RemoveUpvoteInput;
};


export type Gh_MutationReopenIssueArgs = {
  input: Gh_ReopenIssueInput;
};


export type Gh_MutationReopenPullRequestArgs = {
  input: Gh_ReopenPullRequestInput;
};


export type Gh_MutationRequestReviewsArgs = {
  input: Gh_RequestReviewsInput;
};


export type Gh_MutationRerequestCheckSuiteArgs = {
  input: Gh_RerequestCheckSuiteInput;
};


export type Gh_MutationResolveReviewThreadArgs = {
  input: Gh_ResolveReviewThreadInput;
};


export type Gh_MutationRevokeEnterpriseOrganizationsMigratorRoleArgs = {
  input: Gh_RevokeEnterpriseOrganizationsMigratorRoleInput;
};


export type Gh_MutationRevokeMigratorRoleArgs = {
  input: Gh_RevokeMigratorRoleInput;
};


export type Gh_MutationSetEnterpriseIdentityProviderArgs = {
  input: Gh_SetEnterpriseIdentityProviderInput;
};


export type Gh_MutationSetOrganizationInteractionLimitArgs = {
  input: Gh_SetOrganizationInteractionLimitInput;
};


export type Gh_MutationSetRepositoryInteractionLimitArgs = {
  input: Gh_SetRepositoryInteractionLimitInput;
};


export type Gh_MutationSetUserInteractionLimitArgs = {
  input: Gh_SetUserInteractionLimitInput;
};


export type Gh_MutationStartRepositoryMigrationArgs = {
  input: Gh_StartRepositoryMigrationInput;
};


export type Gh_MutationSubmitPullRequestReviewArgs = {
  input: Gh_SubmitPullRequestReviewInput;
};


export type Gh_MutationTransferIssueArgs = {
  input: Gh_TransferIssueInput;
};


export type Gh_MutationUnarchiveRepositoryArgs = {
  input: Gh_UnarchiveRepositoryInput;
};


export type Gh_MutationUnfollowOrganizationArgs = {
  input: Gh_UnfollowOrganizationInput;
};


export type Gh_MutationUnfollowUserArgs = {
  input: Gh_UnfollowUserInput;
};


export type Gh_MutationUnlinkRepositoryFromProjectArgs = {
  input: Gh_UnlinkRepositoryFromProjectInput;
};


export type Gh_MutationUnlockLockableArgs = {
  input: Gh_UnlockLockableInput;
};


export type Gh_MutationUnmarkDiscussionCommentAsAnswerArgs = {
  input: Gh_UnmarkDiscussionCommentAsAnswerInput;
};


export type Gh_MutationUnmarkFileAsViewedArgs = {
  input: Gh_UnmarkFileAsViewedInput;
};


export type Gh_MutationUnmarkIssueAsDuplicateArgs = {
  input: Gh_UnmarkIssueAsDuplicateInput;
};


export type Gh_MutationUnminimizeCommentArgs = {
  input: Gh_UnminimizeCommentInput;
};


export type Gh_MutationUnpinIssueArgs = {
  input: Gh_UnpinIssueInput;
};


export type Gh_MutationUnresolveReviewThreadArgs = {
  input: Gh_UnresolveReviewThreadInput;
};


export type Gh_MutationUpdateBranchProtectionRuleArgs = {
  input: Gh_UpdateBranchProtectionRuleInput;
};


export type Gh_MutationUpdateCheckRunArgs = {
  input: Gh_UpdateCheckRunInput;
};


export type Gh_MutationUpdateCheckSuitePreferencesArgs = {
  input: Gh_UpdateCheckSuitePreferencesInput;
};


export type Gh_MutationUpdateDiscussionArgs = {
  input: Gh_UpdateDiscussionInput;
};


export type Gh_MutationUpdateDiscussionCommentArgs = {
  input: Gh_UpdateDiscussionCommentInput;
};


export type Gh_MutationUpdateEnterpriseAdministratorRoleArgs = {
  input: Gh_UpdateEnterpriseAdministratorRoleInput;
};


export type Gh_MutationUpdateEnterpriseAllowPrivateRepositoryForkingSettingArgs = {
  input: Gh_UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput;
};


export type Gh_MutationUpdateEnterpriseDefaultRepositoryPermissionSettingArgs = {
  input: Gh_UpdateEnterpriseDefaultRepositoryPermissionSettingInput;
};


export type Gh_MutationUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingArgs = {
  input: Gh_UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput;
};


export type Gh_MutationUpdateEnterpriseMembersCanCreateRepositoriesSettingArgs = {
  input: Gh_UpdateEnterpriseMembersCanCreateRepositoriesSettingInput;
};


export type Gh_MutationUpdateEnterpriseMembersCanDeleteIssuesSettingArgs = {
  input: Gh_UpdateEnterpriseMembersCanDeleteIssuesSettingInput;
};


export type Gh_MutationUpdateEnterpriseMembersCanDeleteRepositoriesSettingArgs = {
  input: Gh_UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput;
};


export type Gh_MutationUpdateEnterpriseMembersCanInviteCollaboratorsSettingArgs = {
  input: Gh_UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput;
};


export type Gh_MutationUpdateEnterpriseMembersCanMakePurchasesSettingArgs = {
  input: Gh_UpdateEnterpriseMembersCanMakePurchasesSettingInput;
};


export type Gh_MutationUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingArgs = {
  input: Gh_UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput;
};


export type Gh_MutationUpdateEnterpriseMembersCanViewDependencyInsightsSettingArgs = {
  input: Gh_UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput;
};


export type Gh_MutationUpdateEnterpriseOrganizationProjectsSettingArgs = {
  input: Gh_UpdateEnterpriseOrganizationProjectsSettingInput;
};


export type Gh_MutationUpdateEnterpriseOwnerOrganizationRoleArgs = {
  input: Gh_UpdateEnterpriseOwnerOrganizationRoleInput;
};


export type Gh_MutationUpdateEnterpriseProfileArgs = {
  input: Gh_UpdateEnterpriseProfileInput;
};


export type Gh_MutationUpdateEnterpriseRepositoryProjectsSettingArgs = {
  input: Gh_UpdateEnterpriseRepositoryProjectsSettingInput;
};


export type Gh_MutationUpdateEnterpriseTeamDiscussionsSettingArgs = {
  input: Gh_UpdateEnterpriseTeamDiscussionsSettingInput;
};


export type Gh_MutationUpdateEnterpriseTwoFactorAuthenticationRequiredSettingArgs = {
  input: Gh_UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput;
};


export type Gh_MutationUpdateEnvironmentArgs = {
  input: Gh_UpdateEnvironmentInput;
};


export type Gh_MutationUpdateIpAllowListEnabledSettingArgs = {
  input: Gh_UpdateIpAllowListEnabledSettingInput;
};


export type Gh_MutationUpdateIpAllowListEntryArgs = {
  input: Gh_UpdateIpAllowListEntryInput;
};


export type Gh_MutationUpdateIpAllowListForInstalledAppsEnabledSettingArgs = {
  input: Gh_UpdateIpAllowListForInstalledAppsEnabledSettingInput;
};


export type Gh_MutationUpdateIssueArgs = {
  input: Gh_UpdateIssueInput;
};


export type Gh_MutationUpdateIssueCommentArgs = {
  input: Gh_UpdateIssueCommentInput;
};


export type Gh_MutationUpdateNotificationRestrictionSettingArgs = {
  input: Gh_UpdateNotificationRestrictionSettingInput;
};


export type Gh_MutationUpdateOrganizationAllowPrivateRepositoryForkingSettingArgs = {
  input: Gh_UpdateOrganizationAllowPrivateRepositoryForkingSettingInput;
};


export type Gh_MutationUpdateProjectArgs = {
  input: Gh_UpdateProjectInput;
};


export type Gh_MutationUpdateProjectCardArgs = {
  input: Gh_UpdateProjectCardInput;
};


export type Gh_MutationUpdateProjectColumnArgs = {
  input: Gh_UpdateProjectColumnInput;
};


export type Gh_MutationUpdateProjectDraftIssueArgs = {
  input: Gh_UpdateProjectDraftIssueInput;
};


export type Gh_MutationUpdateProjectNextArgs = {
  input: Gh_UpdateProjectNextInput;
};


export type Gh_MutationUpdateProjectNextItemFieldArgs = {
  input: Gh_UpdateProjectNextItemFieldInput;
};


export type Gh_MutationUpdatePullRequestArgs = {
  input: Gh_UpdatePullRequestInput;
};


export type Gh_MutationUpdatePullRequestBranchArgs = {
  input: Gh_UpdatePullRequestBranchInput;
};


export type Gh_MutationUpdatePullRequestReviewArgs = {
  input: Gh_UpdatePullRequestReviewInput;
};


export type Gh_MutationUpdatePullRequestReviewCommentArgs = {
  input: Gh_UpdatePullRequestReviewCommentInput;
};


export type Gh_MutationUpdateRefArgs = {
  input: Gh_UpdateRefInput;
};


export type Gh_MutationUpdateRepositoryArgs = {
  input: Gh_UpdateRepositoryInput;
};


export type Gh_MutationUpdateSponsorshipPreferencesArgs = {
  input: Gh_UpdateSponsorshipPreferencesInput;
};


export type Gh_MutationUpdateSubscriptionArgs = {
  input: Gh_UpdateSubscriptionInput;
};


export type Gh_MutationUpdateTeamDiscussionArgs = {
  input: Gh_UpdateTeamDiscussionInput;
};


export type Gh_MutationUpdateTeamDiscussionCommentArgs = {
  input: Gh_UpdateTeamDiscussionCommentInput;
};


export type Gh_MutationUpdateTeamsRepositoryArgs = {
  input: Gh_UpdateTeamsRepositoryInput;
};


export type Gh_MutationUpdateTopicsArgs = {
  input: Gh_UpdateTopicsInput;
};


export type Gh_MutationVerifyVerifiableDomainArgs = {
  input: Gh_VerifyVerifiableDomainInput;
};

/** An object with an ID. */
export type Gh_Node = {
  /** ID of the object. */
  id: Scalars['ID'];
};

/** The possible values for the notification restriction setting. */
export enum Gh_NotificationRestrictionSettingValue {
  /** The setting is disabled for the owner. */
  Disabled = 'DISABLED',
  /** The setting is enabled for the owner. */
  Enabled = 'ENABLED'
}

/** An OIDC identity provider configured to provision identities for an enterprise. */
export type Gh_OidcProvider = Gh_Node & {
  __typename?: 'gh_OIDCProvider';
  /** The enterprise this identity provider belongs to. */
  enterprise?: Maybe<Gh_Enterprise>;
  /** ExternalIdentities provisioned by this identity provider. */
  externalIdentities: Gh_ExternalIdentityConnection;
  id: Scalars['ID'];
  /** The OIDC identity provider type */
  providerType: Gh_OidcProviderType;
  /** The id of the tenant this provider is attached to */
  tenantId: Scalars['String'];
};


/** An OIDC identity provider configured to provision identities for an enterprise. */
export type Gh_OidcProviderExternalIdentitiesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  login?: InputMaybe<Scalars['String']>;
  membersOnly?: InputMaybe<Scalars['Boolean']>;
  userName?: InputMaybe<Scalars['String']>;
};

/** The OIDC identity provider type */
export enum Gh_OidcProviderType {
  /** Azure Active Directory */
  Aad = 'AAD'
}

/** Metadata for an audit entry with action oauth_application.* */
export type Gh_OauthApplicationAuditEntryData = {
  /** The name of the OAuth Application. */
  oauthApplicationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the OAuth Application */
  oauthApplicationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the OAuth Application */
  oauthApplicationUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a oauth_application.create event. */
export type Gh_OauthApplicationCreateAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OauthApplicationAuditEntryData & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OauthApplicationCreateAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The application URL of the OAuth Application. */
  applicationUrl?: Maybe<Scalars['gh_URI']>;
  /** The callback URL of the OAuth Application. */
  callbackUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The name of the OAuth Application. */
  oauthApplicationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the OAuth Application */
  oauthApplicationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the OAuth Application */
  oauthApplicationUrl?: Maybe<Scalars['gh_URI']>;
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The rate limit of the OAuth Application. */
  rateLimit?: Maybe<Scalars['Int']>;
  /** The state of the OAuth Application. */
  state?: Maybe<Gh_OauthApplicationCreateAuditEntryState>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** The state of an OAuth Application when it was created. */
export enum Gh_OauthApplicationCreateAuditEntryState {
  /** The OAuth Application was active and allowed to have OAuth Accesses. */
  Active = 'ACTIVE',
  /** The OAuth Application was in the process of being deleted. */
  PendingDeletion = 'PENDING_DELETION',
  /** The OAuth Application was suspended from generating OAuth Accesses due to abuse or security concerns. */
  Suspended = 'SUSPENDED'
}

/** The corresponding operation type for the action */
export enum Gh_OperationType {
  /** An existing resource was accessed */
  Access = 'ACCESS',
  /** A resource performed an authentication event */
  Authentication = 'AUTHENTICATION',
  /** A new resource was created */
  Create = 'CREATE',
  /** An existing resource was modified */
  Modify = 'MODIFY',
  /** An existing resource was removed */
  Remove = 'REMOVE',
  /** An existing resource was restored */
  Restore = 'RESTORE',
  /** An existing resource was transferred between multiple resources */
  Transfer = 'TRANSFER'
}

/** Possible directions in which to order a list of items when provided an `orderBy` argument. */
export enum Gh_OrderDirection {
  /** Specifies an ascending order for a given `orderBy` argument. */
  Asc = 'ASC',
  /** Specifies a descending order for a given `orderBy` argument. */
  Desc = 'DESC'
}

/** Audit log entry for a org.add_billing_manager */
export type Gh_OrgAddBillingManagerAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgAddBillingManagerAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The email address used to invite a billing manager for the organization. */
  invitationEmail?: Maybe<Scalars['String']>;
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a org.add_member */
export type Gh_OrgAddMemberAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgAddMemberAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The permission level of the member added to the organization. */
  permission?: Maybe<Gh_OrgAddMemberAuditEntryPermission>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** The permissions available to members on an Organization. */
export enum Gh_OrgAddMemberAuditEntryPermission {
  /** Can read, clone, push, and add collaborators to repositories. */
  Admin = 'ADMIN',
  /** Can read and clone repositories. */
  Read = 'READ'
}

/** Audit log entry for a org.block_user */
export type Gh_OrgBlockUserAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgBlockUserAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The blocked user. */
  blockedUser?: Maybe<Gh_User>;
  /** The username of the blocked user. */
  blockedUserName?: Maybe<Scalars['String']>;
  /** The HTTP path for the blocked user. */
  blockedUserResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the blocked user. */
  blockedUserUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a org.config.disable_collaborators_only event. */
export type Gh_OrgConfigDisableCollaboratorsOnlyAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgConfigDisableCollaboratorsOnlyAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a org.config.enable_collaborators_only event. */
export type Gh_OrgConfigEnableCollaboratorsOnlyAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgConfigEnableCollaboratorsOnlyAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a org.create event. */
export type Gh_OrgCreateAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgCreateAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The billing plan for the Organization. */
  billingPlan?: Maybe<Gh_OrgCreateAuditEntryBillingPlan>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** The billing plans available for organizations. */
export enum Gh_OrgCreateAuditEntryBillingPlan {
  /** Team Plan */
  Business = 'BUSINESS',
  /** Enterprise Cloud Plan */
  BusinessPlus = 'BUSINESS_PLUS',
  /** Free Plan */
  Free = 'FREE',
  /** Tiered Per Seat Plan */
  TieredPerSeat = 'TIERED_PER_SEAT',
  /** Legacy Unlimited Plan */
  Unlimited = 'UNLIMITED'
}

/** Audit log entry for a org.disable_oauth_app_restrictions event. */
export type Gh_OrgDisableOauthAppRestrictionsAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgDisableOauthAppRestrictionsAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a org.disable_saml event. */
export type Gh_OrgDisableSamlAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgDisableSamlAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  /** The SAML provider's digest algorithm URL. */
  digestMethodUrl?: Maybe<Scalars['gh_URI']>;
  id: Scalars['ID'];
  /** The SAML provider's issuer URL. */
  issuerUrl?: Maybe<Scalars['gh_URI']>;
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The SAML provider's signature algorithm URL. */
  signatureMethodUrl?: Maybe<Scalars['gh_URI']>;
  /** The SAML provider's single sign-on URL. */
  singleSignOnUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a org.disable_two_factor_requirement event. */
export type Gh_OrgDisableTwoFactorRequirementAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgDisableTwoFactorRequirementAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a org.enable_oauth_app_restrictions event. */
export type Gh_OrgEnableOauthAppRestrictionsAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgEnableOauthAppRestrictionsAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a org.enable_saml event. */
export type Gh_OrgEnableSamlAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgEnableSamlAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  /** The SAML provider's digest algorithm URL. */
  digestMethodUrl?: Maybe<Scalars['gh_URI']>;
  id: Scalars['ID'];
  /** The SAML provider's issuer URL. */
  issuerUrl?: Maybe<Scalars['gh_URI']>;
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The SAML provider's signature algorithm URL. */
  signatureMethodUrl?: Maybe<Scalars['gh_URI']>;
  /** The SAML provider's single sign-on URL. */
  singleSignOnUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a org.enable_two_factor_requirement event. */
export type Gh_OrgEnableTwoFactorRequirementAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgEnableTwoFactorRequirementAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Ordering options for an organization's enterprise owner connections. */
export type Gh_OrgEnterpriseOwnerOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order enterprise owners by. */
  field: Gh_OrgEnterpriseOwnerOrderField;
};

/** Properties by which enterprise owners can be ordered. */
export enum Gh_OrgEnterpriseOwnerOrderField {
  /** Order enterprise owners by login. */
  Login = 'LOGIN'
}

/** Audit log entry for a org.invite_member event. */
export type Gh_OrgInviteMemberAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgInviteMemberAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  /** The email address of the organization invitation. */
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The organization invitation. */
  organizationInvitation?: Maybe<Gh_OrganizationInvitation>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a org.invite_to_business event. */
export type Gh_OrgInviteToBusinessAuditEntry = Gh_AuditEntry & Gh_EnterpriseAuditEntryData & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgInviteToBusinessAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The slug of the enterprise. */
  enterpriseSlug?: Maybe<Scalars['String']>;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: Maybe<Scalars['gh_URI']>;
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a org.oauth_app_access_approved event. */
export type Gh_OrgOauthAppAccessApprovedAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OauthApplicationAuditEntryData & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgOauthAppAccessApprovedAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The name of the OAuth Application. */
  oauthApplicationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the OAuth Application */
  oauthApplicationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the OAuth Application */
  oauthApplicationUrl?: Maybe<Scalars['gh_URI']>;
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a org.oauth_app_access_denied event. */
export type Gh_OrgOauthAppAccessDeniedAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OauthApplicationAuditEntryData & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgOauthAppAccessDeniedAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The name of the OAuth Application. */
  oauthApplicationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the OAuth Application */
  oauthApplicationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the OAuth Application */
  oauthApplicationUrl?: Maybe<Scalars['gh_URI']>;
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a org.oauth_app_access_requested event. */
export type Gh_OrgOauthAppAccessRequestedAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OauthApplicationAuditEntryData & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgOauthAppAccessRequestedAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The name of the OAuth Application. */
  oauthApplicationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the OAuth Application */
  oauthApplicationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the OAuth Application */
  oauthApplicationUrl?: Maybe<Scalars['gh_URI']>;
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a org.remove_billing_manager event. */
export type Gh_OrgRemoveBillingManagerAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgRemoveBillingManagerAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The reason for the billing manager being removed. */
  reason?: Maybe<Gh_OrgRemoveBillingManagerAuditEntryReason>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** The reason a billing manager was removed from an Organization. */
export enum Gh_OrgRemoveBillingManagerAuditEntryReason {
  /** SAML external identity missing */
  SamlExternalIdentityMissing = 'SAML_EXTERNAL_IDENTITY_MISSING',
  /** SAML SSO enforcement requires an external identity */
  SamlSsoEnforcementRequiresExternalIdentity = 'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY',
  /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */
  TwoFactorRequirementNonCompliance = 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE'
}

/** Audit log entry for a org.remove_member event. */
export type Gh_OrgRemoveMemberAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgRemoveMemberAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The types of membership the member has with the organization. */
  membershipTypes?: Maybe<Array<Gh_OrgRemoveMemberAuditEntryMembershipType>>;
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The reason for the member being removed. */
  reason?: Maybe<Gh_OrgRemoveMemberAuditEntryReason>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** The type of membership a user has with an Organization. */
export enum Gh_OrgRemoveMemberAuditEntryMembershipType {
  /** Organization administrators have full access and can change several settings, including the names of repositories that belong to the Organization and Owners team membership. In addition, organization admins can delete the organization and all of its repositories. */
  Admin = 'ADMIN',
  /** A billing manager is a user who manages the billing settings for the Organization, such as updating payment information. */
  BillingManager = 'BILLING_MANAGER',
  /** A direct member is a user that is a member of the Organization. */
  DirectMember = 'DIRECT_MEMBER',
  /** An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization. */
  OutsideCollaborator = 'OUTSIDE_COLLABORATOR',
  /** An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the Organization. */
  Unaffiliated = 'UNAFFILIATED'
}

/** The reason a member was removed from an Organization. */
export enum Gh_OrgRemoveMemberAuditEntryReason {
  /** SAML external identity missing */
  SamlExternalIdentityMissing = 'SAML_EXTERNAL_IDENTITY_MISSING',
  /** SAML SSO enforcement requires an external identity */
  SamlSsoEnforcementRequiresExternalIdentity = 'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY',
  /** User was removed from organization during account recovery */
  TwoFactorAccountRecovery = 'TWO_FACTOR_ACCOUNT_RECOVERY',
  /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */
  TwoFactorRequirementNonCompliance = 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE',
  /** User account has been deleted */
  UserAccountDeleted = 'USER_ACCOUNT_DELETED'
}

/** Audit log entry for a org.remove_outside_collaborator event. */
export type Gh_OrgRemoveOutsideCollaboratorAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgRemoveOutsideCollaboratorAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The types of membership the outside collaborator has with the organization. */
  membershipTypes?: Maybe<Array<Gh_OrgRemoveOutsideCollaboratorAuditEntryMembershipType>>;
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The reason for the outside collaborator being removed from the Organization. */
  reason?: Maybe<Gh_OrgRemoveOutsideCollaboratorAuditEntryReason>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** The type of membership a user has with an Organization. */
export enum Gh_OrgRemoveOutsideCollaboratorAuditEntryMembershipType {
  /** A billing manager is a user who manages the billing settings for the Organization, such as updating payment information. */
  BillingManager = 'BILLING_MANAGER',
  /** An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization. */
  OutsideCollaborator = 'OUTSIDE_COLLABORATOR',
  /** An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the organization. */
  Unaffiliated = 'UNAFFILIATED'
}

/** The reason an outside collaborator was removed from an Organization. */
export enum Gh_OrgRemoveOutsideCollaboratorAuditEntryReason {
  /** SAML external identity missing */
  SamlExternalIdentityMissing = 'SAML_EXTERNAL_IDENTITY_MISSING',
  /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */
  TwoFactorRequirementNonCompliance = 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE'
}

/** Audit log entry for a org.restore_member event. */
export type Gh_OrgRestoreMemberAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgRestoreMemberAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The number of custom email routings for the restored member. */
  restoredCustomEmailRoutingsCount?: Maybe<Scalars['Int']>;
  /** The number of issue assignments for the restored member. */
  restoredIssueAssignmentsCount?: Maybe<Scalars['Int']>;
  /** Restored organization membership objects. */
  restoredMemberships?: Maybe<Array<Gh_OrgRestoreMemberAuditEntryMembership>>;
  /** The number of restored memberships. */
  restoredMembershipsCount?: Maybe<Scalars['Int']>;
  /** The number of repositories of the restored member. */
  restoredRepositoriesCount?: Maybe<Scalars['Int']>;
  /** The number of starred repositories for the restored member. */
  restoredRepositoryStarsCount?: Maybe<Scalars['Int']>;
  /** The number of watched repositories for the restored member. */
  restoredRepositoryWatchesCount?: Maybe<Scalars['Int']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Types of memberships that can be restored for an Organization member. */
export type Gh_OrgRestoreMemberAuditEntryMembership = Gh_OrgRestoreMemberMembershipOrganizationAuditEntryData | Gh_OrgRestoreMemberMembershipRepositoryAuditEntryData | Gh_OrgRestoreMemberMembershipTeamAuditEntryData;

/** Metadata for an organization membership for org.restore_member actions */
export type Gh_OrgRestoreMemberMembershipOrganizationAuditEntryData = Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgRestoreMemberMembershipOrganizationAuditEntryData';
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
};

/** Metadata for a repository membership for org.restore_member actions */
export type Gh_OrgRestoreMemberMembershipRepositoryAuditEntryData = Gh_RepositoryAuditEntryData & {
  __typename?: 'gh_OrgRestoreMemberMembershipRepositoryAuditEntryData';
  /** The repository associated with the action */
  repository?: Maybe<Gh_Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars['gh_URI']>;
};

/** Metadata for a team membership for org.restore_member actions */
export type Gh_OrgRestoreMemberMembershipTeamAuditEntryData = Gh_TeamAuditEntryData & {
  __typename?: 'gh_OrgRestoreMemberMembershipTeamAuditEntryData';
  /** The team associated with the action */
  team?: Maybe<Gh_Team>;
  /** The name of the team */
  teamName?: Maybe<Scalars['String']>;
  /** The HTTP path for this team */
  teamResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for this team */
  teamUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a org.unblock_user */
export type Gh_OrgUnblockUserAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgUnblockUserAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The user being unblocked by the organization. */
  blockedUser?: Maybe<Gh_User>;
  /** The username of the blocked user. */
  blockedUserName?: Maybe<Scalars['String']>;
  /** The HTTP path for the blocked user. */
  blockedUserResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the blocked user. */
  blockedUserUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a org.update_default_repository_permission */
export type Gh_OrgUpdateDefaultRepositoryPermissionAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgUpdateDefaultRepositoryPermissionAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The new base repository permission level for the organization. */
  permission?: Maybe<Gh_OrgUpdateDefaultRepositoryPermissionAuditEntryPermission>;
  /** The former base repository permission level for the organization. */
  permissionWas?: Maybe<Gh_OrgUpdateDefaultRepositoryPermissionAuditEntryPermission>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** The default permission a repository can have in an Organization. */
export enum Gh_OrgUpdateDefaultRepositoryPermissionAuditEntryPermission {
  /** Can read, clone, push, and add collaborators to repositories. */
  Admin = 'ADMIN',
  /** No default permission value. */
  None = 'NONE',
  /** Can read and clone repositories. */
  Read = 'READ',
  /** Can read, clone and push to repositories. */
  Write = 'WRITE'
}

/** Audit log entry for a org.update_member event. */
export type Gh_OrgUpdateMemberAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgUpdateMemberAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The new member permission level for the organization. */
  permission?: Maybe<Gh_OrgUpdateMemberAuditEntryPermission>;
  /** The former member permission level for the organization. */
  permissionWas?: Maybe<Gh_OrgUpdateMemberAuditEntryPermission>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** The permissions available to members on an Organization. */
export enum Gh_OrgUpdateMemberAuditEntryPermission {
  /** Can read, clone, push, and add collaborators to repositories. */
  Admin = 'ADMIN',
  /** Can read and clone repositories. */
  Read = 'READ'
}

/** Audit log entry for a org.update_member_repository_creation_permission event. */
export type Gh_OrgUpdateMemberRepositoryCreationPermissionAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgUpdateMemberRepositoryCreationPermissionAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** Can members create repositories in the organization. */
  canCreateRepositories?: Maybe<Scalars['Boolean']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
  /** The permission for visibility level of repositories for this organization. */
  visibility?: Maybe<Gh_OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility>;
};

/** The permissions available for repository creation on an Organization. */
export enum Gh_OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility {
  /** All organization members are restricted from creating any repositories. */
  All = 'ALL',
  /** All organization members are restricted from creating internal repositories. */
  Internal = 'INTERNAL',
  /** All organization members are allowed to create any repositories. */
  None = 'NONE',
  /** All organization members are restricted from creating private repositories. */
  Private = 'PRIVATE',
  /** All organization members are restricted from creating private or internal repositories. */
  PrivateInternal = 'PRIVATE_INTERNAL',
  /** All organization members are restricted from creating public repositories. */
  Public = 'PUBLIC',
  /** All organization members are restricted from creating public or internal repositories. */
  PublicInternal = 'PUBLIC_INTERNAL',
  /** All organization members are restricted from creating public or private repositories. */
  PublicPrivate = 'PUBLIC_PRIVATE'
}

/** Audit log entry for a org.update_member_repository_invitation_permission event. */
export type Gh_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** Can outside collaborators be invited to repositories in the organization. */
  canInviteOutsideCollaboratorsToRepositories?: Maybe<Scalars['Boolean']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_Organization = Gh_Actor & Gh_MemberStatusable & Gh_Node & Gh_PackageOwner & Gh_ProfileOwner & Gh_ProjectNextOwner & Gh_ProjectOwner & Gh_ProjectV2Owner & Gh_RepositoryDiscussionAuthor & Gh_RepositoryDiscussionCommentAuthor & Gh_RepositoryOwner & Gh_Sponsorable & Gh_UniformResourceLocatable & {
  __typename?: 'gh_Organization';
  /** Determine if this repository owner has any items that can be pinned to their profile. */
  anyPinnableItems: Scalars['Boolean'];
  /** Audit log entries of the organization */
  auditLog: Gh_OrganizationAuditEntryConnection;
  /** A URL pointing to the organization's public avatar. */
  avatarUrl: Scalars['gh_URI'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The organization's public profile description. */
  description?: Maybe<Scalars['String']>;
  /** The organization's public profile description rendered to HTML. */
  descriptionHTML?: Maybe<Scalars['String']>;
  /** A list of domains owned by the organization. */
  domains?: Maybe<Gh_VerifiableDomainConnection>;
  /** The organization's public email. */
  email?: Maybe<Scalars['String']>;
  /** A list of owners of the organization's enterprise account. */
  enterpriseOwners: Gh_OrganizationEnterpriseOwnerConnection;
  /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
  estimatedNextSponsorsPayoutInCents: Scalars['Int'];
  /** True if this user/organization has a GitHub Sponsors listing. */
  hasSponsorsListing: Scalars['Boolean'];
  id: Scalars['ID'];
  /** The interaction ability settings for this organization. */
  interactionAbility?: Maybe<Gh_RepositoryInteractionAbility>;
  /** The setting value for whether the organization has an IP allow list enabled. */
  ipAllowListEnabledSetting: Gh_IpAllowListEnabledSettingValue;
  /** The IP addresses that are allowed to access resources owned by the organization. */
  ipAllowListEntries: Gh_IpAllowListEntryConnection;
  /** The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled. */
  ipAllowListForInstalledAppsEnabledSetting: Gh_IpAllowListForInstalledAppsEnabledSettingValue;
  /** Check if the given account is sponsoring this user/organization. */
  isSponsoredBy: Scalars['Boolean'];
  /** True if the viewer is sponsored by this user/organization. */
  isSponsoringViewer: Scalars['Boolean'];
  /** Whether the organization has verified its profile email and website. */
  isVerified: Scalars['Boolean'];
  /** Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. */
  itemShowcase: Gh_ProfileItemShowcase;
  /** The organization's public profile location. */
  location?: Maybe<Scalars['String']>;
  /** The organization's login name. */
  login: Scalars['String'];
  /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
  memberStatuses: Gh_UserStatusConnection;
  /** Members can fork private repositories in this organization */
  membersCanForkPrivateRepositories: Scalars['Boolean'];
  /** A list of users who are members of this organization. */
  membersWithRole: Gh_OrganizationMemberConnection;
  /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
  monthlyEstimatedSponsorsIncomeInCents: Scalars['Int'];
  /** The organization's public profile name. */
  name?: Maybe<Scalars['String']>;
  /** The HTTP path creating a new team */
  newTeamResourcePath: Scalars['gh_URI'];
  /** The HTTP URL creating a new team */
  newTeamUrl: Scalars['gh_URI'];
  /** Indicates if email notification delivery for this organization is restricted to verified or approved domains. */
  notificationDeliveryRestrictionEnabledSetting: Gh_NotificationRestrictionSettingValue;
  /** The billing email for the organization. */
  organizationBillingEmail?: Maybe<Scalars['String']>;
  /** A list of packages under the owner. */
  packages: Gh_PackageConnection;
  /** A list of users who have been invited to join this organization. */
  pendingMembers: Gh_UserConnection;
  /** A list of repositories and gists this profile owner can pin to their profile. */
  pinnableItems: Gh_PinnableItemConnection;
  /** A list of repositories and gists this profile owner has pinned to their profile */
  pinnedItems: Gh_PinnableItemConnection;
  /** Returns how many more items this profile owner can pin to their profile. */
  pinnedItemsRemaining: Scalars['Int'];
  /** Find project by number. */
  project?: Maybe<Gh_Project>;
  /** Find a project by project (beta) number. */
  projectNext?: Maybe<Gh_ProjectNext>;
  /** A list of projects under the owner. */
  projects: Gh_ProjectConnection;
  /** A list of projects (beta) under the owner. */
  projectsNext: Gh_ProjectNextConnection;
  /** The HTTP path listing organization's projects */
  projectsResourcePath: Scalars['gh_URI'];
  /** The HTTP URL listing organization's projects */
  projectsUrl: Scalars['gh_URI'];
  /** A list of repositories that the user owns. */
  repositories: Gh_RepositoryConnection;
  /** Find Repository. */
  repository?: Maybe<Gh_Repository>;
  /** Discussion comments this user has authored. */
  repositoryDiscussionComments: Gh_DiscussionCommentConnection;
  /** Discussions this user has started. */
  repositoryDiscussions: Gh_DiscussionConnection;
  /** A list of all repository migrations for this organization. */
  repositoryMigrations: Gh_RepositoryMigrationConnection;
  /** When true the organization requires all members, billing managers, and outside collaborators to enable two-factor authentication. */
  requiresTwoFactorAuthentication?: Maybe<Scalars['Boolean']>;
  /** The HTTP path for this organization. */
  resourcePath: Scalars['gh_URI'];
  /** The Organization's SAML identity providers */
  samlIdentityProvider?: Maybe<Gh_OrganizationIdentityProvider>;
  /** List of users and organizations this entity is sponsoring. */
  sponsoring: Gh_SponsorConnection;
  /** List of sponsors for this user or organization. */
  sponsors: Gh_SponsorConnection;
  /** Events involving this sponsorable, such as new sponsorships. */
  sponsorsActivities: Gh_SponsorsActivityConnection;
  /** The GitHub Sponsors listing for this user or organization. */
  sponsorsListing?: Maybe<Gh_SponsorsListing>;
  /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. */
  sponsorshipForViewerAsSponsor?: Maybe<Gh_Sponsorship>;
  /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. */
  sponsorshipForViewerAsSponsorable?: Maybe<Gh_Sponsorship>;
  /** List of sponsorship updates sent from this sponsorable to sponsors. */
  sponsorshipNewsletters: Gh_SponsorshipNewsletterConnection;
  /** This object's sponsorships as the maintainer. */
  sponsorshipsAsMaintainer: Gh_SponsorshipConnection;
  /** This object's sponsorships as the sponsor. */
  sponsorshipsAsSponsor: Gh_SponsorshipConnection;
  /** Find an organization's team by its slug. */
  team?: Maybe<Gh_Team>;
  /** A list of teams in this organization. */
  teams: Gh_TeamConnection;
  /** The HTTP path listing organization's teams */
  teamsResourcePath: Scalars['gh_URI'];
  /** The HTTP URL listing organization's teams */
  teamsUrl: Scalars['gh_URI'];
  /** The organization's Twitter username. */
  twitterUsername?: Maybe<Scalars['String']>;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The HTTP URL for this organization. */
  url: Scalars['gh_URI'];
  /** Organization is adminable by the viewer. */
  viewerCanAdminister: Scalars['Boolean'];
  /** Can the viewer pin repositories and gists to the profile? */
  viewerCanChangePinnedItems: Scalars['Boolean'];
  /** Can the current viewer create new projects on this owner. */
  viewerCanCreateProjects: Scalars['Boolean'];
  /** Viewer can create repositories on this organization */
  viewerCanCreateRepositories: Scalars['Boolean'];
  /** Viewer can create teams on this organization. */
  viewerCanCreateTeams: Scalars['Boolean'];
  /** Whether or not the viewer is able to sponsor this user/organization. */
  viewerCanSponsor: Scalars['Boolean'];
  /** Viewer is an active member of this organization. */
  viewerIsAMember: Scalars['Boolean'];
  /** True if the viewer is sponsoring this user/organization. */
  viewerIsSponsoring: Scalars['Boolean'];
  /** The organization's public profile URL. */
  websiteUrl?: Maybe<Scalars['gh_URI']>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationAnyPinnableItemsArgs = {
  type?: InputMaybe<Gh_PinnableItemType>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationAuditLogArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_AuditLogOrder>;
  query?: InputMaybe<Scalars['String']>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationAvatarUrlArgs = {
  size?: InputMaybe<Scalars['Int']>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationDomainsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  isApproved?: InputMaybe<Scalars['Boolean']>;
  isVerified?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_VerifiableDomainOrder>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationEnterpriseOwnersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_OrgEnterpriseOwnerOrder>;
  organizationRole?: InputMaybe<Gh_RoleInOrganization>;
  query?: InputMaybe<Scalars['String']>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationIpAllowListEntriesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_IpAllowListEntryOrder>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationIsSponsoredByArgs = {
  accountLogin: Scalars['String'];
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationMemberStatusesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_UserStatusOrder>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationMembersWithRoleArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationPackagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  names?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  orderBy?: InputMaybe<Gh_PackageOrder>;
  packageType?: InputMaybe<Gh_PackageType>;
  repositoryId?: InputMaybe<Scalars['ID']>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationPendingMembersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationPinnableItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  types?: InputMaybe<Array<Gh_PinnableItemType>>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationPinnedItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  types?: InputMaybe<Array<Gh_PinnableItemType>>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationProjectArgs = {
  number: Scalars['Int'];
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationProjectNextArgs = {
  number: Scalars['Int'];
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationProjectsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_ProjectOrder>;
  search?: InputMaybe<Scalars['String']>;
  states?: InputMaybe<Array<Gh_ProjectState>>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationProjectsNextArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  query?: InputMaybe<Scalars['String']>;
  sortBy?: InputMaybe<Gh_ProjectNextOrderField>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationRepositoriesArgs = {
  affiliations?: InputMaybe<Array<InputMaybe<Gh_RepositoryAffiliation>>>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  isFork?: InputMaybe<Scalars['Boolean']>;
  isLocked?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_RepositoryOrder>;
  ownerAffiliations?: InputMaybe<Array<InputMaybe<Gh_RepositoryAffiliation>>>;
  privacy?: InputMaybe<Gh_RepositoryPrivacy>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationRepositoryArgs = {
  followRenames?: InputMaybe<Scalars['Boolean']>;
  name: Scalars['String'];
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationRepositoryDiscussionCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  onlyAnswers?: InputMaybe<Scalars['Boolean']>;
  repositoryId?: InputMaybe<Scalars['ID']>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationRepositoryDiscussionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  answered?: InputMaybe<Scalars['Boolean']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_DiscussionOrder>;
  repositoryId?: InputMaybe<Scalars['ID']>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationRepositoryMigrationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_RepositoryMigrationOrder>;
  repositoryName?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Gh_MigrationState>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationSponsoringArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_SponsorOrder>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationSponsorsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_SponsorOrder>;
  tierId?: InputMaybe<Scalars['ID']>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationSponsorsActivitiesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_SponsorsActivityOrder>;
  period?: InputMaybe<Gh_SponsorsActivityPeriod>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationSponsorshipNewslettersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_SponsorshipNewsletterOrder>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationSponsorshipsAsMaintainerArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  includePrivate?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_SponsorshipOrder>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationSponsorshipsAsSponsorArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_SponsorshipOrder>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationTeamArgs = {
  slug: Scalars['String'];
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type Gh_OrganizationTeamsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  ldapMapped?: InputMaybe<Scalars['Boolean']>;
  orderBy?: InputMaybe<Gh_TeamOrder>;
  privacy?: InputMaybe<Gh_TeamPrivacy>;
  query?: InputMaybe<Scalars['String']>;
  role?: InputMaybe<Gh_TeamRole>;
  rootTeamsOnly?: InputMaybe<Scalars['Boolean']>;
  userLogins?: InputMaybe<Array<Scalars['String']>>;
};

/** An audit entry in an organization audit log. */
export type Gh_OrganizationAuditEntry = Gh_MembersCanDeleteReposClearAuditEntry | Gh_MembersCanDeleteReposDisableAuditEntry | Gh_MembersCanDeleteReposEnableAuditEntry | Gh_OauthApplicationCreateAuditEntry | Gh_OrgAddBillingManagerAuditEntry | Gh_OrgAddMemberAuditEntry | Gh_OrgBlockUserAuditEntry | Gh_OrgConfigDisableCollaboratorsOnlyAuditEntry | Gh_OrgConfigEnableCollaboratorsOnlyAuditEntry | Gh_OrgCreateAuditEntry | Gh_OrgDisableOauthAppRestrictionsAuditEntry | Gh_OrgDisableSamlAuditEntry | Gh_OrgDisableTwoFactorRequirementAuditEntry | Gh_OrgEnableOauthAppRestrictionsAuditEntry | Gh_OrgEnableSamlAuditEntry | Gh_OrgEnableTwoFactorRequirementAuditEntry | Gh_OrgInviteMemberAuditEntry | Gh_OrgInviteToBusinessAuditEntry | Gh_OrgOauthAppAccessApprovedAuditEntry | Gh_OrgOauthAppAccessDeniedAuditEntry | Gh_OrgOauthAppAccessRequestedAuditEntry | Gh_OrgRemoveBillingManagerAuditEntry | Gh_OrgRemoveMemberAuditEntry | Gh_OrgRemoveOutsideCollaboratorAuditEntry | Gh_OrgRestoreMemberAuditEntry | Gh_OrgUnblockUserAuditEntry | Gh_OrgUpdateDefaultRepositoryPermissionAuditEntry | Gh_OrgUpdateMemberAuditEntry | Gh_OrgUpdateMemberRepositoryCreationPermissionAuditEntry | Gh_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry | Gh_PrivateRepositoryForkingDisableAuditEntry | Gh_PrivateRepositoryForkingEnableAuditEntry | Gh_RepoAccessAuditEntry | Gh_RepoAddMemberAuditEntry | Gh_RepoAddTopicAuditEntry | Gh_RepoArchivedAuditEntry | Gh_RepoChangeMergeSettingAuditEntry | Gh_RepoConfigDisableAnonymousGitAccessAuditEntry | Gh_RepoConfigDisableCollaboratorsOnlyAuditEntry | Gh_RepoConfigDisableContributorsOnlyAuditEntry | Gh_RepoConfigDisableSockpuppetDisallowedAuditEntry | Gh_RepoConfigEnableAnonymousGitAccessAuditEntry | Gh_RepoConfigEnableCollaboratorsOnlyAuditEntry | Gh_RepoConfigEnableContributorsOnlyAuditEntry | Gh_RepoConfigEnableSockpuppetDisallowedAuditEntry | Gh_RepoConfigLockAnonymousGitAccessAuditEntry | Gh_RepoConfigUnlockAnonymousGitAccessAuditEntry | Gh_RepoCreateAuditEntry | Gh_RepoDestroyAuditEntry | Gh_RepoRemoveMemberAuditEntry | Gh_RepoRemoveTopicAuditEntry | Gh_RepositoryVisibilityChangeDisableAuditEntry | Gh_RepositoryVisibilityChangeEnableAuditEntry | Gh_TeamAddMemberAuditEntry | Gh_TeamAddRepositoryAuditEntry | Gh_TeamChangeParentTeamAuditEntry | Gh_TeamRemoveMemberAuditEntry | Gh_TeamRemoveRepositoryAuditEntry;

/** The connection type for OrganizationAuditEntry. */
export type Gh_OrganizationAuditEntryConnection = {
  __typename?: 'gh_OrganizationAuditEntryConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_OrganizationAuditEntryEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_OrganizationAuditEntry>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Metadata for an audit entry with action org.* */
export type Gh_OrganizationAuditEntryData = {
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
};

/** An edge in a connection. */
export type Gh_OrganizationAuditEntryEdge = {
  __typename?: 'gh_OrganizationAuditEntryEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_OrganizationAuditEntry>;
};

/** A list of organizations managed by an enterprise. */
export type Gh_OrganizationConnection = {
  __typename?: 'gh_OrganizationConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_OrganizationEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Organization>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_OrganizationEdge = {
  __typename?: 'gh_OrganizationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_Organization>;
};

/** The connection type for User. */
export type Gh_OrganizationEnterpriseOwnerConnection = {
  __typename?: 'gh_OrganizationEnterpriseOwnerConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_OrganizationEnterpriseOwnerEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_User>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An enterprise owner in the context of an organization that is part of the enterprise. */
export type Gh_OrganizationEnterpriseOwnerEdge = {
  __typename?: 'gh_OrganizationEnterpriseOwnerEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_User>;
  /** The role of the owner with respect to the organization. */
  organizationRole: Gh_RoleInOrganization;
};

/** An Identity Provider configured to provision SAML and SCIM identities for Organizations */
export type Gh_OrganizationIdentityProvider = Gh_Node & {
  __typename?: 'gh_OrganizationIdentityProvider';
  /** The digest algorithm used to sign SAML requests for the Identity Provider. */
  digestMethod?: Maybe<Scalars['gh_URI']>;
  /** External Identities provisioned by this Identity Provider */
  externalIdentities: Gh_ExternalIdentityConnection;
  id: Scalars['ID'];
  /** The x509 certificate used by the Identity Provider to sign assertions and responses. */
  idpCertificate?: Maybe<Scalars['gh_X509Certificate']>;
  /** The Issuer Entity ID for the SAML Identity Provider */
  issuer?: Maybe<Scalars['String']>;
  /** Organization this Identity Provider belongs to */
  organization?: Maybe<Gh_Organization>;
  /** The signature algorithm used to sign SAML requests for the Identity Provider. */
  signatureMethod?: Maybe<Scalars['gh_URI']>;
  /** The URL endpoint for the Identity Provider's SAML SSO. */
  ssoUrl?: Maybe<Scalars['gh_URI']>;
};


/** An Identity Provider configured to provision SAML and SCIM identities for Organizations */
export type Gh_OrganizationIdentityProviderExternalIdentitiesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  login?: InputMaybe<Scalars['String']>;
  membersOnly?: InputMaybe<Scalars['Boolean']>;
  userName?: InputMaybe<Scalars['String']>;
};

/** An Invitation for a user to an organization. */
export type Gh_OrganizationInvitation = Gh_Node & {
  __typename?: 'gh_OrganizationInvitation';
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The email address of the user invited to the organization. */
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  /** The type of invitation that was sent (e.g. email, user). */
  invitationType: Gh_OrganizationInvitationType;
  /** The user who was invited to the organization. */
  invitee?: Maybe<Gh_User>;
  /** The user who created the invitation. */
  inviter: Gh_User;
  /** The organization the invite is for */
  organization: Gh_Organization;
  /** The user's pending role in the organization (e.g. member, owner). */
  role: Gh_OrganizationInvitationRole;
};

/** The connection type for OrganizationInvitation. */
export type Gh_OrganizationInvitationConnection = {
  __typename?: 'gh_OrganizationInvitationConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_OrganizationInvitationEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_OrganizationInvitation>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_OrganizationInvitationEdge = {
  __typename?: 'gh_OrganizationInvitationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_OrganizationInvitation>;
};

/** The possible organization invitation roles. */
export enum Gh_OrganizationInvitationRole {
  /** The user is invited to be an admin of the organization. */
  Admin = 'ADMIN',
  /** The user is invited to be a billing manager of the organization. */
  BillingManager = 'BILLING_MANAGER',
  /** The user is invited to be a direct member of the organization. */
  DirectMember = 'DIRECT_MEMBER',
  /** The user's previous role will be reinstated. */
  Reinstate = 'REINSTATE'
}

/** The possible organization invitation types. */
export enum Gh_OrganizationInvitationType {
  /** The invitation was to an email address. */
  Email = 'EMAIL',
  /** The invitation was to an existing user. */
  User = 'USER'
}

/** The connection type for User. */
export type Gh_OrganizationMemberConnection = {
  __typename?: 'gh_OrganizationMemberConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_OrganizationMemberEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_User>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Represents a user within an organization. */
export type Gh_OrganizationMemberEdge = {
  __typename?: 'gh_OrganizationMemberEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer. */
  hasTwoFactorEnabled?: Maybe<Scalars['Boolean']>;
  /** The item at the end of the edge. */
  node?: Maybe<Gh_User>;
  /** The role this user has in the organization. */
  role?: Maybe<Gh_OrganizationMemberRole>;
};

/** The possible roles within an organization for its members. */
export enum Gh_OrganizationMemberRole {
  /** The user is an administrator of the organization. */
  Admin = 'ADMIN',
  /** The user is a member of the organization. */
  Member = 'MEMBER'
}

/** The possible values for the members can create repositories setting on an organization. */
export enum Gh_OrganizationMembersCanCreateRepositoriesSettingValue {
  /** Members will be able to create public and private repositories. */
  All = 'ALL',
  /** Members will not be able to create public or private repositories. */
  Disabled = 'DISABLED',
  /** Members will be able to create only internal repositories. */
  Internal = 'INTERNAL',
  /** Members will be able to create only private repositories. */
  Private = 'PRIVATE'
}

/** Ordering options for organization connections. */
export type Gh_OrganizationOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order organizations by. */
  field: Gh_OrganizationOrderField;
};

/** Properties by which organization connections can be ordered. */
export enum Gh_OrganizationOrderField {
  /** Order organizations by creation time */
  CreatedAt = 'CREATED_AT',
  /** Order organizations by login */
  Login = 'LOGIN'
}

/** An organization teams hovercard context */
export type Gh_OrganizationTeamsHovercardContext = Gh_HovercardContext & {
  __typename?: 'gh_OrganizationTeamsHovercardContext';
  /** A string describing this context */
  message: Scalars['String'];
  /** An octicon to accompany this context */
  octicon: Scalars['String'];
  /** Teams in this organization the user is a member of that are relevant */
  relevantTeams: Gh_TeamConnection;
  /** The path for the full team list for this user */
  teamsResourcePath: Scalars['gh_URI'];
  /** The URL for the full team list for this user */
  teamsUrl: Scalars['gh_URI'];
  /** The total number of teams the user is on in the organization */
  totalTeamCount: Scalars['Int'];
};


/** An organization teams hovercard context */
export type Gh_OrganizationTeamsHovercardContextRelevantTeamsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** An organization list hovercard context */
export type Gh_OrganizationsHovercardContext = Gh_HovercardContext & {
  __typename?: 'gh_OrganizationsHovercardContext';
  /** A string describing this context */
  message: Scalars['String'];
  /** An octicon to accompany this context */
  octicon: Scalars['String'];
  /** Organizations this user is a member of that are relevant */
  relevantOrganizations: Gh_OrganizationConnection;
  /** The total number of organizations this user is in */
  totalOrganizationCount: Scalars['Int'];
};


/** An organization list hovercard context */
export type Gh_OrganizationsHovercardContextRelevantOrganizationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** Information for an uploaded package. */
export type Gh_Package = Gh_Node & {
  __typename?: 'gh_Package';
  id: Scalars['ID'];
  /** Find the latest version for the package. */
  latestVersion?: Maybe<Gh_PackageVersion>;
  /** Identifies the name of the package. */
  name: Scalars['String'];
  /** Identifies the type of the package. */
  packageType: Gh_PackageType;
  /** The repository this package belongs to. */
  repository?: Maybe<Gh_Repository>;
  /** Statistics about package activity. */
  statistics?: Maybe<Gh_PackageStatistics>;
  /** Find package version by version string. */
  version?: Maybe<Gh_PackageVersion>;
  /** list of versions for this package */
  versions: Gh_PackageVersionConnection;
};


/** Information for an uploaded package. */
export type Gh_PackageVersionArgs = {
  version: Scalars['String'];
};


/** Information for an uploaded package. */
export type Gh_PackageVersionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_PackageVersionOrder>;
};

/** The connection type for Package. */
export type Gh_PackageConnection = {
  __typename?: 'gh_PackageConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_PackageEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Package>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_PackageEdge = {
  __typename?: 'gh_PackageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_Package>;
};

/** A file in a package version. */
export type Gh_PackageFile = Gh_Node & {
  __typename?: 'gh_PackageFile';
  id: Scalars['ID'];
  /** MD5 hash of the file. */
  md5?: Maybe<Scalars['String']>;
  /** Name of the file. */
  name: Scalars['String'];
  /** The package version this file belongs to. */
  packageVersion?: Maybe<Gh_PackageVersion>;
  /** SHA1 hash of the file. */
  sha1?: Maybe<Scalars['String']>;
  /** SHA256 hash of the file. */
  sha256?: Maybe<Scalars['String']>;
  /** Size of the file in bytes. */
  size?: Maybe<Scalars['Int']>;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** URL to download the asset. */
  url?: Maybe<Scalars['gh_URI']>;
};

/** The connection type for PackageFile. */
export type Gh_PackageFileConnection = {
  __typename?: 'gh_PackageFileConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_PackageFileEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_PackageFile>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_PackageFileEdge = {
  __typename?: 'gh_PackageFileEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_PackageFile>;
};

/** Ways in which lists of package files can be ordered upon return. */
export type Gh_PackageFileOrder = {
  /** The direction in which to order package files by the specified field. */
  direction?: InputMaybe<Gh_OrderDirection>;
  /** The field in which to order package files by. */
  field?: InputMaybe<Gh_PackageFileOrderField>;
};

/** Properties by which package file connections can be ordered. */
export enum Gh_PackageFileOrderField {
  /** Order package files by creation time */
  CreatedAt = 'CREATED_AT'
}

/** Ways in which lists of packages can be ordered upon return. */
export type Gh_PackageOrder = {
  /** The direction in which to order packages by the specified field. */
  direction?: InputMaybe<Gh_OrderDirection>;
  /** The field in which to order packages by. */
  field?: InputMaybe<Gh_PackageOrderField>;
};

/** Properties by which package connections can be ordered. */
export enum Gh_PackageOrderField {
  /** Order packages by creation time */
  CreatedAt = 'CREATED_AT'
}

/** Represents an owner of a package. */
export type Gh_PackageOwner = {
  id: Scalars['ID'];
  /** A list of packages under the owner. */
  packages: Gh_PackageConnection;
};


/** Represents an owner of a package. */
export type Gh_PackageOwnerPackagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  names?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  orderBy?: InputMaybe<Gh_PackageOrder>;
  packageType?: InputMaybe<Gh_PackageType>;
  repositoryId?: InputMaybe<Scalars['ID']>;
};

/** Represents a object that contains package activity statistics such as downloads. */
export type Gh_PackageStatistics = {
  __typename?: 'gh_PackageStatistics';
  /** Number of times the package was downloaded since it was created. */
  downloadsTotalCount: Scalars['Int'];
};

/** A version tag contains the mapping between a tag name and a version. */
export type Gh_PackageTag = Gh_Node & {
  __typename?: 'gh_PackageTag';
  id: Scalars['ID'];
  /** Identifies the tag name of the version. */
  name: Scalars['String'];
  /** Version that the tag is associated with. */
  version?: Maybe<Gh_PackageVersion>;
};

/** The possible types of a package. */
export enum Gh_PackageType {
  /** A debian package. */
  Debian = 'DEBIAN',
  /** A docker image. */
  Docker = 'DOCKER',
  /** A maven package. */
  Maven = 'MAVEN',
  /** An npm package. */
  Npm = 'NPM',
  /** A nuget package. */
  Nuget = 'NUGET',
  /** A python package. */
  Pypi = 'PYPI',
  /** A rubygems package. */
  Rubygems = 'RUBYGEMS'
}

/** Information about a specific package version. */
export type Gh_PackageVersion = Gh_Node & {
  __typename?: 'gh_PackageVersion';
  /** List of files associated with this package version */
  files: Gh_PackageFileConnection;
  id: Scalars['ID'];
  /** The package associated with this version. */
  package?: Maybe<Gh_Package>;
  /** The platform this version was built for. */
  platform?: Maybe<Scalars['String']>;
  /** Whether or not this version is a pre-release. */
  preRelease: Scalars['Boolean'];
  /** The README of this package version. */
  readme?: Maybe<Scalars['String']>;
  /** The release associated with this package version. */
  release?: Maybe<Gh_Release>;
  /** Statistics about package activity. */
  statistics?: Maybe<Gh_PackageVersionStatistics>;
  /** The package version summary. */
  summary?: Maybe<Scalars['String']>;
  /** The version string. */
  version: Scalars['String'];
};


/** Information about a specific package version. */
export type Gh_PackageVersionFilesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_PackageFileOrder>;
};

/** The connection type for PackageVersion. */
export type Gh_PackageVersionConnection = {
  __typename?: 'gh_PackageVersionConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_PackageVersionEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_PackageVersion>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_PackageVersionEdge = {
  __typename?: 'gh_PackageVersionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_PackageVersion>;
};

/** Ways in which lists of package versions can be ordered upon return. */
export type Gh_PackageVersionOrder = {
  /** The direction in which to order package versions by the specified field. */
  direction?: InputMaybe<Gh_OrderDirection>;
  /** The field in which to order package versions by. */
  field?: InputMaybe<Gh_PackageVersionOrderField>;
};

/** Properties by which package version connections can be ordered. */
export enum Gh_PackageVersionOrderField {
  /** Order package versions by creation time */
  CreatedAt = 'CREATED_AT'
}

/** Represents a object that contains package version activity statistics such as downloads. */
export type Gh_PackageVersionStatistics = {
  __typename?: 'gh_PackageVersionStatistics';
  /** Number of times the package was downloaded since it was created. */
  downloadsTotalCount: Scalars['Int'];
};

/** Information about pagination in a connection. */
export type Gh_PageInfo = {
  __typename?: 'gh_PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

/** The possible types of patch statuses. */
export enum Gh_PatchStatus {
  /** The file was added. Git status 'A'. */
  Added = 'ADDED',
  /** The file's type was changed. Git status 'T'. */
  Changed = 'CHANGED',
  /** The file was copied. Git status 'C'. */
  Copied = 'COPIED',
  /** The file was deleted. Git status 'D'. */
  Deleted = 'DELETED',
  /** The file's contents were changed. Git status 'M'. */
  Modified = 'MODIFIED',
  /** The file was renamed. Git status 'R'. */
  Renamed = 'RENAMED'
}

/** Types that can grant permissions on a repository to a user */
export type Gh_PermissionGranter = Gh_Organization | Gh_Repository | Gh_Team;

/** A level of permission and source for a user's access to a repository. */
export type Gh_PermissionSource = {
  __typename?: 'gh_PermissionSource';
  /** The organization the repository belongs to. */
  organization: Gh_Organization;
  /** The level of access this source has granted to the user. */
  permission: Gh_DefaultRepositoryPermissionField;
  /** The source of this permission. */
  source: Gh_PermissionGranter;
};

/** Autogenerated input type of PinIssue */
export type Gh_PinIssueInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the issue to be pinned */
  issueId: Scalars['ID'];
};

/** Autogenerated return type of PinIssue */
export type Gh_PinIssuePayload = {
  __typename?: 'gh_PinIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The issue that was pinned */
  issue?: Maybe<Gh_Issue>;
};

/** Types that can be pinned to a profile page. */
export type Gh_PinnableItem = Gh_Gist | Gh_Repository;

/** The connection type for PinnableItem. */
export type Gh_PinnableItemConnection = {
  __typename?: 'gh_PinnableItemConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_PinnableItemEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_PinnableItem>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_PinnableItemEdge = {
  __typename?: 'gh_PinnableItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_PinnableItem>;
};

/** Represents items that can be pinned to a profile page or dashboard. */
export enum Gh_PinnableItemType {
  /** A gist. */
  Gist = 'GIST',
  /** An issue. */
  Issue = 'ISSUE',
  /** An organization. */
  Organization = 'ORGANIZATION',
  /** A project. */
  Project = 'PROJECT',
  /** A pull request. */
  PullRequest = 'PULL_REQUEST',
  /** A repository. */
  Repository = 'REPOSITORY',
  /** A team. */
  Team = 'TEAM',
  /** A user. */
  User = 'USER'
}

/** A Pinned Discussion is a discussion pinned to a repository's index page. */
export type Gh_PinnedDiscussion = Gh_Node & Gh_RepositoryNode & {
  __typename?: 'gh_PinnedDiscussion';
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The discussion that was pinned. */
  discussion: Gh_Discussion;
  /** Color stops of the chosen gradient */
  gradientStopColors: Array<Scalars['String']>;
  id: Scalars['ID'];
  /** Background texture pattern */
  pattern: Gh_PinnedDiscussionPattern;
  /** The actor that pinned this discussion. */
  pinnedBy: Gh_Actor;
  /** Preconfigured background gradient option */
  preconfiguredGradient?: Maybe<Gh_PinnedDiscussionGradient>;
  /** The repository associated with this node. */
  repository: Gh_Repository;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
};

/** The connection type for PinnedDiscussion. */
export type Gh_PinnedDiscussionConnection = {
  __typename?: 'gh_PinnedDiscussionConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_PinnedDiscussionEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_PinnedDiscussion>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_PinnedDiscussionEdge = {
  __typename?: 'gh_PinnedDiscussionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_PinnedDiscussion>;
};

/** Preconfigured gradients that may be used to style discussions pinned within a repository. */
export enum Gh_PinnedDiscussionGradient {
  /** A gradient of blue to mint */
  BlueMint = 'BLUE_MINT',
  /** A gradient of blue to purple */
  BluePurple = 'BLUE_PURPLE',
  /** A gradient of pink to blue */
  PinkBlue = 'PINK_BLUE',
  /** A gradient of purple to coral */
  PurpleCoral = 'PURPLE_CORAL',
  /** A gradient of red to orange */
  RedOrange = 'RED_ORANGE'
}

/** Preconfigured background patterns that may be used to style discussions pinned within a repository. */
export enum Gh_PinnedDiscussionPattern {
  /** An upward-facing chevron pattern */
  ChevronUp = 'CHEVRON_UP',
  /** A hollow dot pattern */
  Dot = 'DOT',
  /** A solid dot pattern */
  DotFill = 'DOT_FILL',
  /** A heart pattern */
  HeartFill = 'HEART_FILL',
  /** A plus sign pattern */
  Plus = 'PLUS',
  /** A lightning bolt pattern */
  Zap = 'ZAP'
}

/** Represents a 'pinned' event on a given issue or pull request. */
export type Gh_PinnedEvent = Gh_Node & {
  __typename?: 'gh_PinnedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** Identifies the issue associated with the event. */
  issue: Gh_Issue;
};

/** A Pinned Issue is a issue pinned to a repository's index page. */
export type Gh_PinnedIssue = Gh_Node & {
  __typename?: 'gh_PinnedIssue';
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  /** The issue that was pinned. */
  issue: Gh_Issue;
  /** The actor that pinned this issue. */
  pinnedBy: Gh_Actor;
  /** The repository that this issue was pinned to. */
  repository: Gh_Repository;
};

/** The connection type for PinnedIssue. */
export type Gh_PinnedIssueConnection = {
  __typename?: 'gh_PinnedIssueConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_PinnedIssueEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_PinnedIssue>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_PinnedIssueEdge = {
  __typename?: 'gh_PinnedIssueEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_PinnedIssue>;
};

/** Audit log entry for a private_repository_forking.disable event. */
export type Gh_PrivateRepositoryForkingDisableAuditEntry = Gh_AuditEntry & Gh_EnterpriseAuditEntryData & Gh_Node & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData & {
  __typename?: 'gh_PrivateRepositoryForkingDisableAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The slug of the enterprise. */
  enterpriseSlug?: Maybe<Scalars['String']>;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: Maybe<Scalars['gh_URI']>;
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The repository associated with the action */
  repository?: Maybe<Gh_Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a private_repository_forking.enable event. */
export type Gh_PrivateRepositoryForkingEnableAuditEntry = Gh_AuditEntry & Gh_EnterpriseAuditEntryData & Gh_Node & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData & {
  __typename?: 'gh_PrivateRepositoryForkingEnableAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The slug of the enterprise. */
  enterpriseSlug?: Maybe<Scalars['String']>;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: Maybe<Scalars['gh_URI']>;
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The repository associated with the action */
  repository?: Maybe<Gh_Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** A curatable list of repositories relating to a repository owner, which defaults to showing the most popular repositories they own. */
export type Gh_ProfileItemShowcase = {
  __typename?: 'gh_ProfileItemShowcase';
  /** Whether or not the owner has pinned any repositories or gists. */
  hasPinnedItems: Scalars['Boolean'];
  /** The repositories and gists in the showcase. If the profile owner has any pinned items, those will be returned. Otherwise, the profile owner's popular repositories will be returned. */
  items: Gh_PinnableItemConnection;
};


/** A curatable list of repositories relating to a repository owner, which defaults to showing the most popular repositories they own. */
export type Gh_ProfileItemShowcaseItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** Represents any entity on GitHub that has a profile page. */
export type Gh_ProfileOwner = {
  /** Determine if this repository owner has any items that can be pinned to their profile. */
  anyPinnableItems: Scalars['Boolean'];
  /** The public profile email. */
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  /** Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. */
  itemShowcase: Gh_ProfileItemShowcase;
  /** The public profile location. */
  location?: Maybe<Scalars['String']>;
  /** The username used to login. */
  login: Scalars['String'];
  /** The public profile name. */
  name?: Maybe<Scalars['String']>;
  /** A list of repositories and gists this profile owner can pin to their profile. */
  pinnableItems: Gh_PinnableItemConnection;
  /** A list of repositories and gists this profile owner has pinned to their profile */
  pinnedItems: Gh_PinnableItemConnection;
  /** Returns how many more items this profile owner can pin to their profile. */
  pinnedItemsRemaining: Scalars['Int'];
  /** Can the viewer pin repositories and gists to the profile? */
  viewerCanChangePinnedItems: Scalars['Boolean'];
  /** The public profile website URL. */
  websiteUrl?: Maybe<Scalars['gh_URI']>;
};


/** Represents any entity on GitHub that has a profile page. */
export type Gh_ProfileOwnerAnyPinnableItemsArgs = {
  type?: InputMaybe<Gh_PinnableItemType>;
};


/** Represents any entity on GitHub that has a profile page. */
export type Gh_ProfileOwnerPinnableItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  types?: InputMaybe<Array<Gh_PinnableItemType>>;
};


/** Represents any entity on GitHub that has a profile page. */
export type Gh_ProfileOwnerPinnedItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  types?: InputMaybe<Array<Gh_PinnableItemType>>;
};

/** Projects manage issues, pull requests and notes within a project owner. */
export type Gh_Project = Gh_Closable & Gh_Node & Gh_Updatable & {
  __typename?: 'gh_Project';
  /** The project's description body. */
  body?: Maybe<Scalars['String']>;
  /** The projects description body rendered to HTML. */
  bodyHTML: Scalars['gh_HTML'];
  /** `true` if the object is closed (definition of closed may depend on type) */
  closed: Scalars['Boolean'];
  /** Identifies the date and time when the object was closed. */
  closedAt?: Maybe<Scalars['gh_DateTime']>;
  /** List of columns in the project */
  columns: Gh_ProjectColumnConnection;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The actor who originally created the project. */
  creator?: Maybe<Gh_Actor>;
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  /** The project's name. */
  name: Scalars['String'];
  /** The project's number. */
  number: Scalars['Int'];
  /** The project's owner. Currently limited to repositories, organizations, and users. */
  owner: Gh_ProjectOwner;
  /** List of pending cards in this project */
  pendingCards: Gh_ProjectCardConnection;
  /** Project progress details. */
  progress: Gh_ProjectProgress;
  /** The HTTP path for this project */
  resourcePath: Scalars['gh_URI'];
  /** Whether the project is open or closed. */
  state: Gh_ProjectState;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The HTTP URL for this project */
  url: Scalars['gh_URI'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
};


/** Projects manage issues, pull requests and notes within a project owner. */
export type Gh_ProjectColumnsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** Projects manage issues, pull requests and notes within a project owner. */
export type Gh_ProjectPendingCardsArgs = {
  after?: InputMaybe<Scalars['String']>;
  archivedStates?: InputMaybe<Array<InputMaybe<Gh_ProjectCardArchivedState>>>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** A card in a project. */
export type Gh_ProjectCard = Gh_Node & {
  __typename?: 'gh_ProjectCard';
  /**
   * The project column this card is associated under. A card may only belong to one
   * project column at a time. The column field will be null if the card is created
   * in a pending state and has yet to be associated with a column. Once cards are
   * associated with a column, they will not become pending in the future.
   *
   */
  column?: Maybe<Gh_ProjectColumn>;
  /** The card content item */
  content?: Maybe<Gh_ProjectCardItem>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The actor who created this card */
  creator?: Maybe<Gh_Actor>;
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  /** Whether the card is archived */
  isArchived: Scalars['Boolean'];
  /** The card note */
  note?: Maybe<Scalars['String']>;
  /** The project that contains this card. */
  project: Gh_Project;
  /** The HTTP path for this card */
  resourcePath: Scalars['gh_URI'];
  /** The state of ProjectCard */
  state?: Maybe<Gh_ProjectCardState>;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The HTTP URL for this card */
  url: Scalars['gh_URI'];
};

/** The possible archived states of a project card. */
export enum Gh_ProjectCardArchivedState {
  /** A project card that is archived */
  Archived = 'ARCHIVED',
  /** A project card that is not archived */
  NotArchived = 'NOT_ARCHIVED'
}

/** The connection type for ProjectCard. */
export type Gh_ProjectCardConnection = {
  __typename?: 'gh_ProjectCardConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_ProjectCardEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_ProjectCard>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_ProjectCardEdge = {
  __typename?: 'gh_ProjectCardEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_ProjectCard>;
};

/** Types that can be inside Project Cards. */
export type Gh_ProjectCardItem = Gh_Issue | Gh_PullRequest;

/** Various content states of a ProjectCard */
export enum Gh_ProjectCardState {
  /** The card has content only. */
  ContentOnly = 'CONTENT_ONLY',
  /** The card has a note only. */
  NoteOnly = 'NOTE_ONLY',
  /** The card is redacted. */
  Redacted = 'REDACTED'
}

/** A column inside a project. */
export type Gh_ProjectColumn = Gh_Node & {
  __typename?: 'gh_ProjectColumn';
  /** List of cards in the column */
  cards: Gh_ProjectCardConnection;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  /** The project column's name. */
  name: Scalars['String'];
  /** The project that contains this column. */
  project: Gh_Project;
  /** The semantic purpose of the column */
  purpose?: Maybe<Gh_ProjectColumnPurpose>;
  /** The HTTP path for this project column */
  resourcePath: Scalars['gh_URI'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The HTTP URL for this project column */
  url: Scalars['gh_URI'];
};


/** A column inside a project. */
export type Gh_ProjectColumnCardsArgs = {
  after?: InputMaybe<Scalars['String']>;
  archivedStates?: InputMaybe<Array<InputMaybe<Gh_ProjectCardArchivedState>>>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for ProjectColumn. */
export type Gh_ProjectColumnConnection = {
  __typename?: 'gh_ProjectColumnConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_ProjectColumnEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_ProjectColumn>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_ProjectColumnEdge = {
  __typename?: 'gh_ProjectColumnEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_ProjectColumn>;
};

/** The semantic purpose of the column - todo, in progress, or done. */
export enum Gh_ProjectColumnPurpose {
  /** The column contains cards which are complete */
  Done = 'DONE',
  /** The column contains cards which are currently being worked on */
  InProgress = 'IN_PROGRESS',
  /** The column contains cards still to be worked on */
  Todo = 'TODO'
}

/** A list of projects associated with the owner. */
export type Gh_ProjectConnection = {
  __typename?: 'gh_ProjectConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_ProjectEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Project>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_ProjectEdge = {
  __typename?: 'gh_ProjectEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_Project>;
};

/** The type of a project item. */
export enum Gh_ProjectItemType {
  /** Draft Issue */
  DraftIssue = 'DRAFT_ISSUE',
  /** Issue */
  Issue = 'ISSUE',
  /** Pull Request */
  PullRequest = 'PULL_REQUEST',
  /** Redacted Item */
  Redacted = 'REDACTED'
}

/** New projects that manage issues, pull requests and drafts using tables and boards. */
export type Gh_ProjectNext = Gh_Closable & Gh_Node & Gh_Updatable & {
  __typename?: 'gh_ProjectNext';
  /** Returns true if the project is closed. */
  closed: Scalars['Boolean'];
  /** Identifies the date and time when the object was closed. */
  closedAt?: Maybe<Scalars['gh_DateTime']>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The actor who originally created the project. */
  creator?: Maybe<Gh_Actor>;
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The project's description. */
  description?: Maybe<Scalars['String']>;
  /** List of fields in the project */
  fields: Gh_ProjectNextFieldConnection;
  id: Scalars['ID'];
  /** List of items in the project */
  items: Gh_ProjectNextItemConnection;
  /** The project's number. */
  number: Scalars['Int'];
  /** The project's owner. Currently limited to organizations and users. */
  owner: Gh_ProjectNextOwner;
  /** Returns true if the project is public. */
  public: Scalars['Boolean'];
  /** The repositories the project is linked to. */
  repositories: Gh_RepositoryConnection;
  /** The HTTP path for this project */
  resourcePath: Scalars['gh_URI'];
  /** The project's short description. */
  shortDescription?: Maybe<Scalars['String']>;
  /** The project's name. */
  title?: Maybe<Scalars['String']>;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The HTTP URL for this project */
  url: Scalars['gh_URI'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
  /** List of views in the project */
  views: Gh_ProjectViewConnection;
};


/** New projects that manage issues, pull requests and drafts using tables and boards. */
export type Gh_ProjectNextFieldsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** New projects that manage issues, pull requests and drafts using tables and boards. */
export type Gh_ProjectNextItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** New projects that manage issues, pull requests and drafts using tables and boards. */
export type Gh_ProjectNextRepositoriesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** New projects that manage issues, pull requests and drafts using tables and boards. */
export type Gh_ProjectNextViewsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for ProjectNext. */
export type Gh_ProjectNextConnection = {
  __typename?: 'gh_ProjectNextConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_ProjectNextEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_ProjectNext>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_ProjectNextEdge = {
  __typename?: 'gh_ProjectNextEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_ProjectNext>;
};

/** A field inside a project. */
export type Gh_ProjectNextField = Gh_Node & Gh_ProjectNextFieldCommon & {
  __typename?: 'gh_ProjectNextField';
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The field's type. */
  dataType: Gh_ProjectNextFieldType;
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  /** The project field's name. */
  name: Scalars['String'];
  /** The project that contains this field. */
  project: Gh_ProjectNext;
  /** The field's settings. */
  settings?: Maybe<Scalars['String']>;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
};

/** Common fields across different field types */
export type Gh_ProjectNextFieldCommon = {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The field's type. */
  dataType: Gh_ProjectNextFieldType;
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  /** The project field's name. */
  name: Scalars['String'];
  /** The project that contains this field. */
  project: Gh_ProjectNext;
  /** The field's settings. */
  settings?: Maybe<Scalars['String']>;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
};

/** The connection type for ProjectNextField. */
export type Gh_ProjectNextFieldConnection = {
  __typename?: 'gh_ProjectNextFieldConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_ProjectNextFieldEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_ProjectNextField>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_ProjectNextFieldEdge = {
  __typename?: 'gh_ProjectNextFieldEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_ProjectNextField>;
};

/** The type of a project next field. */
export enum Gh_ProjectNextFieldType {
  /** Assignees */
  Assignees = 'ASSIGNEES',
  /** Date */
  Date = 'DATE',
  /** Iteration */
  Iteration = 'ITERATION',
  /** Labels */
  Labels = 'LABELS',
  /** Linked Pull Requests */
  LinkedPullRequests = 'LINKED_PULL_REQUESTS',
  /** Milestone */
  Milestone = 'MILESTONE',
  /** Number */
  Number = 'NUMBER',
  /** Repository */
  Repository = 'REPOSITORY',
  /** Reviewers */
  Reviewers = 'REVIEWERS',
  /** Single Select */
  SingleSelect = 'SINGLE_SELECT',
  /** Text */
  Text = 'TEXT',
  /** Title */
  Title = 'TITLE',
  /** Tracks */
  Tracks = 'TRACKS'
}

/** An item within a new Project. */
export type Gh_ProjectNextItem = Gh_Node & {
  __typename?: 'gh_ProjectNextItem';
  /** The content of the referenced draft issue, issue, or pull request */
  content?: Maybe<Gh_ProjectNextItemContent>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The actor who created the item. */
  creator?: Maybe<Gh_Actor>;
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** List of field values */
  fieldValues: Gh_ProjectNextItemFieldValueConnection;
  id: Scalars['ID'];
  /** Whether the item is archived. */
  isArchived: Scalars['Boolean'];
  /** The project that contains this item. */
  project: Gh_ProjectNext;
  /** The title of the item */
  title?: Maybe<Scalars['String']>;
  /** The type of the item. */
  type: Gh_ProjectItemType;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
};


/** An item within a new Project. */
export type Gh_ProjectNextItemFieldValuesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for ProjectNextItem. */
export type Gh_ProjectNextItemConnection = {
  __typename?: 'gh_ProjectNextItemConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_ProjectNextItemEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_ProjectNextItem>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Types that can be inside Project Items. */
export type Gh_ProjectNextItemContent = Gh_DraftIssue | Gh_Issue | Gh_PullRequest;

/** An edge in a connection. */
export type Gh_ProjectNextItemEdge = {
  __typename?: 'gh_ProjectNextItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_ProjectNextItem>;
};

/** An value of a field in an item of a new Project. */
export type Gh_ProjectNextItemFieldValue = Gh_Node & {
  __typename?: 'gh_ProjectNextItemFieldValue';
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The actor who created the item. */
  creator?: Maybe<Gh_Actor>;
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  /** The project field that contains this value. */
  projectField: Gh_ProjectNextField;
  /** The project item that contains this value. */
  projectItem: Gh_ProjectNextItem;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The value of a field */
  value?: Maybe<Scalars['String']>;
};

/** The connection type for ProjectNextItemFieldValue. */
export type Gh_ProjectNextItemFieldValueConnection = {
  __typename?: 'gh_ProjectNextItemFieldValueConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_ProjectNextItemFieldValueEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_ProjectNextItemFieldValue>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_ProjectNextItemFieldValueEdge = {
  __typename?: 'gh_ProjectNextItemFieldValueEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_ProjectNextItemFieldValue>;
};

/** Properties by which the return project can be ordered. */
export enum Gh_ProjectNextOrderField {
  /** The project's date and time of creation */
  CreatedAt = 'CREATED_AT',
  /** The project's number */
  Number = 'NUMBER',
  /** The project's title */
  Title = 'TITLE',
  /** The project's date and time of update */
  UpdatedAt = 'UPDATED_AT'
}

/** Represents an owner of a project (beta). */
export type Gh_ProjectNextOwner = {
  id: Scalars['ID'];
  /** Find a project by project (beta) number. */
  projectNext?: Maybe<Gh_ProjectNext>;
  /** A list of projects (beta) under the owner. */
  projectsNext: Gh_ProjectNextConnection;
};


/** Represents an owner of a project (beta). */
export type Gh_ProjectNextOwnerProjectNextArgs = {
  number: Scalars['Int'];
};


/** Represents an owner of a project (beta). */
export type Gh_ProjectNextOwnerProjectsNextArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  query?: InputMaybe<Scalars['String']>;
  sortBy?: InputMaybe<Gh_ProjectNextOrderField>;
};

/** Ways in which lists of projects can be ordered upon return. */
export type Gh_ProjectOrder = {
  /** The direction in which to order projects by the specified field. */
  direction: Gh_OrderDirection;
  /** The field in which to order projects by. */
  field: Gh_ProjectOrderField;
};

/** Properties by which project connections can be ordered. */
export enum Gh_ProjectOrderField {
  /** Order projects by creation time */
  CreatedAt = 'CREATED_AT',
  /** Order projects by name */
  Name = 'NAME',
  /** Order projects by update time */
  UpdatedAt = 'UPDATED_AT'
}

/** Represents an owner of a Project. */
export type Gh_ProjectOwner = {
  id: Scalars['ID'];
  /** Find project by number. */
  project?: Maybe<Gh_Project>;
  /** A list of projects under the owner. */
  projects: Gh_ProjectConnection;
  /** The HTTP path listing owners projects */
  projectsResourcePath: Scalars['gh_URI'];
  /** The HTTP URL listing owners projects */
  projectsUrl: Scalars['gh_URI'];
  /** Can the current viewer create new projects on this owner. */
  viewerCanCreateProjects: Scalars['Boolean'];
};


/** Represents an owner of a Project. */
export type Gh_ProjectOwnerProjectArgs = {
  number: Scalars['Int'];
};


/** Represents an owner of a Project. */
export type Gh_ProjectOwnerProjectsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_ProjectOrder>;
  search?: InputMaybe<Scalars['String']>;
  states?: InputMaybe<Array<Gh_ProjectState>>;
};

/** Project progress stats. */
export type Gh_ProjectProgress = {
  __typename?: 'gh_ProjectProgress';
  /** The number of done cards. */
  doneCount: Scalars['Int'];
  /** The percentage of done cards. */
  donePercentage: Scalars['Float'];
  /** Whether progress tracking is enabled and cards with purpose exist for this project */
  enabled: Scalars['Boolean'];
  /** The number of in-progress cards. */
  inProgressCount: Scalars['Int'];
  /** The percentage of in-progress cards. */
  inProgressPercentage: Scalars['Float'];
  /** The number of to do cards. */
  todoCount: Scalars['Int'];
  /** The percentage of to do cards. */
  todoPercentage: Scalars['Float'];
};

/** State of the project; either 'open' or 'closed' */
export enum Gh_ProjectState {
  /** The project is closed. */
  Closed = 'CLOSED',
  /** The project is open. */
  Open = 'OPEN'
}

/** GitHub-provided templates for Projects */
export enum Gh_ProjectTemplate {
  /** Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns. */
  AutomatedKanbanV2 = 'AUTOMATED_KANBAN_V2',
  /** Create a board with triggers to automatically move cards across columns with review automation. */
  AutomatedReviewsKanban = 'AUTOMATED_REVIEWS_KANBAN',
  /** Create a board with columns for To do, In progress and Done. */
  BasicKanban = 'BASIC_KANBAN',
  /** Create a board to triage and prioritize bugs with To do, priority, and Done columns. */
  BugTriage = 'BUG_TRIAGE'
}

/** Represents an owner of a project (beta). */
export type Gh_ProjectV2Owner = {
  id: Scalars['ID'];
};

/** A view within a Project. */
export type Gh_ProjectView = Gh_Node & {
  __typename?: 'gh_ProjectView';
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The project view's filter. */
  filter?: Maybe<Scalars['String']>;
  /** The view's group-by field. */
  groupBy?: Maybe<Array<Scalars['Int']>>;
  id: Scalars['ID'];
  /** The view's filtered items. */
  items: Gh_ProjectNextItemConnection;
  /** The project view's layout. */
  layout: Gh_ProjectViewLayout;
  /** The project view's name. */
  name: Scalars['String'];
  /** The project view's number. */
  number: Scalars['Int'];
  /** The project that contains this view. */
  project: Gh_ProjectNext;
  /** The view's sort-by config. */
  sortBy?: Maybe<Array<Gh_SortBy>>;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The view's vertical-group-by field. */
  verticalGroupBy?: Maybe<Array<Scalars['Int']>>;
  /** The view's visible fields. */
  visibleFields?: Maybe<Array<Scalars['Int']>>;
};


/** A view within a Project. */
export type Gh_ProjectViewItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for ProjectView. */
export type Gh_ProjectViewConnection = {
  __typename?: 'gh_ProjectViewConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_ProjectViewEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_ProjectView>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_ProjectViewEdge = {
  __typename?: 'gh_ProjectViewEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_ProjectView>;
};

/** The layout of a project view. */
export enum Gh_ProjectViewLayout {
  /** Board layout */
  BoardLayout = 'BOARD_LAYOUT',
  /** Table layout */
  TableLayout = 'TABLE_LAYOUT'
}

/** A user's public key. */
export type Gh_PublicKey = Gh_Node & {
  __typename?: 'gh_PublicKey';
  /** The last time this authorization was used to perform an action. Values will be null for keys not owned by the user. */
  accessedAt?: Maybe<Scalars['gh_DateTime']>;
  /** Identifies the date and time when the key was created. Keys created before March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user. */
  createdAt?: Maybe<Scalars['gh_DateTime']>;
  /** The fingerprint for this PublicKey. */
  fingerprint: Scalars['String'];
  id: Scalars['ID'];
  /** Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user. */
  isReadOnly?: Maybe<Scalars['Boolean']>;
  /** The public key string. */
  key: Scalars['String'];
  /** Identifies the date and time when the key was updated. Keys created before March 5th, 2014 may have inaccurate values. Values will be null for keys not owned by the user. */
  updatedAt?: Maybe<Scalars['gh_DateTime']>;
};

/** The connection type for PublicKey. */
export type Gh_PublicKeyConnection = {
  __typename?: 'gh_PublicKeyConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_PublicKeyEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_PublicKey>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_PublicKeyEdge = {
  __typename?: 'gh_PublicKeyEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_PublicKey>;
};

/** A repository pull request. */
export type Gh_PullRequest = Gh_Assignable & Gh_Closable & Gh_Comment & Gh_Labelable & Gh_Lockable & Gh_Node & Gh_ProjectNextOwner & Gh_ProjectV2Owner & Gh_Reactable & Gh_RepositoryNode & Gh_Subscribable & Gh_UniformResourceLocatable & Gh_Updatable & Gh_UpdatableComment & {
  __typename?: 'gh_PullRequest';
  /** Reason that the conversation was locked. */
  activeLockReason?: Maybe<Gh_LockReason>;
  /** The number of additions in this pull request. */
  additions: Scalars['Int'];
  /** A list of Users assigned to this object. */
  assignees: Gh_UserConnection;
  /** The actor who authored the comment. */
  author?: Maybe<Gh_Actor>;
  /** Author's association with the subject of the comment. */
  authorAssociation: Gh_CommentAuthorAssociation;
  /** Returns the auto-merge request object if one exists for this pull request. */
  autoMergeRequest?: Maybe<Gh_AutoMergeRequest>;
  /** Identifies the base Ref associated with the pull request. */
  baseRef?: Maybe<Gh_Ref>;
  /** Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted. */
  baseRefName: Scalars['String'];
  /** Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted. */
  baseRefOid: Scalars['gh_GitObjectID'];
  /** The repository associated with this pull request's base Ref. */
  baseRepository?: Maybe<Gh_Repository>;
  /** The body as Markdown. */
  body: Scalars['String'];
  /** The body rendered to HTML. */
  bodyHTML: Scalars['gh_HTML'];
  /** The body rendered to text. */
  bodyText: Scalars['String'];
  /** The number of changed files in this pull request. */
  changedFiles: Scalars['Int'];
  /** The HTTP path for the checks of this pull request. */
  checksResourcePath: Scalars['gh_URI'];
  /** The HTTP URL for the checks of this pull request. */
  checksUrl: Scalars['gh_URI'];
  /** `true` if the pull request is closed */
  closed: Scalars['Boolean'];
  /** Identifies the date and time when the object was closed. */
  closedAt?: Maybe<Scalars['gh_DateTime']>;
  /** List of issues that were may be closed by this pull request */
  closingIssuesReferences?: Maybe<Gh_IssueConnection>;
  /** A list of comments associated with the pull request. */
  comments: Gh_IssueCommentConnection;
  /** A list of commits present in this pull request's head branch not present in the base branch. */
  commits: Gh_PullRequestCommitConnection;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Check if this comment was created via an email reply. */
  createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The number of deletions in this pull request. */
  deletions: Scalars['Int'];
  /** The actor who edited this pull request's body. */
  editor?: Maybe<Gh_Actor>;
  /** Lists the files changed within this pull request. */
  files?: Maybe<Gh_PullRequestChangedFileConnection>;
  /** Identifies the head Ref associated with the pull request. */
  headRef?: Maybe<Gh_Ref>;
  /** Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted. */
  headRefName: Scalars['String'];
  /** Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted. */
  headRefOid: Scalars['gh_GitObjectID'];
  /** The repository associated with this pull request's head Ref. */
  headRepository?: Maybe<Gh_Repository>;
  /** The owner of the repository associated with this pull request's head Ref. */
  headRepositoryOwner?: Maybe<Gh_RepositoryOwner>;
  /** The hovercard information for this issue */
  hovercard: Gh_Hovercard;
  id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: Scalars['Boolean'];
  /** The head and base repositories are different. */
  isCrossRepository: Scalars['Boolean'];
  /** Identifies if the pull request is a draft. */
  isDraft: Scalars['Boolean'];
  /** Is this pull request read by the viewer */
  isReadByViewer?: Maybe<Scalars['Boolean']>;
  /** A list of labels associated with the object. */
  labels?: Maybe<Gh_LabelConnection>;
  /** The moment the editor made the last edit */
  lastEditedAt?: Maybe<Scalars['gh_DateTime']>;
  /** A list of latest reviews per user associated with the pull request. */
  latestOpinionatedReviews?: Maybe<Gh_PullRequestReviewConnection>;
  /** A list of latest reviews per user associated with the pull request that are not also pending review. */
  latestReviews?: Maybe<Gh_PullRequestReviewConnection>;
  /** `true` if the pull request is locked */
  locked: Scalars['Boolean'];
  /** Indicates whether maintainers can modify the pull request. */
  maintainerCanModify: Scalars['Boolean'];
  /** The commit that was created when this pull request was merged. */
  mergeCommit?: Maybe<Gh_Commit>;
  /** Whether or not the pull request can be merged based on the existence of merge conflicts. */
  mergeable: Gh_MergeableState;
  /** Whether or not the pull request was merged. */
  merged: Scalars['Boolean'];
  /** The date and time that the pull request was merged. */
  mergedAt?: Maybe<Scalars['gh_DateTime']>;
  /** The actor who merged the pull request. */
  mergedBy?: Maybe<Gh_Actor>;
  /** Identifies the milestone associated with the pull request. */
  milestone?: Maybe<Gh_Milestone>;
  /** Identifies the pull request number. */
  number: Scalars['Int'];
  /** A list of Users that are participating in the Pull Request conversation. */
  participants: Gh_UserConnection;
  /** The permalink to the pull request. */
  permalink: Scalars['gh_URI'];
  /** The commit that GitHub automatically generated to test if this pull request could be merged. This field will not return a value if the pull request is merged, or if the test merge commit is still being generated. See the `mergeable` field for more details on the mergeability of the pull request. */
  potentialMergeCommit?: Maybe<Gh_Commit>;
  /** List of project cards associated with this pull request. */
  projectCards: Gh_ProjectCardConnection;
  /** Find a project by project (beta) number. */
  projectNext?: Maybe<Gh_ProjectNext>;
  /** List of project (beta) items associated with this pull request. */
  projectNextItems: Gh_ProjectNextItemConnection;
  /** A list of projects (beta) under the owner. */
  projectsNext: Gh_ProjectNextConnection;
  /** Identifies when the comment was published at. */
  publishedAt?: Maybe<Scalars['gh_DateTime']>;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: Maybe<Array<Gh_ReactionGroup>>;
  /** A list of Reactions left on the Issue. */
  reactions: Gh_ReactionConnection;
  /** The repository associated with this node. */
  repository: Gh_Repository;
  /** The HTTP path for this pull request. */
  resourcePath: Scalars['gh_URI'];
  /** The HTTP path for reverting this pull request. */
  revertResourcePath: Scalars['gh_URI'];
  /** The HTTP URL for reverting this pull request. */
  revertUrl: Scalars['gh_URI'];
  /** The current status of this pull request with respect to code review. */
  reviewDecision?: Maybe<Gh_PullRequestReviewDecision>;
  /** A list of review requests associated with the pull request. */
  reviewRequests?: Maybe<Gh_ReviewRequestConnection>;
  /** The list of all review threads for this pull request. */
  reviewThreads: Gh_PullRequestReviewThreadConnection;
  /** A list of reviews associated with the pull request. */
  reviews?: Maybe<Gh_PullRequestReviewConnection>;
  /** Identifies the state of the pull request. */
  state: Gh_PullRequestState;
  /** A list of reviewer suggestions based on commit history and past review comments. */
  suggestedReviewers: Array<Maybe<Gh_SuggestedReviewer>>;
  /** A list of events, comments, commits, etc. associated with the pull request. */
  timeline: Gh_PullRequestTimelineConnection;
  /** A list of events, comments, commits, etc. associated with the pull request. */
  timelineItems: Gh_PullRequestTimelineItemsConnection;
  /** Identifies the pull request title. */
  title: Scalars['String'];
  /** Identifies the pull request title rendered to HTML. */
  titleHTML: Scalars['gh_HTML'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The HTTP URL for this pull request. */
  url: Scalars['gh_URI'];
  /** A list of edits to this content. */
  userContentEdits?: Maybe<Gh_UserContentEditConnection>;
  /** Whether or not the viewer can apply suggestion. */
  viewerCanApplySuggestion: Scalars['Boolean'];
  /** Check if the viewer can restore the deleted head ref. */
  viewerCanDeleteHeadRef: Scalars['Boolean'];
  /** Whether or not the viewer can disable auto-merge */
  viewerCanDisableAutoMerge: Scalars['Boolean'];
  /** Whether or not the viewer can enable auto-merge */
  viewerCanEnableAutoMerge: Scalars['Boolean'];
  /** Indicates whether the viewer can bypass branch protections and merge the pull request immediately */
  viewerCanMergeAsAdmin: Scalars['Boolean'];
  /** Can user react to this subject */
  viewerCanReact: Scalars['Boolean'];
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: Array<Gh_CommentCannotUpdateReason>;
  /** Did the viewer author this comment. */
  viewerDidAuthor: Scalars['Boolean'];
  /** The latest review given from the viewer. */
  viewerLatestReview?: Maybe<Gh_PullRequestReview>;
  /** The person who has requested the viewer for review on this pull request. */
  viewerLatestReviewRequest?: Maybe<Gh_ReviewRequest>;
  /** The merge body text for the viewer and method. */
  viewerMergeBodyText: Scalars['String'];
  /** The merge headline text for the viewer and method. */
  viewerMergeHeadlineText: Scalars['String'];
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: Maybe<Gh_SubscriptionState>;
};


/** A repository pull request. */
export type Gh_PullRequestAssigneesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A repository pull request. */
export type Gh_PullRequestClosingIssuesReferencesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_IssueOrder>;
  userLinkedOnly?: InputMaybe<Scalars['Boolean']>;
};


/** A repository pull request. */
export type Gh_PullRequestCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_IssueCommentOrder>;
};


/** A repository pull request. */
export type Gh_PullRequestCommitsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A repository pull request. */
export type Gh_PullRequestFilesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A repository pull request. */
export type Gh_PullRequestHovercardArgs = {
  includeNotificationContexts?: InputMaybe<Scalars['Boolean']>;
};


/** A repository pull request. */
export type Gh_PullRequestLabelsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_LabelOrder>;
};


/** A repository pull request. */
export type Gh_PullRequestLatestOpinionatedReviewsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  writersOnly?: InputMaybe<Scalars['Boolean']>;
};


/** A repository pull request. */
export type Gh_PullRequestLatestReviewsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A repository pull request. */
export type Gh_PullRequestParticipantsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A repository pull request. */
export type Gh_PullRequestProjectCardsArgs = {
  after?: InputMaybe<Scalars['String']>;
  archivedStates?: InputMaybe<Array<InputMaybe<Gh_ProjectCardArchivedState>>>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A repository pull request. */
export type Gh_PullRequestProjectNextArgs = {
  number: Scalars['Int'];
};


/** A repository pull request. */
export type Gh_PullRequestProjectNextItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  includeArchived?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A repository pull request. */
export type Gh_PullRequestProjectsNextArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  query?: InputMaybe<Scalars['String']>;
  sortBy?: InputMaybe<Gh_ProjectNextOrderField>;
};


/** A repository pull request. */
export type Gh_PullRequestReactionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Gh_ReactionContent>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_ReactionOrder>;
};


/** A repository pull request. */
export type Gh_PullRequestReviewRequestsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A repository pull request. */
export type Gh_PullRequestReviewThreadsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A repository pull request. */
export type Gh_PullRequestReviewsArgs = {
  after?: InputMaybe<Scalars['String']>;
  author?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  states?: InputMaybe<Array<Gh_PullRequestReviewState>>;
};


/** A repository pull request. */
export type Gh_PullRequestTimelineArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  since?: InputMaybe<Scalars['gh_DateTime']>;
};


/** A repository pull request. */
export type Gh_PullRequestTimelineItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  itemTypes?: InputMaybe<Array<Gh_PullRequestTimelineItemsItemType>>;
  last?: InputMaybe<Scalars['Int']>;
  since?: InputMaybe<Scalars['gh_DateTime']>;
  skip?: InputMaybe<Scalars['Int']>;
};


/** A repository pull request. */
export type Gh_PullRequestUserContentEditsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A repository pull request. */
export type Gh_PullRequestViewerMergeBodyTextArgs = {
  mergeType?: InputMaybe<Gh_PullRequestMergeMethod>;
};


/** A repository pull request. */
export type Gh_PullRequestViewerMergeHeadlineTextArgs = {
  mergeType?: InputMaybe<Gh_PullRequestMergeMethod>;
};

/** A file changed in a pull request. */
export type Gh_PullRequestChangedFile = {
  __typename?: 'gh_PullRequestChangedFile';
  /** The number of additions to the file. */
  additions: Scalars['Int'];
  /** How the file was changed in this PullRequest */
  changeType: Gh_PatchStatus;
  /** The number of deletions to the file. */
  deletions: Scalars['Int'];
  /** The path of the file. */
  path: Scalars['String'];
  /** The state of the file for the viewer. */
  viewerViewedState: Gh_FileViewedState;
};

/** The connection type for PullRequestChangedFile. */
export type Gh_PullRequestChangedFileConnection = {
  __typename?: 'gh_PullRequestChangedFileConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_PullRequestChangedFileEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_PullRequestChangedFile>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_PullRequestChangedFileEdge = {
  __typename?: 'gh_PullRequestChangedFileEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_PullRequestChangedFile>;
};

/** Represents a Git commit part of a pull request. */
export type Gh_PullRequestCommit = Gh_Node & Gh_UniformResourceLocatable & {
  __typename?: 'gh_PullRequestCommit';
  /** The Git commit object */
  commit: Gh_Commit;
  id: Scalars['ID'];
  /** The pull request this commit belongs to */
  pullRequest: Gh_PullRequest;
  /** The HTTP path for this pull request commit */
  resourcePath: Scalars['gh_URI'];
  /** The HTTP URL for this pull request commit */
  url: Scalars['gh_URI'];
};

/** Represents a commit comment thread part of a pull request. */
export type Gh_PullRequestCommitCommentThread = Gh_Node & Gh_RepositoryNode & {
  __typename?: 'gh_PullRequestCommitCommentThread';
  /** The comments that exist in this thread. */
  comments: Gh_CommitCommentConnection;
  /** The commit the comments were made on. */
  commit: Gh_Commit;
  id: Scalars['ID'];
  /** The file the comments were made on. */
  path?: Maybe<Scalars['String']>;
  /** The position in the diff for the commit that the comment was made on. */
  position?: Maybe<Scalars['Int']>;
  /** The pull request this commit comment thread belongs to */
  pullRequest: Gh_PullRequest;
  /** The repository associated with this node. */
  repository: Gh_Repository;
};


/** Represents a commit comment thread part of a pull request. */
export type Gh_PullRequestCommitCommentThreadCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for PullRequestCommit. */
export type Gh_PullRequestCommitConnection = {
  __typename?: 'gh_PullRequestCommitConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_PullRequestCommitEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_PullRequestCommit>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_PullRequestCommitEdge = {
  __typename?: 'gh_PullRequestCommitEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_PullRequestCommit>;
};

/** The connection type for PullRequest. */
export type Gh_PullRequestConnection = {
  __typename?: 'gh_PullRequestConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_PullRequestEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_PullRequest>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** This aggregates pull requests opened by a user within one repository. */
export type Gh_PullRequestContributionsByRepository = {
  __typename?: 'gh_PullRequestContributionsByRepository';
  /** The pull request contributions. */
  contributions: Gh_CreatedPullRequestContributionConnection;
  /** The repository in which the pull requests were opened. */
  repository: Gh_Repository;
};


/** This aggregates pull requests opened by a user within one repository. */
export type Gh_PullRequestContributionsByRepositoryContributionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_ContributionOrder>;
};

/** An edge in a connection. */
export type Gh_PullRequestEdge = {
  __typename?: 'gh_PullRequestEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_PullRequest>;
};

/** Represents available types of methods to use when merging a pull request. */
export enum Gh_PullRequestMergeMethod {
  /** Add all commits from the head branch to the base branch with a merge commit. */
  Merge = 'MERGE',
  /** Add all commits from the head branch onto the base branch individually. */
  Rebase = 'REBASE',
  /** Combine all commits from the head branch into a single commit in the base branch. */
  Squash = 'SQUASH'
}

/** Ways in which lists of issues can be ordered upon return. */
export type Gh_PullRequestOrder = {
  /** The direction in which to order pull requests by the specified field. */
  direction: Gh_OrderDirection;
  /** The field in which to order pull requests by. */
  field: Gh_PullRequestOrderField;
};

/** Properties by which pull_requests connections can be ordered. */
export enum Gh_PullRequestOrderField {
  /** Order pull_requests by creation time */
  CreatedAt = 'CREATED_AT',
  /** Order pull_requests by update time */
  UpdatedAt = 'UPDATED_AT'
}

/** A review object for a given pull request. */
export type Gh_PullRequestReview = Gh_Comment & Gh_Deletable & Gh_Node & Gh_Reactable & Gh_RepositoryNode & Gh_Updatable & Gh_UpdatableComment & {
  __typename?: 'gh_PullRequestReview';
  /** The actor who authored the comment. */
  author?: Maybe<Gh_Actor>;
  /** Author's association with the subject of the comment. */
  authorAssociation: Gh_CommentAuthorAssociation;
  /** Indicates whether the author of this review has push access to the repository. */
  authorCanPushToRepository: Scalars['Boolean'];
  /** Identifies the pull request review body. */
  body: Scalars['String'];
  /** The body rendered to HTML. */
  bodyHTML: Scalars['gh_HTML'];
  /** The body of this review rendered as plain text. */
  bodyText: Scalars['String'];
  /** A list of review comments for the current pull request review. */
  comments: Gh_PullRequestReviewCommentConnection;
  /** Identifies the commit associated with this pull request review. */
  commit?: Maybe<Gh_Commit>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Check if this comment was created via an email reply. */
  createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The actor who edited the comment. */
  editor?: Maybe<Gh_Actor>;
  id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: Scalars['Boolean'];
  /** The moment the editor made the last edit */
  lastEditedAt?: Maybe<Scalars['gh_DateTime']>;
  /** A list of teams that this review was made on behalf of. */
  onBehalfOf: Gh_TeamConnection;
  /** Identifies when the comment was published at. */
  publishedAt?: Maybe<Scalars['gh_DateTime']>;
  /** Identifies the pull request associated with this pull request review. */
  pullRequest: Gh_PullRequest;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: Maybe<Array<Gh_ReactionGroup>>;
  /** A list of Reactions left on the Issue. */
  reactions: Gh_ReactionConnection;
  /** The repository associated with this node. */
  repository: Gh_Repository;
  /** The HTTP path permalink for this PullRequestReview. */
  resourcePath: Scalars['gh_URI'];
  /** Identifies the current state of the pull request review. */
  state: Gh_PullRequestReviewState;
  /** Identifies when the Pull Request Review was submitted */
  submittedAt?: Maybe<Scalars['gh_DateTime']>;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The HTTP URL permalink for this PullRequestReview. */
  url: Scalars['gh_URI'];
  /** A list of edits to this content. */
  userContentEdits?: Maybe<Gh_UserContentEditConnection>;
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: Scalars['Boolean'];
  /** Can user react to this subject */
  viewerCanReact: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: Array<Gh_CommentCannotUpdateReason>;
  /** Did the viewer author this comment. */
  viewerDidAuthor: Scalars['Boolean'];
};


/** A review object for a given pull request. */
export type Gh_PullRequestReviewCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A review object for a given pull request. */
export type Gh_PullRequestReviewOnBehalfOfArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A review object for a given pull request. */
export type Gh_PullRequestReviewReactionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Gh_ReactionContent>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_ReactionOrder>;
};


/** A review object for a given pull request. */
export type Gh_PullRequestReviewUserContentEditsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** A review comment associated with a given repository pull request. */
export type Gh_PullRequestReviewComment = Gh_Comment & Gh_Deletable & Gh_Minimizable & Gh_Node & Gh_Reactable & Gh_RepositoryNode & Gh_Updatable & Gh_UpdatableComment & {
  __typename?: 'gh_PullRequestReviewComment';
  /** The actor who authored the comment. */
  author?: Maybe<Gh_Actor>;
  /** Author's association with the subject of the comment. */
  authorAssociation: Gh_CommentAuthorAssociation;
  /** The comment body of this review comment. */
  body: Scalars['String'];
  /** The body rendered to HTML. */
  bodyHTML: Scalars['gh_HTML'];
  /** The comment body of this review comment rendered as plain text. */
  bodyText: Scalars['String'];
  /** Identifies the commit associated with the comment. */
  commit?: Maybe<Gh_Commit>;
  /** Identifies when the comment was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Check if this comment was created via an email reply. */
  createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The diff hunk to which the comment applies. */
  diffHunk: Scalars['String'];
  /** Identifies when the comment was created in a draft state. */
  draftedAt: Scalars['gh_DateTime'];
  /** The actor who edited the comment. */
  editor?: Maybe<Gh_Actor>;
  id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: Scalars['Boolean'];
  /** Returns whether or not a comment has been minimized. */
  isMinimized: Scalars['Boolean'];
  /** The moment the editor made the last edit */
  lastEditedAt?: Maybe<Scalars['gh_DateTime']>;
  /** Returns why the comment was minimized. */
  minimizedReason?: Maybe<Scalars['String']>;
  /** Identifies the original commit associated with the comment. */
  originalCommit?: Maybe<Gh_Commit>;
  /** The original line index in the diff to which the comment applies. */
  originalPosition: Scalars['Int'];
  /** Identifies when the comment body is outdated */
  outdated: Scalars['Boolean'];
  /** The path to which the comment applies. */
  path: Scalars['String'];
  /** The line index in the diff to which the comment applies. */
  position?: Maybe<Scalars['Int']>;
  /** Identifies when the comment was published at. */
  publishedAt?: Maybe<Scalars['gh_DateTime']>;
  /** The pull request associated with this review comment. */
  pullRequest: Gh_PullRequest;
  /** The pull request review associated with this review comment. */
  pullRequestReview?: Maybe<Gh_PullRequestReview>;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: Maybe<Array<Gh_ReactionGroup>>;
  /** A list of Reactions left on the Issue. */
  reactions: Gh_ReactionConnection;
  /** The comment this is a reply to. */
  replyTo?: Maybe<Gh_PullRequestReviewComment>;
  /** The repository associated with this node. */
  repository: Gh_Repository;
  /** The HTTP path permalink for this review comment. */
  resourcePath: Scalars['gh_URI'];
  /** Identifies the state of the comment. */
  state: Gh_PullRequestReviewCommentState;
  /** Identifies when the comment was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The HTTP URL permalink for this review comment. */
  url: Scalars['gh_URI'];
  /** A list of edits to this content. */
  userContentEdits?: Maybe<Gh_UserContentEditConnection>;
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: Scalars['Boolean'];
  /** Check if the current viewer can minimize this object. */
  viewerCanMinimize: Scalars['Boolean'];
  /** Can user react to this subject */
  viewerCanReact: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: Array<Gh_CommentCannotUpdateReason>;
  /** Did the viewer author this comment. */
  viewerDidAuthor: Scalars['Boolean'];
};


/** A review comment associated with a given repository pull request. */
export type Gh_PullRequestReviewCommentReactionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Gh_ReactionContent>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_ReactionOrder>;
};


/** A review comment associated with a given repository pull request. */
export type Gh_PullRequestReviewCommentUserContentEditsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for PullRequestReviewComment. */
export type Gh_PullRequestReviewCommentConnection = {
  __typename?: 'gh_PullRequestReviewCommentConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_PullRequestReviewCommentEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_PullRequestReviewComment>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_PullRequestReviewCommentEdge = {
  __typename?: 'gh_PullRequestReviewCommentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_PullRequestReviewComment>;
};

/** The possible states of a pull request review comment. */
export enum Gh_PullRequestReviewCommentState {
  /** A comment that is part of a pending review */
  Pending = 'PENDING',
  /** A comment that is part of a submitted review */
  Submitted = 'SUBMITTED'
}

/** The connection type for PullRequestReview. */
export type Gh_PullRequestReviewConnection = {
  __typename?: 'gh_PullRequestReviewConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_PullRequestReviewEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_PullRequestReview>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** This aggregates pull request reviews made by a user within one repository. */
export type Gh_PullRequestReviewContributionsByRepository = {
  __typename?: 'gh_PullRequestReviewContributionsByRepository';
  /** The pull request review contributions. */
  contributions: Gh_CreatedPullRequestReviewContributionConnection;
  /** The repository in which the pull request reviews were made. */
  repository: Gh_Repository;
};


/** This aggregates pull request reviews made by a user within one repository. */
export type Gh_PullRequestReviewContributionsByRepositoryContributionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_ContributionOrder>;
};

/** The review status of a pull request. */
export enum Gh_PullRequestReviewDecision {
  /** The pull request has received an approving review. */
  Approved = 'APPROVED',
  /** Changes have been requested on the pull request. */
  ChangesRequested = 'CHANGES_REQUESTED',
  /** A review is required before the pull request can be merged. */
  ReviewRequired = 'REVIEW_REQUIRED'
}

/** An edge in a connection. */
export type Gh_PullRequestReviewEdge = {
  __typename?: 'gh_PullRequestReviewEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_PullRequestReview>;
};

/** The possible events to perform on a pull request review. */
export enum Gh_PullRequestReviewEvent {
  /** Submit feedback and approve merging these changes. */
  Approve = 'APPROVE',
  /** Submit general feedback without explicit approval. */
  Comment = 'COMMENT',
  /** Dismiss review so it now longer effects merging. */
  Dismiss = 'DISMISS',
  /** Submit feedback that must be addressed before merging. */
  RequestChanges = 'REQUEST_CHANGES'
}

/** The possible states of a pull request review. */
export enum Gh_PullRequestReviewState {
  /** A review allowing the pull request to merge. */
  Approved = 'APPROVED',
  /** A review blocking the pull request from merging. */
  ChangesRequested = 'CHANGES_REQUESTED',
  /** An informational review. */
  Commented = 'COMMENTED',
  /** A review that has been dismissed. */
  Dismissed = 'DISMISSED',
  /** A review that has not yet been submitted. */
  Pending = 'PENDING'
}

/** A threaded list of comments for a given pull request. */
export type Gh_PullRequestReviewThread = Gh_Node & {
  __typename?: 'gh_PullRequestReviewThread';
  /** A list of pull request comments associated with the thread. */
  comments: Gh_PullRequestReviewCommentConnection;
  /** The side of the diff on which this thread was placed. */
  diffSide: Gh_DiffSide;
  id: Scalars['ID'];
  /** Whether or not the thread has been collapsed (resolved) */
  isCollapsed: Scalars['Boolean'];
  /** Indicates whether this thread was outdated by newer changes. */
  isOutdated: Scalars['Boolean'];
  /** Whether this thread has been resolved */
  isResolved: Scalars['Boolean'];
  /** The line in the file to which this thread refers */
  line?: Maybe<Scalars['Int']>;
  /** The original line in the file to which this thread refers. */
  originalLine?: Maybe<Scalars['Int']>;
  /** The original start line in the file to which this thread refers (multi-line only). */
  originalStartLine?: Maybe<Scalars['Int']>;
  /** Identifies the file path of this thread. */
  path: Scalars['String'];
  /** Identifies the pull request associated with this thread. */
  pullRequest: Gh_PullRequest;
  /** Identifies the repository associated with this thread. */
  repository: Gh_Repository;
  /** The user who resolved this thread */
  resolvedBy?: Maybe<Gh_User>;
  /** The side of the diff that the first line of the thread starts on (multi-line only) */
  startDiffSide?: Maybe<Gh_DiffSide>;
  /** The start line in the file to which this thread refers (multi-line only) */
  startLine?: Maybe<Scalars['Int']>;
  /** Indicates whether the current viewer can reply to this thread. */
  viewerCanReply: Scalars['Boolean'];
  /** Whether or not the viewer can resolve this thread */
  viewerCanResolve: Scalars['Boolean'];
  /** Whether or not the viewer can unresolve this thread */
  viewerCanUnresolve: Scalars['Boolean'];
};


/** A threaded list of comments for a given pull request. */
export type Gh_PullRequestReviewThreadCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
};

/** Review comment threads for a pull request review. */
export type Gh_PullRequestReviewThreadConnection = {
  __typename?: 'gh_PullRequestReviewThreadConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_PullRequestReviewThreadEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_PullRequestReviewThread>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_PullRequestReviewThreadEdge = {
  __typename?: 'gh_PullRequestReviewThreadEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_PullRequestReviewThread>;
};

/** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */
export type Gh_PullRequestRevisionMarker = {
  __typename?: 'gh_PullRequestRevisionMarker';
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The last commit the viewer has seen. */
  lastSeenCommit: Gh_Commit;
  /** The pull request to which the marker belongs. */
  pullRequest: Gh_PullRequest;
};

/** The possible states of a pull request. */
export enum Gh_PullRequestState {
  /** A pull request that has been closed without being merged. */
  Closed = 'CLOSED',
  /** A pull request that has been closed by being merged. */
  Merged = 'MERGED',
  /** A pull request that is still open. */
  Open = 'OPEN'
}

/** A repository pull request template. */
export type Gh_PullRequestTemplate = {
  __typename?: 'gh_PullRequestTemplate';
  /** The body of the template */
  body?: Maybe<Scalars['String']>;
  /** The filename of the template */
  filename?: Maybe<Scalars['String']>;
  /** The repository the template belongs to */
  repository: Gh_Repository;
};

/** The connection type for PullRequestTimelineItem. */
export type Gh_PullRequestTimelineConnection = {
  __typename?: 'gh_PullRequestTimelineConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_PullRequestTimelineItemEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_PullRequestTimelineItem>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An item in a pull request timeline */
export type Gh_PullRequestTimelineItem = Gh_AssignedEvent | Gh_BaseRefDeletedEvent | Gh_BaseRefForcePushedEvent | Gh_ClosedEvent | Gh_Commit | Gh_CommitCommentThread | Gh_CrossReferencedEvent | Gh_DemilestonedEvent | Gh_DeployedEvent | Gh_DeploymentEnvironmentChangedEvent | Gh_HeadRefDeletedEvent | Gh_HeadRefForcePushedEvent | Gh_HeadRefRestoredEvent | Gh_IssueComment | Gh_LabeledEvent | Gh_LockedEvent | Gh_MergedEvent | Gh_MilestonedEvent | Gh_PullRequestReview | Gh_PullRequestReviewComment | Gh_PullRequestReviewThread | Gh_ReferencedEvent | Gh_RenamedTitleEvent | Gh_ReopenedEvent | Gh_ReviewDismissedEvent | Gh_ReviewRequestRemovedEvent | Gh_ReviewRequestedEvent | Gh_SubscribedEvent | Gh_UnassignedEvent | Gh_UnlabeledEvent | Gh_UnlockedEvent | Gh_UnsubscribedEvent | Gh_UserBlockedEvent;

/** An edge in a connection. */
export type Gh_PullRequestTimelineItemEdge = {
  __typename?: 'gh_PullRequestTimelineItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_PullRequestTimelineItem>;
};

/** An item in a pull request timeline */
export type Gh_PullRequestTimelineItems = Gh_AddedToProjectEvent | Gh_AssignedEvent | Gh_AutoMergeDisabledEvent | Gh_AutoMergeEnabledEvent | Gh_AutoRebaseEnabledEvent | Gh_AutoSquashEnabledEvent | Gh_AutomaticBaseChangeFailedEvent | Gh_AutomaticBaseChangeSucceededEvent | Gh_BaseRefChangedEvent | Gh_BaseRefDeletedEvent | Gh_BaseRefForcePushedEvent | Gh_ClosedEvent | Gh_CommentDeletedEvent | Gh_ConnectedEvent | Gh_ConvertToDraftEvent | Gh_ConvertedNoteToIssueEvent | Gh_ConvertedToDiscussionEvent | Gh_CrossReferencedEvent | Gh_DemilestonedEvent | Gh_DeployedEvent | Gh_DeploymentEnvironmentChangedEvent | Gh_DisconnectedEvent | Gh_HeadRefDeletedEvent | Gh_HeadRefForcePushedEvent | Gh_HeadRefRestoredEvent | Gh_IssueComment | Gh_LabeledEvent | Gh_LockedEvent | Gh_MarkedAsDuplicateEvent | Gh_MentionedEvent | Gh_MergedEvent | Gh_MilestonedEvent | Gh_MovedColumnsInProjectEvent | Gh_PinnedEvent | Gh_PullRequestCommit | Gh_PullRequestCommitCommentThread | Gh_PullRequestReview | Gh_PullRequestReviewThread | Gh_PullRequestRevisionMarker | Gh_ReadyForReviewEvent | Gh_ReferencedEvent | Gh_RemovedFromProjectEvent | Gh_RenamedTitleEvent | Gh_ReopenedEvent | Gh_ReviewDismissedEvent | Gh_ReviewRequestRemovedEvent | Gh_ReviewRequestedEvent | Gh_SubscribedEvent | Gh_TransferredEvent | Gh_UnassignedEvent | Gh_UnlabeledEvent | Gh_UnlockedEvent | Gh_UnmarkedAsDuplicateEvent | Gh_UnpinnedEvent | Gh_UnsubscribedEvent | Gh_UserBlockedEvent;

/** The connection type for PullRequestTimelineItems. */
export type Gh_PullRequestTimelineItemsConnection = {
  __typename?: 'gh_PullRequestTimelineItemsConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_PullRequestTimelineItemsEdge>>>;
  /** Identifies the count of items after applying `before` and `after` filters. */
  filteredCount: Scalars['Int'];
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_PullRequestTimelineItems>>>;
  /** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
  pageCount: Scalars['Int'];
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  /** Identifies the date and time when the timeline was last updated. */
  updatedAt: Scalars['gh_DateTime'];
};

/** An edge in a connection. */
export type Gh_PullRequestTimelineItemsEdge = {
  __typename?: 'gh_PullRequestTimelineItemsEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_PullRequestTimelineItems>;
};

/** The possible item types found in a timeline. */
export enum Gh_PullRequestTimelineItemsItemType {
  /** Represents an 'added_to_merge_queue' event on a given pull request. */
  AddedToMergeQueueEvent = 'ADDED_TO_MERGE_QUEUE_EVENT',
  /** Represents a 'added_to_project' event on a given issue or pull request. */
  AddedToProjectEvent = 'ADDED_TO_PROJECT_EVENT',
  /** Represents an 'assigned' event on any assignable object. */
  AssignedEvent = 'ASSIGNED_EVENT',
  /** Represents a 'automatic_base_change_failed' event on a given pull request. */
  AutomaticBaseChangeFailedEvent = 'AUTOMATIC_BASE_CHANGE_FAILED_EVENT',
  /** Represents a 'automatic_base_change_succeeded' event on a given pull request. */
  AutomaticBaseChangeSucceededEvent = 'AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT',
  /** Represents a 'auto_merge_disabled' event on a given pull request. */
  AutoMergeDisabledEvent = 'AUTO_MERGE_DISABLED_EVENT',
  /** Represents a 'auto_merge_enabled' event on a given pull request. */
  AutoMergeEnabledEvent = 'AUTO_MERGE_ENABLED_EVENT',
  /** Represents a 'auto_rebase_enabled' event on a given pull request. */
  AutoRebaseEnabledEvent = 'AUTO_REBASE_ENABLED_EVENT',
  /** Represents a 'auto_squash_enabled' event on a given pull request. */
  AutoSquashEnabledEvent = 'AUTO_SQUASH_ENABLED_EVENT',
  /** Represents a 'base_ref_changed' event on a given issue or pull request. */
  BaseRefChangedEvent = 'BASE_REF_CHANGED_EVENT',
  /** Represents a 'base_ref_deleted' event on a given pull request. */
  BaseRefDeletedEvent = 'BASE_REF_DELETED_EVENT',
  /** Represents a 'base_ref_force_pushed' event on a given pull request. */
  BaseRefForcePushedEvent = 'BASE_REF_FORCE_PUSHED_EVENT',
  /** Represents a 'closed' event on any `Closable`. */
  ClosedEvent = 'CLOSED_EVENT',
  /** Represents a 'comment_deleted' event on a given issue or pull request. */
  CommentDeletedEvent = 'COMMENT_DELETED_EVENT',
  /** Represents a 'connected' event on a given issue or pull request. */
  ConnectedEvent = 'CONNECTED_EVENT',
  /** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
  ConvertedNoteToIssueEvent = 'CONVERTED_NOTE_TO_ISSUE_EVENT',
  /** Represents a 'converted_to_discussion' event on a given issue. */
  ConvertedToDiscussionEvent = 'CONVERTED_TO_DISCUSSION_EVENT',
  /** Represents a 'convert_to_draft' event on a given pull request. */
  ConvertToDraftEvent = 'CONVERT_TO_DRAFT_EVENT',
  /** Represents a mention made by one issue or pull request to another. */
  CrossReferencedEvent = 'CROSS_REFERENCED_EVENT',
  /** Represents a 'demilestoned' event on a given issue or pull request. */
  DemilestonedEvent = 'DEMILESTONED_EVENT',
  /** Represents a 'deployed' event on a given pull request. */
  DeployedEvent = 'DEPLOYED_EVENT',
  /** Represents a 'deployment_environment_changed' event on a given pull request. */
  DeploymentEnvironmentChangedEvent = 'DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT',
  /** Represents a 'disconnected' event on a given issue or pull request. */
  DisconnectedEvent = 'DISCONNECTED_EVENT',
  /** Represents a 'head_ref_deleted' event on a given pull request. */
  HeadRefDeletedEvent = 'HEAD_REF_DELETED_EVENT',
  /** Represents a 'head_ref_force_pushed' event on a given pull request. */
  HeadRefForcePushedEvent = 'HEAD_REF_FORCE_PUSHED_EVENT',
  /** Represents a 'head_ref_restored' event on a given pull request. */
  HeadRefRestoredEvent = 'HEAD_REF_RESTORED_EVENT',
  /** Represents a comment on an Issue. */
  IssueComment = 'ISSUE_COMMENT',
  /** Represents a 'labeled' event on a given issue or pull request. */
  LabeledEvent = 'LABELED_EVENT',
  /** Represents a 'locked' event on a given issue or pull request. */
  LockedEvent = 'LOCKED_EVENT',
  /** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
  MarkedAsDuplicateEvent = 'MARKED_AS_DUPLICATE_EVENT',
  /** Represents a 'mentioned' event on a given issue or pull request. */
  MentionedEvent = 'MENTIONED_EVENT',
  /** Represents a 'merged' event on a given pull request. */
  MergedEvent = 'MERGED_EVENT',
  /** Represents a 'milestoned' event on a given issue or pull request. */
  MilestonedEvent = 'MILESTONED_EVENT',
  /** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
  MovedColumnsInProjectEvent = 'MOVED_COLUMNS_IN_PROJECT_EVENT',
  /** Represents a 'pinned' event on a given issue or pull request. */
  PinnedEvent = 'PINNED_EVENT',
  /** Represents a Git commit part of a pull request. */
  PullRequestCommit = 'PULL_REQUEST_COMMIT',
  /** Represents a commit comment thread part of a pull request. */
  PullRequestCommitCommentThread = 'PULL_REQUEST_COMMIT_COMMENT_THREAD',
  /** A review object for a given pull request. */
  PullRequestReview = 'PULL_REQUEST_REVIEW',
  /** A threaded list of comments for a given pull request. */
  PullRequestReviewThread = 'PULL_REQUEST_REVIEW_THREAD',
  /** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */
  PullRequestRevisionMarker = 'PULL_REQUEST_REVISION_MARKER',
  /** Represents a 'ready_for_review' event on a given pull request. */
  ReadyForReviewEvent = 'READY_FOR_REVIEW_EVENT',
  /** Represents a 'referenced' event on a given `ReferencedSubject`. */
  ReferencedEvent = 'REFERENCED_EVENT',
  /** Represents a 'removed_from_merge_queue' event on a given pull request. */
  RemovedFromMergeQueueEvent = 'REMOVED_FROM_MERGE_QUEUE_EVENT',
  /** Represents a 'removed_from_project' event on a given issue or pull request. */
  RemovedFromProjectEvent = 'REMOVED_FROM_PROJECT_EVENT',
  /** Represents a 'renamed' event on a given issue or pull request */
  RenamedTitleEvent = 'RENAMED_TITLE_EVENT',
  /** Represents a 'reopened' event on any `Closable`. */
  ReopenedEvent = 'REOPENED_EVENT',
  /** Represents a 'review_dismissed' event on a given issue or pull request. */
  ReviewDismissedEvent = 'REVIEW_DISMISSED_EVENT',
  /** Represents an 'review_requested' event on a given pull request. */
  ReviewRequestedEvent = 'REVIEW_REQUESTED_EVENT',
  /** Represents an 'review_request_removed' event on a given pull request. */
  ReviewRequestRemovedEvent = 'REVIEW_REQUEST_REMOVED_EVENT',
  /** Represents a 'subscribed' event on a given `Subscribable`. */
  SubscribedEvent = 'SUBSCRIBED_EVENT',
  /** Represents a 'transferred' event on a given issue or pull request. */
  TransferredEvent = 'TRANSFERRED_EVENT',
  /** Represents an 'unassigned' event on any assignable object. */
  UnassignedEvent = 'UNASSIGNED_EVENT',
  /** Represents an 'unlabeled' event on a given issue or pull request. */
  UnlabeledEvent = 'UNLABELED_EVENT',
  /** Represents an 'unlocked' event on a given issue or pull request. */
  UnlockedEvent = 'UNLOCKED_EVENT',
  /** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
  UnmarkedAsDuplicateEvent = 'UNMARKED_AS_DUPLICATE_EVENT',
  /** Represents an 'unpinned' event on a given issue or pull request. */
  UnpinnedEvent = 'UNPINNED_EVENT',
  /** Represents an 'unsubscribed' event on a given `Subscribable`. */
  UnsubscribedEvent = 'UNSUBSCRIBED_EVENT',
  /** Represents a 'user_blocked' event on a given user. */
  UserBlockedEvent = 'USER_BLOCKED_EVENT'
}

/** The possible target states when updating a pull request. */
export enum Gh_PullRequestUpdateState {
  /** A pull request that has been closed without being merged. */
  Closed = 'CLOSED',
  /** A pull request that is still open. */
  Open = 'OPEN'
}

/** A Git push. */
export type Gh_Push = Gh_Node & {
  __typename?: 'gh_Push';
  id: Scalars['ID'];
  /** The SHA after the push */
  nextSha?: Maybe<Scalars['gh_GitObjectID']>;
  /** The permalink for this push. */
  permalink: Scalars['gh_URI'];
  /** The SHA before the push */
  previousSha?: Maybe<Scalars['gh_GitObjectID']>;
  /** The actor who pushed */
  pusher: Gh_Actor;
  /** The repository that was pushed to */
  repository: Gh_Repository;
};

/** A team, user or app who has the ability to push to a protected branch. */
export type Gh_PushAllowance = Gh_Node & {
  __typename?: 'gh_PushAllowance';
  /** The actor that can push. */
  actor?: Maybe<Gh_PushAllowanceActor>;
  /** Identifies the branch protection rule associated with the allowed user or team. */
  branchProtectionRule?: Maybe<Gh_BranchProtectionRule>;
  id: Scalars['ID'];
};

/** Types that can be an actor. */
export type Gh_PushAllowanceActor = Gh_App | Gh_Team | Gh_User;

/** The connection type for PushAllowance. */
export type Gh_PushAllowanceConnection = {
  __typename?: 'gh_PushAllowanceConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_PushAllowanceEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_PushAllowance>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_PushAllowanceEdge = {
  __typename?: 'gh_PushAllowanceEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_PushAllowance>;
};

export type Gh_Query = {
  __typename?: 'gh_Query';
  /** Look up a code of conduct by its key */
  codeOfConduct?: Maybe<Gh_CodeOfConduct>;
  /** Look up a code of conduct by its key */
  codesOfConduct?: Maybe<Array<Maybe<Gh_CodeOfConduct>>>;
  /** Look up an enterprise by URL slug. */
  enterprise?: Maybe<Gh_Enterprise>;
  /** Look up a pending enterprise administrator invitation by invitee, enterprise and role. */
  enterpriseAdministratorInvitation?: Maybe<Gh_EnterpriseAdministratorInvitation>;
  /** Look up a pending enterprise administrator invitation by invitation token. */
  enterpriseAdministratorInvitationByToken?: Maybe<Gh_EnterpriseAdministratorInvitation>;
  /** Look up an open source license by its key */
  license?: Maybe<Gh_License>;
  /** Return a list of known open source licenses */
  licenses: Array<Maybe<Gh_License>>;
  /** Get alphabetically sorted list of Marketplace categories */
  marketplaceCategories: Array<Gh_MarketplaceCategory>;
  /** Look up a Marketplace category by its slug. */
  marketplaceCategory?: Maybe<Gh_MarketplaceCategory>;
  /** Look up a single Marketplace listing */
  marketplaceListing?: Maybe<Gh_MarketplaceListing>;
  /** Look up Marketplace listings */
  marketplaceListings: Gh_MarketplaceListingConnection;
  /** Return information about the GitHub instance */
  meta: Gh_GitHubMetadata;
  /** Fetches an object given its ID. */
  node?: Maybe<Gh_Node>;
  /** Lookup nodes by a list of IDs. */
  nodes: Array<Maybe<Gh_Node>>;
  /** Lookup a organization by login. */
  organization?: Maybe<Gh_Organization>;
  /** The client's rate limit information. */
  rateLimit?: Maybe<Gh_RateLimit>;
  /** Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object */
  relay: Gh_Query;
  /** Lookup a given repository by the owner and repository name. */
  repository?: Maybe<Gh_Repository>;
  /** Lookup a repository owner (ie. either a User or an Organization) by login. */
  repositoryOwner?: Maybe<Gh_RepositoryOwner>;
  /** Lookup resource by a URL. */
  resource?: Maybe<Gh_UniformResourceLocatable>;
  /** Perform a search across resources. */
  search: Gh_SearchResultItemConnection;
  /** GitHub Security Advisories */
  securityAdvisories: Gh_SecurityAdvisoryConnection;
  /** Fetch a Security Advisory by its GHSA ID */
  securityAdvisory?: Maybe<Gh_SecurityAdvisory>;
  /** Software Vulnerabilities documented by GitHub Security Advisories */
  securityVulnerabilities: Gh_SecurityVulnerabilityConnection;
  /** Users and organizations who can be sponsored via GitHub Sponsors. */
  sponsorables: Gh_SponsorableItemConnection;
  /** Look up a topic by name. */
  topic?: Maybe<Gh_Topic>;
  /** Lookup a user by login. */
  user?: Maybe<Gh_User>;
  /** The currently authenticated user. */
  viewer: Gh_User;
};


export type Gh_QueryCodeOfConductArgs = {
  key: Scalars['String'];
};


export type Gh_QueryEnterpriseArgs = {
  invitationToken?: InputMaybe<Scalars['String']>;
  slug: Scalars['String'];
};


export type Gh_QueryEnterpriseAdministratorInvitationArgs = {
  enterpriseSlug: Scalars['String'];
  role: Gh_EnterpriseAdministratorRole;
  userLogin: Scalars['String'];
};


export type Gh_QueryEnterpriseAdministratorInvitationByTokenArgs = {
  invitationToken: Scalars['String'];
};


export type Gh_QueryLicenseArgs = {
  key: Scalars['String'];
};


export type Gh_QueryMarketplaceCategoriesArgs = {
  excludeEmpty?: InputMaybe<Scalars['Boolean']>;
  excludeSubcategories?: InputMaybe<Scalars['Boolean']>;
  includeCategories?: InputMaybe<Array<Scalars['String']>>;
};


export type Gh_QueryMarketplaceCategoryArgs = {
  slug: Scalars['String'];
  useTopicAliases?: InputMaybe<Scalars['Boolean']>;
};


export type Gh_QueryMarketplaceListingArgs = {
  slug: Scalars['String'];
};


export type Gh_QueryMarketplaceListingsArgs = {
  adminId?: InputMaybe<Scalars['ID']>;
  after?: InputMaybe<Scalars['String']>;
  allStates?: InputMaybe<Scalars['Boolean']>;
  before?: InputMaybe<Scalars['String']>;
  categorySlug?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  organizationId?: InputMaybe<Scalars['ID']>;
  primaryCategoryOnly?: InputMaybe<Scalars['Boolean']>;
  slugs?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  useTopicAliases?: InputMaybe<Scalars['Boolean']>;
  viewerCanAdmin?: InputMaybe<Scalars['Boolean']>;
  withFreeTrialsOnly?: InputMaybe<Scalars['Boolean']>;
};


export type Gh_QueryNodeArgs = {
  id: Scalars['ID'];
};


export type Gh_QueryNodesArgs = {
  ids: Array<Scalars['ID']>;
};


export type Gh_QueryOrganizationArgs = {
  login: Scalars['String'];
};


export type Gh_QueryRateLimitArgs = {
  dryRun?: InputMaybe<Scalars['Boolean']>;
};


export type Gh_QueryRepositoryArgs = {
  followRenames?: InputMaybe<Scalars['Boolean']>;
  name: Scalars['String'];
  owner: Scalars['String'];
};


export type Gh_QueryRepositoryOwnerArgs = {
  login: Scalars['String'];
};


export type Gh_QueryResourceArgs = {
  url: Scalars['gh_URI'];
};


export type Gh_QuerySearchArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  query: Scalars['String'];
  type: Gh_SearchType;
};


export type Gh_QuerySecurityAdvisoriesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  identifier?: InputMaybe<Gh_SecurityAdvisoryIdentifierFilter>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_SecurityAdvisoryOrder>;
  publishedSince?: InputMaybe<Scalars['gh_DateTime']>;
  updatedSince?: InputMaybe<Scalars['gh_DateTime']>;
};


export type Gh_QuerySecurityAdvisoryArgs = {
  ghsaId: Scalars['String'];
};


export type Gh_QuerySecurityVulnerabilitiesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  ecosystem?: InputMaybe<Gh_SecurityAdvisoryEcosystem>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_SecurityVulnerabilityOrder>;
  package?: InputMaybe<Scalars['String']>;
  severities?: InputMaybe<Array<Gh_SecurityAdvisorySeverity>>;
};


export type Gh_QuerySponsorablesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  dependencyEcosystem?: InputMaybe<Gh_SecurityAdvisoryEcosystem>;
  ecosystem?: InputMaybe<Gh_DependencyGraphEcosystem>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  onlyDependencies?: InputMaybe<Scalars['Boolean']>;
  orderBy?: InputMaybe<Gh_SponsorableOrder>;
  orgLoginForDependencies?: InputMaybe<Scalars['String']>;
};


export type Gh_QueryTopicArgs = {
  name: Scalars['String'];
};


export type Gh_QueryUserArgs = {
  login: Scalars['String'];
};

/** Represents the client's rate limit. */
export type Gh_RateLimit = {
  __typename?: 'gh_RateLimit';
  /** The point cost for the current query counting against the rate limit. */
  cost: Scalars['Int'];
  /** The maximum number of points the client is permitted to consume in a 60 minute window. */
  limit: Scalars['Int'];
  /** The maximum number of nodes this query may return */
  nodeCount: Scalars['Int'];
  /** The number of points remaining in the current rate limit window. */
  remaining: Scalars['Int'];
  /** The time at which the current rate limit window resets in UTC epoch seconds. */
  resetAt: Scalars['gh_DateTime'];
  /** The number of points used in the current rate limit window. */
  used: Scalars['Int'];
};

/** Represents a subject that can be reacted on. */
export type Gh_Reactable = {
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: Maybe<Array<Gh_ReactionGroup>>;
  /** A list of Reactions left on the Issue. */
  reactions: Gh_ReactionConnection;
  /** Can user react to this subject */
  viewerCanReact: Scalars['Boolean'];
};


/** Represents a subject that can be reacted on. */
export type Gh_ReactableReactionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Gh_ReactionContent>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_ReactionOrder>;
};

/** The connection type for User. */
export type Gh_ReactingUserConnection = {
  __typename?: 'gh_ReactingUserConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_ReactingUserEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_User>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Represents a user that's made a reaction. */
export type Gh_ReactingUserEdge = {
  __typename?: 'gh_ReactingUserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  node: Gh_User;
  /** The moment when the user made the reaction. */
  reactedAt: Scalars['gh_DateTime'];
};

/** An emoji reaction to a particular piece of content. */
export type Gh_Reaction = Gh_Node & {
  __typename?: 'gh_Reaction';
  /** Identifies the emoji reaction. */
  content: Gh_ReactionContent;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  /** The reactable piece of content */
  reactable: Gh_Reactable;
  /** Identifies the user who created this reaction. */
  user?: Maybe<Gh_User>;
};

/** A list of reactions that have been left on the subject. */
export type Gh_ReactionConnection = {
  __typename?: 'gh_ReactionConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_ReactionEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Reaction>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  /** Whether or not the authenticated user has left a reaction on the subject. */
  viewerHasReacted: Scalars['Boolean'];
};

/** Emojis that can be attached to Issues, Pull Requests and Comments. */
export enum Gh_ReactionContent {
  /** Represents the `:confused:` emoji. */
  Confused = 'CONFUSED',
  /** Represents the `:eyes:` emoji. */
  Eyes = 'EYES',
  /** Represents the `:heart:` emoji. */
  Heart = 'HEART',
  /** Represents the `:hooray:` emoji. */
  Hooray = 'HOORAY',
  /** Represents the `:laugh:` emoji. */
  Laugh = 'LAUGH',
  /** Represents the `:rocket:` emoji. */
  Rocket = 'ROCKET',
  /** Represents the `:-1:` emoji. */
  ThumbsDown = 'THUMBS_DOWN',
  /** Represents the `:+1:` emoji. */
  ThumbsUp = 'THUMBS_UP'
}

/** An edge in a connection. */
export type Gh_ReactionEdge = {
  __typename?: 'gh_ReactionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_Reaction>;
};

/** A group of emoji reactions to a particular piece of content. */
export type Gh_ReactionGroup = {
  __typename?: 'gh_ReactionGroup';
  /** Identifies the emoji reaction. */
  content: Gh_ReactionContent;
  /** Identifies when the reaction was created. */
  createdAt?: Maybe<Scalars['gh_DateTime']>;
  /** Reactors to the reaction subject with the emotion represented by this reaction group. */
  reactors: Gh_ReactorConnection;
  /** The subject that was reacted to. */
  subject: Gh_Reactable;
  /** Users who have reacted to the reaction subject with the emotion represented by this reaction group */
  users: Gh_ReactingUserConnection;
  /** Whether or not the authenticated user has left a reaction on the subject. */
  viewerHasReacted: Scalars['Boolean'];
};


/** A group of emoji reactions to a particular piece of content. */
export type Gh_ReactionGroupReactorsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A group of emoji reactions to a particular piece of content. */
export type Gh_ReactionGroupUsersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** Ways in which lists of reactions can be ordered upon return. */
export type Gh_ReactionOrder = {
  /** The direction in which to order reactions by the specified field. */
  direction: Gh_OrderDirection;
  /** The field in which to order reactions by. */
  field: Gh_ReactionOrderField;
};

/** A list of fields that reactions can be ordered by. */
export enum Gh_ReactionOrderField {
  /** Allows ordering a list of reactions by when they were created. */
  CreatedAt = 'CREATED_AT'
}

/** Types that can be assigned to reactions. */
export type Gh_Reactor = Gh_Bot | Gh_Mannequin | Gh_Organization | Gh_User;

/** The connection type for Reactor. */
export type Gh_ReactorConnection = {
  __typename?: 'gh_ReactorConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_ReactorEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Reactor>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Represents an author of a reaction. */
export type Gh_ReactorEdge = {
  __typename?: 'gh_ReactorEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The author of the reaction. */
  node: Gh_Reactor;
  /** The moment when the user made the reaction. */
  reactedAt: Scalars['gh_DateTime'];
};

/** Represents a 'ready_for_review' event on a given pull request. */
export type Gh_ReadyForReviewEvent = Gh_Node & Gh_UniformResourceLocatable & {
  __typename?: 'gh_ReadyForReviewEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest: Gh_PullRequest;
  /** The HTTP path for this ready for review event. */
  resourcePath: Scalars['gh_URI'];
  /** The HTTP URL for this ready for review event. */
  url: Scalars['gh_URI'];
};

/** Represents a Git reference. */
export type Gh_Ref = Gh_Node & {
  __typename?: 'gh_Ref';
  /** A list of pull requests with this ref as the head ref. */
  associatedPullRequests: Gh_PullRequestConnection;
  /** Branch protection rules for this ref */
  branchProtectionRule?: Maybe<Gh_BranchProtectionRule>;
  id: Scalars['ID'];
  /** The ref name. */
  name: Scalars['String'];
  /** The ref's prefix, such as `refs/heads/` or `refs/tags/`. */
  prefix: Scalars['String'];
  /** Branch protection rules that are viewable by non-admins */
  refUpdateRule?: Maybe<Gh_RefUpdateRule>;
  /** The repository the ref belongs to. */
  repository: Gh_Repository;
  /** The object the ref points to. Returns null when object does not exist. */
  target?: Maybe<Gh_GitObject>;
};


/** Represents a Git reference. */
export type Gh_RefAssociatedPullRequestsArgs = {
  after?: InputMaybe<Scalars['String']>;
  baseRefName?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  headRefName?: InputMaybe<Scalars['String']>;
  labels?: InputMaybe<Array<Scalars['String']>>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_IssueOrder>;
  states?: InputMaybe<Array<Gh_PullRequestState>>;
};

/** The connection type for Ref. */
export type Gh_RefConnection = {
  __typename?: 'gh_RefConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_RefEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Ref>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_RefEdge = {
  __typename?: 'gh_RefEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_Ref>;
};

/** Ways in which lists of git refs can be ordered upon return. */
export type Gh_RefOrder = {
  /** The direction in which to order refs by the specified field. */
  direction: Gh_OrderDirection;
  /** The field in which to order refs by. */
  field: Gh_RefOrderField;
};

/** Properties by which ref connections can be ordered. */
export enum Gh_RefOrderField {
  /** Order refs by their alphanumeric name */
  Alphabetical = 'ALPHABETICAL',
  /** Order refs by underlying commit date if the ref prefix is refs/tags/ */
  TagCommitDate = 'TAG_COMMIT_DATE'
}

/** A ref update rules for a viewer. */
export type Gh_RefUpdateRule = {
  __typename?: 'gh_RefUpdateRule';
  /** Can this branch be deleted. */
  allowsDeletions: Scalars['Boolean'];
  /** Are force pushes allowed on this branch. */
  allowsForcePushes: Scalars['Boolean'];
  /** Can matching branches be created. */
  blocksCreations: Scalars['Boolean'];
  /** Identifies the protection rule pattern. */
  pattern: Scalars['String'];
  /** Number of approving reviews required to update matching branches. */
  requiredApprovingReviewCount?: Maybe<Scalars['Int']>;
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  requiredStatusCheckContexts?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Are reviews from code owners required to update matching branches. */
  requiresCodeOwnerReviews: Scalars['Boolean'];
  /** Are conversations required to be resolved before merging. */
  requiresConversationResolution: Scalars['Boolean'];
  /** Are merge commits prohibited from being pushed to this branch. */
  requiresLinearHistory: Scalars['Boolean'];
  /** Are commits required to be signed. */
  requiresSignatures: Scalars['Boolean'];
  /** Is the viewer allowed to dismiss reviews. */
  viewerAllowedToDismissReviews: Scalars['Boolean'];
  /** Can the viewer push to the branch */
  viewerCanPush: Scalars['Boolean'];
};

/** Represents a 'referenced' event on a given `ReferencedSubject`. */
export type Gh_ReferencedEvent = Gh_Node & {
  __typename?: 'gh_ReferencedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the commit associated with the 'referenced' event. */
  commit?: Maybe<Gh_Commit>;
  /** Identifies the repository associated with the 'referenced' event. */
  commitRepository: Gh_Repository;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** Reference originated in a different repository. */
  isCrossRepository: Scalars['Boolean'];
  /** Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference. */
  isDirectReference: Scalars['Boolean'];
  /** Object referenced by event. */
  subject: Gh_ReferencedSubject;
};

/** Any referencable object */
export type Gh_ReferencedSubject = Gh_Issue | Gh_PullRequest;

/** Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes */
export type Gh_RegenerateEnterpriseIdentityProviderRecoveryCodesInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the enterprise on which to set an identity provider. */
  enterpriseId: Scalars['ID'];
};

/** Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes */
export type Gh_RegenerateEnterpriseIdentityProviderRecoveryCodesPayload = {
  __typename?: 'gh_RegenerateEnterpriseIdentityProviderRecoveryCodesPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The identity provider for the enterprise. */
  identityProvider?: Maybe<Gh_EnterpriseIdentityProvider>;
};

/** Autogenerated input type of RegenerateVerifiableDomainToken */
export type Gh_RegenerateVerifiableDomainTokenInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the verifiable domain to regenerate the verification token of. */
  id: Scalars['ID'];
};

/** Autogenerated return type of RegenerateVerifiableDomainToken */
export type Gh_RegenerateVerifiableDomainTokenPayload = {
  __typename?: 'gh_RegenerateVerifiableDomainTokenPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The verification token that was generated. */
  verificationToken?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of RejectDeployments */
export type Gh_RejectDeploymentsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Optional comment for rejecting deployments */
  comment?: InputMaybe<Scalars['String']>;
  /** The ids of environments to reject deployments */
  environmentIds: Array<Scalars['ID']>;
  /** The node ID of the workflow run containing the pending deployments. */
  workflowRunId: Scalars['ID'];
};

/** Autogenerated return type of RejectDeployments */
export type Gh_RejectDeploymentsPayload = {
  __typename?: 'gh_RejectDeploymentsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The affected deployments. */
  deployments?: Maybe<Array<Gh_Deployment>>;
};

/** A release contains the content for a release. */
export type Gh_Release = Gh_Node & Gh_Reactable & Gh_UniformResourceLocatable & {
  __typename?: 'gh_Release';
  /** The author of the release */
  author?: Maybe<Gh_User>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The description of the release. */
  description?: Maybe<Scalars['String']>;
  /** The description of this release rendered to HTML. */
  descriptionHTML?: Maybe<Scalars['gh_HTML']>;
  id: Scalars['ID'];
  /** Whether or not the release is a draft */
  isDraft: Scalars['Boolean'];
  /** Whether or not the release is the latest releast */
  isLatest: Scalars['Boolean'];
  /** Whether or not the release is a prerelease */
  isPrerelease: Scalars['Boolean'];
  /** A list of users mentioned in the release description */
  mentions?: Maybe<Gh_UserConnection>;
  /** The title of the release. */
  name?: Maybe<Scalars['String']>;
  /** Identifies the date and time when the release was created. */
  publishedAt?: Maybe<Scalars['gh_DateTime']>;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: Maybe<Array<Gh_ReactionGroup>>;
  /** A list of Reactions left on the Issue. */
  reactions: Gh_ReactionConnection;
  /** List of releases assets which are dependent on this release. */
  releaseAssets: Gh_ReleaseAssetConnection;
  /** The repository that the release belongs to. */
  repository: Gh_Repository;
  /** The HTTP path for this issue */
  resourcePath: Scalars['gh_URI'];
  /** A description of the release, rendered to HTML without any links in it. */
  shortDescriptionHTML?: Maybe<Scalars['gh_HTML']>;
  /** The Git tag the release points to */
  tag?: Maybe<Gh_Ref>;
  /** The tag commit for this release. */
  tagCommit?: Maybe<Gh_Commit>;
  /** The name of the release's Git tag */
  tagName: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The HTTP URL for this issue */
  url: Scalars['gh_URI'];
  /** Can user react to this subject */
  viewerCanReact: Scalars['Boolean'];
};


/** A release contains the content for a release. */
export type Gh_ReleaseMentionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A release contains the content for a release. */
export type Gh_ReleaseReactionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Gh_ReactionContent>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_ReactionOrder>;
};


/** A release contains the content for a release. */
export type Gh_ReleaseReleaseAssetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Scalars['String']>;
};


/** A release contains the content for a release. */
export type Gh_ReleaseShortDescriptionHtmlArgs = {
  limit?: InputMaybe<Scalars['Int']>;
};

/** A release asset contains the content for a release asset. */
export type Gh_ReleaseAsset = Gh_Node & {
  __typename?: 'gh_ReleaseAsset';
  /** The asset's content-type */
  contentType: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The number of times this asset was downloaded */
  downloadCount: Scalars['Int'];
  /** Identifies the URL where you can download the release asset via the browser. */
  downloadUrl: Scalars['gh_URI'];
  id: Scalars['ID'];
  /** Identifies the title of the release asset. */
  name: Scalars['String'];
  /** Release that the asset is associated with */
  release?: Maybe<Gh_Release>;
  /** The size (in bytes) of the asset */
  size: Scalars['Int'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The user that performed the upload */
  uploadedBy: Gh_User;
  /** Identifies the URL of the release asset. */
  url: Scalars['gh_URI'];
};

/** The connection type for ReleaseAsset. */
export type Gh_ReleaseAssetConnection = {
  __typename?: 'gh_ReleaseAssetConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_ReleaseAssetEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_ReleaseAsset>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_ReleaseAssetEdge = {
  __typename?: 'gh_ReleaseAssetEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_ReleaseAsset>;
};

/** The connection type for Release. */
export type Gh_ReleaseConnection = {
  __typename?: 'gh_ReleaseConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_ReleaseEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Release>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_ReleaseEdge = {
  __typename?: 'gh_ReleaseEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_Release>;
};

/** Ways in which lists of releases can be ordered upon return. */
export type Gh_ReleaseOrder = {
  /** The direction in which to order releases by the specified field. */
  direction: Gh_OrderDirection;
  /** The field in which to order releases by. */
  field: Gh_ReleaseOrderField;
};

/** Properties by which release connections can be ordered. */
export enum Gh_ReleaseOrderField {
  /** Order releases by creation time */
  CreatedAt = 'CREATED_AT',
  /** Order releases alphabetically by name */
  Name = 'NAME'
}

/** Autogenerated input type of RemoveAssigneesFromAssignable */
export type Gh_RemoveAssigneesFromAssignableInput = {
  /** The id of the assignable object to remove assignees from. */
  assignableId: Scalars['ID'];
  /** The id of users to remove as assignees. */
  assigneeIds: Array<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of RemoveAssigneesFromAssignable */
export type Gh_RemoveAssigneesFromAssignablePayload = {
  __typename?: 'gh_RemoveAssigneesFromAssignablePayload';
  /** The item that was unassigned. */
  assignable?: Maybe<Gh_Assignable>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of RemoveEnterpriseAdmin */
export type Gh_RemoveEnterpriseAdminInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Enterprise ID from which to remove the administrator. */
  enterpriseId: Scalars['ID'];
  /** The login of the user to remove as an administrator. */
  login: Scalars['String'];
};

/** Autogenerated return type of RemoveEnterpriseAdmin */
export type Gh_RemoveEnterpriseAdminPayload = {
  __typename?: 'gh_RemoveEnterpriseAdminPayload';
  /** The user who was removed as an administrator. */
  admin?: Maybe<Gh_User>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The updated enterprise. */
  enterprise?: Maybe<Gh_Enterprise>;
  /** A message confirming the result of removing an administrator. */
  message?: Maybe<Scalars['String']>;
  /** The viewer performing the mutation. */
  viewer?: Maybe<Gh_User>;
};

/** Autogenerated input type of RemoveEnterpriseIdentityProvider */
export type Gh_RemoveEnterpriseIdentityProviderInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the enterprise from which to remove the identity provider. */
  enterpriseId: Scalars['ID'];
};

/** Autogenerated return type of RemoveEnterpriseIdentityProvider */
export type Gh_RemoveEnterpriseIdentityProviderPayload = {
  __typename?: 'gh_RemoveEnterpriseIdentityProviderPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The identity provider that was removed from the enterprise. */
  identityProvider?: Maybe<Gh_EnterpriseIdentityProvider>;
};

/** Autogenerated input type of RemoveEnterpriseOrganization */
export type Gh_RemoveEnterpriseOrganizationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the enterprise from which the organization should be removed. */
  enterpriseId: Scalars['ID'];
  /** The ID of the organization to remove from the enterprise. */
  organizationId: Scalars['ID'];
};

/** Autogenerated return type of RemoveEnterpriseOrganization */
export type Gh_RemoveEnterpriseOrganizationPayload = {
  __typename?: 'gh_RemoveEnterpriseOrganizationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The updated enterprise. */
  enterprise?: Maybe<Gh_Enterprise>;
  /** The organization that was removed from the enterprise. */
  organization?: Maybe<Gh_Organization>;
  /** The viewer performing the mutation. */
  viewer?: Maybe<Gh_User>;
};

/** Autogenerated input type of RemoveEnterpriseSupportEntitlement */
export type Gh_RemoveEnterpriseSupportEntitlementInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the Enterprise which the admin belongs to. */
  enterpriseId: Scalars['ID'];
  /** The login of a member who will lose the support entitlement. */
  login: Scalars['String'];
};

/** Autogenerated return type of RemoveEnterpriseSupportEntitlement */
export type Gh_RemoveEnterpriseSupportEntitlementPayload = {
  __typename?: 'gh_RemoveEnterpriseSupportEntitlementPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** A message confirming the result of removing the support entitlement. */
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of RemoveLabelsFromLabelable */
export type Gh_RemoveLabelsFromLabelableInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ids of labels to remove. */
  labelIds: Array<Scalars['ID']>;
  /** The id of the Labelable to remove labels from. */
  labelableId: Scalars['ID'];
};

/** Autogenerated return type of RemoveLabelsFromLabelable */
export type Gh_RemoveLabelsFromLabelablePayload = {
  __typename?: 'gh_RemoveLabelsFromLabelablePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The Labelable the labels were removed from. */
  labelable?: Maybe<Gh_Labelable>;
};

/** Autogenerated input type of RemoveOutsideCollaborator */
export type Gh_RemoveOutsideCollaboratorInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the organization to remove the outside collaborator from. */
  organizationId: Scalars['ID'];
  /** The ID of the outside collaborator to remove. */
  userId: Scalars['ID'];
};

/** Autogenerated return type of RemoveOutsideCollaborator */
export type Gh_RemoveOutsideCollaboratorPayload = {
  __typename?: 'gh_RemoveOutsideCollaboratorPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The user that was removed as an outside collaborator. */
  removedUser?: Maybe<Gh_User>;
};

/** Autogenerated input type of RemoveReaction */
export type Gh_RemoveReactionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The name of the emoji reaction to remove. */
  content: Gh_ReactionContent;
  /** The Node ID of the subject to modify. */
  subjectId: Scalars['ID'];
};

/** Autogenerated return type of RemoveReaction */
export type Gh_RemoveReactionPayload = {
  __typename?: 'gh_RemoveReactionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The reaction object. */
  reaction?: Maybe<Gh_Reaction>;
  /** The reactable subject. */
  subject?: Maybe<Gh_Reactable>;
};

/** Autogenerated input type of RemoveStar */
export type Gh_RemoveStarInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Starrable ID to unstar. */
  starrableId: Scalars['ID'];
};

/** Autogenerated return type of RemoveStar */
export type Gh_RemoveStarPayload = {
  __typename?: 'gh_RemoveStarPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The starrable. */
  starrable?: Maybe<Gh_Starrable>;
};

/** Autogenerated input type of RemoveUpvote */
export type Gh_RemoveUpvoteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Node ID of the discussion or comment to remove upvote. */
  subjectId: Scalars['ID'];
};

/** Autogenerated return type of RemoveUpvote */
export type Gh_RemoveUpvotePayload = {
  __typename?: 'gh_RemoveUpvotePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The votable subject. */
  subject?: Maybe<Gh_Votable>;
};

/** Represents a 'removed_from_project' event on a given issue or pull request. */
export type Gh_RemovedFromProjectEvent = Gh_Node & {
  __typename?: 'gh_RemovedFromProjectEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
};

/** Represents a 'renamed' event on a given issue or pull request */
export type Gh_RenamedTitleEvent = Gh_Node & {
  __typename?: 'gh_RenamedTitleEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the current title of the issue or pull request. */
  currentTitle: Scalars['String'];
  id: Scalars['ID'];
  /** Identifies the previous title of the issue or pull request. */
  previousTitle: Scalars['String'];
  /** Subject that was renamed. */
  subject: Gh_RenamedTitleSubject;
};

/** An object which has a renamable title */
export type Gh_RenamedTitleSubject = Gh_Issue | Gh_PullRequest;

/** Autogenerated input type of ReopenIssue */
export type Gh_ReopenIssueInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** ID of the issue to be opened. */
  issueId: Scalars['ID'];
};

/** Autogenerated return type of ReopenIssue */
export type Gh_ReopenIssuePayload = {
  __typename?: 'gh_ReopenIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The issue that was opened. */
  issue?: Maybe<Gh_Issue>;
};

/** Autogenerated input type of ReopenPullRequest */
export type Gh_ReopenPullRequestInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** ID of the pull request to be reopened. */
  pullRequestId: Scalars['ID'];
};

/** Autogenerated return type of ReopenPullRequest */
export type Gh_ReopenPullRequestPayload = {
  __typename?: 'gh_ReopenPullRequestPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The pull request that was reopened. */
  pullRequest?: Maybe<Gh_PullRequest>;
};

/** Represents a 'reopened' event on any `Closable`. */
export type Gh_ReopenedEvent = Gh_Node & {
  __typename?: 'gh_ReopenedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Object that was reopened. */
  closable: Gh_Closable;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
};

/** Audit log entry for a repo.access event. */
export type Gh_RepoAccessAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData & {
  __typename?: 'gh_RepoAccessAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The repository associated with the action */
  repository?: Maybe<Gh_Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
  /** The visibility of the repository */
  visibility?: Maybe<Gh_RepoAccessAuditEntryVisibility>;
};

/** The privacy of a repository */
export enum Gh_RepoAccessAuditEntryVisibility {
  /** The repository is visible only to users in the same business. */
  Internal = 'INTERNAL',
  /** The repository is visible only to those with explicit access. */
  Private = 'PRIVATE',
  /** The repository is visible to everyone. */
  Public = 'PUBLIC'
}

/** Audit log entry for a repo.add_member event. */
export type Gh_RepoAddMemberAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData & {
  __typename?: 'gh_RepoAddMemberAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The repository associated with the action */
  repository?: Maybe<Gh_Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
  /** The visibility of the repository */
  visibility?: Maybe<Gh_RepoAddMemberAuditEntryVisibility>;
};

/** The privacy of a repository */
export enum Gh_RepoAddMemberAuditEntryVisibility {
  /** The repository is visible only to users in the same business. */
  Internal = 'INTERNAL',
  /** The repository is visible only to those with explicit access. */
  Private = 'PRIVATE',
  /** The repository is visible to everyone. */
  Public = 'PUBLIC'
}

/** Audit log entry for a repo.add_topic event. */
export type Gh_RepoAddTopicAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData & Gh_TopicAuditEntryData & {
  __typename?: 'gh_RepoAddTopicAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The repository associated with the action */
  repository?: Maybe<Gh_Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars['gh_URI']>;
  /** The name of the topic added to the repository */
  topic?: Maybe<Gh_Topic>;
  /** The name of the topic added to the repository */
  topicName?: Maybe<Scalars['String']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a repo.archived event. */
export type Gh_RepoArchivedAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData & {
  __typename?: 'gh_RepoArchivedAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The repository associated with the action */
  repository?: Maybe<Gh_Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
  /** The visibility of the repository */
  visibility?: Maybe<Gh_RepoArchivedAuditEntryVisibility>;
};

/** The privacy of a repository */
export enum Gh_RepoArchivedAuditEntryVisibility {
  /** The repository is visible only to users in the same business. */
  Internal = 'INTERNAL',
  /** The repository is visible only to those with explicit access. */
  Private = 'PRIVATE',
  /** The repository is visible to everyone. */
  Public = 'PUBLIC'
}

/** Audit log entry for a repo.change_merge_setting event. */
export type Gh_RepoChangeMergeSettingAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData & {
  __typename?: 'gh_RepoChangeMergeSettingAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** Whether the change was to enable (true) or disable (false) the merge type */
  isEnabled?: Maybe<Scalars['Boolean']>;
  /** The merge method affected by the change */
  mergeType?: Maybe<Gh_RepoChangeMergeSettingAuditEntryMergeType>;
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The repository associated with the action */
  repository?: Maybe<Gh_Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** The merge options available for pull requests to this repository. */
export enum Gh_RepoChangeMergeSettingAuditEntryMergeType {
  /** The pull request is added to the base branch in a merge commit. */
  Merge = 'MERGE',
  /** Commits from the pull request are added onto the base branch individually without a merge commit. */
  Rebase = 'REBASE',
  /** The pull request's commits are squashed into a single commit before they are merged to the base branch. */
  Squash = 'SQUASH'
}

/** Audit log entry for a repo.config.disable_anonymous_git_access event. */
export type Gh_RepoConfigDisableAnonymousGitAccessAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData & {
  __typename?: 'gh_RepoConfigDisableAnonymousGitAccessAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The repository associated with the action */
  repository?: Maybe<Gh_Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a repo.config.disable_collaborators_only event. */
export type Gh_RepoConfigDisableCollaboratorsOnlyAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData & {
  __typename?: 'gh_RepoConfigDisableCollaboratorsOnlyAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The repository associated with the action */
  repository?: Maybe<Gh_Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a repo.config.disable_contributors_only event. */
export type Gh_RepoConfigDisableContributorsOnlyAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData & {
  __typename?: 'gh_RepoConfigDisableContributorsOnlyAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The repository associated with the action */
  repository?: Maybe<Gh_Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a repo.config.disable_sockpuppet_disallowed event. */
export type Gh_RepoConfigDisableSockpuppetDisallowedAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData & {
  __typename?: 'gh_RepoConfigDisableSockpuppetDisallowedAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The repository associated with the action */
  repository?: Maybe<Gh_Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a repo.config.enable_anonymous_git_access event. */
export type Gh_RepoConfigEnableAnonymousGitAccessAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData & {
  __typename?: 'gh_RepoConfigEnableAnonymousGitAccessAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The repository associated with the action */
  repository?: Maybe<Gh_Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a repo.config.enable_collaborators_only event. */
export type Gh_RepoConfigEnableCollaboratorsOnlyAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData & {
  __typename?: 'gh_RepoConfigEnableCollaboratorsOnlyAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The repository associated with the action */
  repository?: Maybe<Gh_Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a repo.config.enable_contributors_only event. */
export type Gh_RepoConfigEnableContributorsOnlyAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData & {
  __typename?: 'gh_RepoConfigEnableContributorsOnlyAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The repository associated with the action */
  repository?: Maybe<Gh_Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a repo.config.enable_sockpuppet_disallowed event. */
export type Gh_RepoConfigEnableSockpuppetDisallowedAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData & {
  __typename?: 'gh_RepoConfigEnableSockpuppetDisallowedAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The repository associated with the action */
  repository?: Maybe<Gh_Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a repo.config.lock_anonymous_git_access event. */
export type Gh_RepoConfigLockAnonymousGitAccessAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData & {
  __typename?: 'gh_RepoConfigLockAnonymousGitAccessAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The repository associated with the action */
  repository?: Maybe<Gh_Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a repo.config.unlock_anonymous_git_access event. */
export type Gh_RepoConfigUnlockAnonymousGitAccessAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData & {
  __typename?: 'gh_RepoConfigUnlockAnonymousGitAccessAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The repository associated with the action */
  repository?: Maybe<Gh_Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a repo.create event. */
export type Gh_RepoCreateAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData & {
  __typename?: 'gh_RepoCreateAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  /** The name of the parent repository for this forked repository. */
  forkParentName?: Maybe<Scalars['String']>;
  /** The name of the root repository for this network. */
  forkSourceName?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The repository associated with the action */
  repository?: Maybe<Gh_Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
  /** The visibility of the repository */
  visibility?: Maybe<Gh_RepoCreateAuditEntryVisibility>;
};

/** The privacy of a repository */
export enum Gh_RepoCreateAuditEntryVisibility {
  /** The repository is visible only to users in the same business. */
  Internal = 'INTERNAL',
  /** The repository is visible only to those with explicit access. */
  Private = 'PRIVATE',
  /** The repository is visible to everyone. */
  Public = 'PUBLIC'
}

/** Audit log entry for a repo.destroy event. */
export type Gh_RepoDestroyAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData & {
  __typename?: 'gh_RepoDestroyAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The repository associated with the action */
  repository?: Maybe<Gh_Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
  /** The visibility of the repository */
  visibility?: Maybe<Gh_RepoDestroyAuditEntryVisibility>;
};

/** The privacy of a repository */
export enum Gh_RepoDestroyAuditEntryVisibility {
  /** The repository is visible only to users in the same business. */
  Internal = 'INTERNAL',
  /** The repository is visible only to those with explicit access. */
  Private = 'PRIVATE',
  /** The repository is visible to everyone. */
  Public = 'PUBLIC'
}

/** Audit log entry for a repo.remove_member event. */
export type Gh_RepoRemoveMemberAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData & {
  __typename?: 'gh_RepoRemoveMemberAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The repository associated with the action */
  repository?: Maybe<Gh_Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
  /** The visibility of the repository */
  visibility?: Maybe<Gh_RepoRemoveMemberAuditEntryVisibility>;
};

/** The privacy of a repository */
export enum Gh_RepoRemoveMemberAuditEntryVisibility {
  /** The repository is visible only to users in the same business. */
  Internal = 'INTERNAL',
  /** The repository is visible only to those with explicit access. */
  Private = 'PRIVATE',
  /** The repository is visible to everyone. */
  Public = 'PUBLIC'
}

/** Audit log entry for a repo.remove_topic event. */
export type Gh_RepoRemoveTopicAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData & Gh_TopicAuditEntryData & {
  __typename?: 'gh_RepoRemoveTopicAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The repository associated with the action */
  repository?: Maybe<Gh_Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars['gh_URI']>;
  /** The name of the topic added to the repository */
  topic?: Maybe<Gh_Topic>;
  /** The name of the topic added to the repository */
  topicName?: Maybe<Scalars['String']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** The reasons a piece of content can be reported or minimized. */
export enum Gh_ReportedContentClassifiers {
  /** An abusive or harassing piece of content */
  Abuse = 'ABUSE',
  /** A duplicated piece of content */
  Duplicate = 'DUPLICATE',
  /** An irrelevant piece of content */
  OffTopic = 'OFF_TOPIC',
  /** An outdated piece of content */
  Outdated = 'OUTDATED',
  /** The content has been resolved */
  Resolved = 'RESOLVED',
  /** A spammy piece of content */
  Spam = 'SPAM'
}

/** A repository contains the content for a project. */
export type Gh_Repository = Gh_Node & Gh_PackageOwner & Gh_ProjectOwner & Gh_RepositoryInfo & Gh_Starrable & Gh_Subscribable & Gh_UniformResourceLocatable & {
  __typename?: 'gh_Repository';
  /** A list of users that can be assigned to issues in this repository. */
  assignableUsers: Gh_UserConnection;
  /** Whether or not Auto-merge can be enabled on pull requests in this repository. */
  autoMergeAllowed: Scalars['Boolean'];
  /** A list of branch protection rules for this repository. */
  branchProtectionRules: Gh_BranchProtectionRuleConnection;
  /** Returns the code of conduct for this repository */
  codeOfConduct?: Maybe<Gh_CodeOfConduct>;
  /** Information extracted from the repository's `CODEOWNERS` file. */
  codeowners?: Maybe<Gh_RepositoryCodeowners>;
  /** A list of collaborators associated with the repository. */
  collaborators?: Maybe<Gh_RepositoryCollaboratorConnection>;
  /** A list of commit comments associated with the repository. */
  commitComments: Gh_CommitCommentConnection;
  /** Returns a list of contact links associated to the repository */
  contactLinks?: Maybe<Array<Gh_RepositoryContactLink>>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The Ref associated with the repository's default branch. */
  defaultBranchRef?: Maybe<Gh_Ref>;
  /** Whether or not branches are automatically deleted when merged in this repository. */
  deleteBranchOnMerge: Scalars['Boolean'];
  /** A list of deploy keys that are on this repository. */
  deployKeys: Gh_DeployKeyConnection;
  /** Deployments associated with the repository */
  deployments: Gh_DeploymentConnection;
  /** The description of the repository. */
  description?: Maybe<Scalars['String']>;
  /** The description of the repository rendered to HTML. */
  descriptionHTML: Scalars['gh_HTML'];
  /** Returns a single discussion from the current repository by number. */
  discussion?: Maybe<Gh_Discussion>;
  /** A list of discussion categories that are available in the repository. */
  discussionCategories: Gh_DiscussionCategoryConnection;
  /** A list of discussions that have been opened in the repository. */
  discussions: Gh_DiscussionConnection;
  /** The number of kilobytes this repository occupies on disk. */
  diskUsage?: Maybe<Scalars['Int']>;
  /** Returns a single active environment from the current repository by name. */
  environment?: Maybe<Gh_Environment>;
  /** A list of environments that are in this repository. */
  environments: Gh_EnvironmentConnection;
  /** Returns how many forks there are of this repository in the whole network. */
  forkCount: Scalars['Int'];
  /** Whether this repository allows forks. */
  forkingAllowed: Scalars['Boolean'];
  /** A list of direct forked repositories. */
  forks: Gh_RepositoryConnection;
  /** The funding links for this repository */
  fundingLinks: Array<Gh_FundingLink>;
  /** Indicates if the repository has issues feature enabled. */
  hasIssuesEnabled: Scalars['Boolean'];
  /** Indicates if the repository has the Projects feature enabled. */
  hasProjectsEnabled: Scalars['Boolean'];
  /** Indicates if the repository has wiki feature enabled. */
  hasWikiEnabled: Scalars['Boolean'];
  /** The repository's URL. */
  homepageUrl?: Maybe<Scalars['gh_URI']>;
  id: Scalars['ID'];
  /** The interaction ability settings for this repository. */
  interactionAbility?: Maybe<Gh_RepositoryInteractionAbility>;
  /** Indicates if the repository is unmaintained. */
  isArchived: Scalars['Boolean'];
  /** Returns true if blank issue creation is allowed */
  isBlankIssuesEnabled: Scalars['Boolean'];
  /** Returns whether or not this repository disabled. */
  isDisabled: Scalars['Boolean'];
  /** Returns whether or not this repository is empty. */
  isEmpty: Scalars['Boolean'];
  /** Identifies if the repository is a fork. */
  isFork: Scalars['Boolean'];
  /** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */
  isInOrganization: Scalars['Boolean'];
  /** Indicates if the repository has been locked or not. */
  isLocked: Scalars['Boolean'];
  /** Identifies if the repository is a mirror. */
  isMirror: Scalars['Boolean'];
  /** Identifies if the repository is private or internal. */
  isPrivate: Scalars['Boolean'];
  /** Returns true if this repository has a security policy */
  isSecurityPolicyEnabled?: Maybe<Scalars['Boolean']>;
  /** Identifies if the repository is a template that can be used to generate new repositories. */
  isTemplate: Scalars['Boolean'];
  /** Is this repository a user configuration repository? */
  isUserConfigurationRepository: Scalars['Boolean'];
  /** Returns a single issue from the current repository by number. */
  issue?: Maybe<Gh_Issue>;
  /** Returns a single issue-like object from the current repository by number. */
  issueOrPullRequest?: Maybe<Gh_IssueOrPullRequest>;
  /** Returns a list of issue templates associated to the repository */
  issueTemplates?: Maybe<Array<Gh_IssueTemplate>>;
  /** A list of issues that have been opened in the repository. */
  issues: Gh_IssueConnection;
  /** Returns a single label by name */
  label?: Maybe<Gh_Label>;
  /** A list of labels associated with the repository. */
  labels?: Maybe<Gh_LabelConnection>;
  /** A list containing a breakdown of the language composition of the repository. */
  languages?: Maybe<Gh_LanguageConnection>;
  /** Get the latest release for the repository if one exists. */
  latestRelease?: Maybe<Gh_Release>;
  /** The license associated with the repository */
  licenseInfo?: Maybe<Gh_License>;
  /** The reason the repository has been locked. */
  lockReason?: Maybe<Gh_RepositoryLockReason>;
  /** A list of Users that can be mentioned in the context of the repository. */
  mentionableUsers: Gh_UserConnection;
  /** Whether or not PRs are merged with a merge commit on this repository. */
  mergeCommitAllowed: Scalars['Boolean'];
  /** Returns a single milestone from the current repository by number. */
  milestone?: Maybe<Gh_Milestone>;
  /** A list of milestones associated with the repository. */
  milestones?: Maybe<Gh_MilestoneConnection>;
  /** The repository's original mirror URL. */
  mirrorUrl?: Maybe<Scalars['gh_URI']>;
  /** The name of the repository. */
  name: Scalars['String'];
  /** The repository's name with owner. */
  nameWithOwner: Scalars['String'];
  /** A Git object in the repository */
  object?: Maybe<Gh_GitObject>;
  /** The image used to represent this repository in Open Graph data. */
  openGraphImageUrl: Scalars['gh_URI'];
  /** The User owner of the repository. */
  owner: Gh_RepositoryOwner;
  /** A list of packages under the owner. */
  packages: Gh_PackageConnection;
  /** The repository parent, if this is a fork. */
  parent?: Maybe<Gh_Repository>;
  /** A list of discussions that have been pinned in this repository. */
  pinnedDiscussions: Gh_PinnedDiscussionConnection;
  /** A list of pinned issues for this repository. */
  pinnedIssues?: Maybe<Gh_PinnedIssueConnection>;
  /** The primary language of the repository's code. */
  primaryLanguage?: Maybe<Gh_Language>;
  /** Find project by number. */
  project?: Maybe<Gh_Project>;
  /** Finds and returns the Project (beta) according to the provided Project (beta) number. */
  projectNext?: Maybe<Gh_ProjectNext>;
  /** A list of projects under the owner. */
  projects: Gh_ProjectConnection;
  /** List of projects (beta) linked to this repository. */
  projectsNext: Gh_ProjectNextConnection;
  /** The HTTP path listing the repository's projects */
  projectsResourcePath: Scalars['gh_URI'];
  /** The HTTP URL listing the repository's projects */
  projectsUrl: Scalars['gh_URI'];
  /** Returns a single pull request from the current repository by number. */
  pullRequest?: Maybe<Gh_PullRequest>;
  /** Returns a list of pull request templates associated to the repository */
  pullRequestTemplates?: Maybe<Array<Gh_PullRequestTemplate>>;
  /** A list of pull requests that have been opened in the repository. */
  pullRequests: Gh_PullRequestConnection;
  /** Identifies when the repository was last pushed to. */
  pushedAt?: Maybe<Scalars['gh_DateTime']>;
  /** Whether or not rebase-merging is enabled on this repository. */
  rebaseMergeAllowed: Scalars['Boolean'];
  /** Fetch a given ref from the repository */
  ref?: Maybe<Gh_Ref>;
  /** Fetch a list of refs from the repository */
  refs?: Maybe<Gh_RefConnection>;
  /** Lookup a single release given various criteria. */
  release?: Maybe<Gh_Release>;
  /** List of releases which are dependent on this repository. */
  releases: Gh_ReleaseConnection;
  /** A list of applied repository-topic associations for this repository. */
  repositoryTopics: Gh_RepositoryTopicConnection;
  /** The HTTP path for this repository */
  resourcePath: Scalars['gh_URI'];
  /** The security policy URL. */
  securityPolicyUrl?: Maybe<Scalars['gh_URI']>;
  /** A description of the repository, rendered to HTML without any links in it. */
  shortDescriptionHTML: Scalars['gh_HTML'];
  /** Whether or not squash-merging is enabled on this repository. */
  squashMergeAllowed: Scalars['Boolean'];
  /** The SSH URL to clone this repository */
  sshUrl: Scalars['gh_GitSSHRemote'];
  /**
   * Returns a count of how many stargazers there are on this object
   *
   */
  stargazerCount: Scalars['Int'];
  /** A list of users who have starred this starrable. */
  stargazers: Gh_StargazerConnection;
  /** Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit. */
  submodules: Gh_SubmoduleConnection;
  /** Temporary authentication token for cloning this repository. */
  tempCloneToken?: Maybe<Scalars['String']>;
  /** The repository from which this repository was generated, if any. */
  templateRepository?: Maybe<Gh_Repository>;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The HTTP URL for this repository */
  url: Scalars['gh_URI'];
  /** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
  usesCustomOpenGraphImage: Scalars['Boolean'];
  /** Indicates whether the viewer has admin permissions on this repository. */
  viewerCanAdminister: Scalars['Boolean'];
  /** Can the current viewer create new projects on this owner. */
  viewerCanCreateProjects: Scalars['Boolean'];
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe: Scalars['Boolean'];
  /** Indicates whether the viewer can update the topics of this repository. */
  viewerCanUpdateTopics: Scalars['Boolean'];
  /** The last commit email for the viewer. */
  viewerDefaultCommitEmail?: Maybe<Scalars['String']>;
  /** The last used merge method by the viewer or the default for the repository. */
  viewerDefaultMergeMethod: Gh_PullRequestMergeMethod;
  /** Returns a boolean indicating whether the viewing user has starred this starrable. */
  viewerHasStarred: Scalars['Boolean'];
  /** The users permission level on the repository. Will return null if authenticated as an GitHub App. */
  viewerPermission?: Maybe<Gh_RepositoryPermission>;
  /** A list of emails this viewer can commit with. */
  viewerPossibleCommitEmails?: Maybe<Array<Scalars['String']>>;
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: Maybe<Gh_SubscriptionState>;
  /** Indicates the repository's visibility level. */
  visibility: Gh_RepositoryVisibility;
  /** A list of vulnerability alerts that are on this repository. */
  vulnerabilityAlerts?: Maybe<Gh_RepositoryVulnerabilityAlertConnection>;
  /** A list of users watching the repository. */
  watchers: Gh_UserConnection;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryAssignableUsersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  query?: InputMaybe<Scalars['String']>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryBranchProtectionRulesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryCodeownersArgs = {
  refName?: InputMaybe<Scalars['String']>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryCollaboratorsArgs = {
  affiliation?: InputMaybe<Gh_CollaboratorAffiliation>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  query?: InputMaybe<Scalars['String']>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryCommitCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryDeployKeysArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryDeploymentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  environments?: InputMaybe<Array<Scalars['String']>>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_DeploymentOrder>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryDiscussionArgs = {
  number: Scalars['Int'];
};


/** A repository contains the content for a project. */
export type Gh_RepositoryDiscussionCategoriesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  filterByAssignable?: InputMaybe<Scalars['Boolean']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryDiscussionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  categoryId?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_DiscussionOrder>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryEnvironmentArgs = {
  name: Scalars['String'];
};


/** A repository contains the content for a project. */
export type Gh_RepositoryEnvironmentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryForksArgs = {
  affiliations?: InputMaybe<Array<InputMaybe<Gh_RepositoryAffiliation>>>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  isLocked?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_RepositoryOrder>;
  ownerAffiliations?: InputMaybe<Array<InputMaybe<Gh_RepositoryAffiliation>>>;
  privacy?: InputMaybe<Gh_RepositoryPrivacy>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryIssueArgs = {
  number: Scalars['Int'];
};


/** A repository contains the content for a project. */
export type Gh_RepositoryIssueOrPullRequestArgs = {
  number: Scalars['Int'];
};


/** A repository contains the content for a project. */
export type Gh_RepositoryIssuesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  filterBy?: InputMaybe<Gh_IssueFilters>;
  first?: InputMaybe<Scalars['Int']>;
  labels?: InputMaybe<Array<Scalars['String']>>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_IssueOrder>;
  states?: InputMaybe<Array<Gh_IssueState>>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryLabelArgs = {
  name: Scalars['String'];
};


/** A repository contains the content for a project. */
export type Gh_RepositoryLabelsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_LabelOrder>;
  query?: InputMaybe<Scalars['String']>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryLanguagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_LanguageOrder>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryMentionableUsersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  query?: InputMaybe<Scalars['String']>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryMilestoneArgs = {
  number: Scalars['Int'];
};


/** A repository contains the content for a project. */
export type Gh_RepositoryMilestonesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_MilestoneOrder>;
  query?: InputMaybe<Scalars['String']>;
  states?: InputMaybe<Array<Gh_MilestoneState>>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryObjectArgs = {
  expression?: InputMaybe<Scalars['String']>;
  oid?: InputMaybe<Scalars['gh_GitObjectID']>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryPackagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  names?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  orderBy?: InputMaybe<Gh_PackageOrder>;
  packageType?: InputMaybe<Gh_PackageType>;
  repositoryId?: InputMaybe<Scalars['ID']>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryPinnedDiscussionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryPinnedIssuesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryProjectArgs = {
  number: Scalars['Int'];
};


/** A repository contains the content for a project. */
export type Gh_RepositoryProjectNextArgs = {
  number: Scalars['Int'];
};


/** A repository contains the content for a project. */
export type Gh_RepositoryProjectsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_ProjectOrder>;
  search?: InputMaybe<Scalars['String']>;
  states?: InputMaybe<Array<Gh_ProjectState>>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryProjectsNextArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  query?: InputMaybe<Scalars['String']>;
  sortBy?: InputMaybe<Gh_ProjectNextOrderField>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryPullRequestArgs = {
  number: Scalars['Int'];
};


/** A repository contains the content for a project. */
export type Gh_RepositoryPullRequestsArgs = {
  after?: InputMaybe<Scalars['String']>;
  baseRefName?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  headRefName?: InputMaybe<Scalars['String']>;
  labels?: InputMaybe<Array<Scalars['String']>>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_IssueOrder>;
  states?: InputMaybe<Array<Gh_PullRequestState>>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryRefArgs = {
  qualifiedName: Scalars['String'];
};


/** A repository contains the content for a project. */
export type Gh_RepositoryRefsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  direction?: InputMaybe<Gh_OrderDirection>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_RefOrder>;
  query?: InputMaybe<Scalars['String']>;
  refPrefix: Scalars['String'];
};


/** A repository contains the content for a project. */
export type Gh_RepositoryReleaseArgs = {
  tagName: Scalars['String'];
};


/** A repository contains the content for a project. */
export type Gh_RepositoryReleasesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_ReleaseOrder>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryRepositoryTopicsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryShortDescriptionHtmlArgs = {
  limit?: InputMaybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryStargazersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_StarOrder>;
};


/** A repository contains the content for a project. */
export type Gh_RepositorySubmodulesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryVulnerabilityAlertsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  states?: InputMaybe<Array<Gh_RepositoryVulnerabilityAlertState>>;
};


/** A repository contains the content for a project. */
export type Gh_RepositoryWatchersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The affiliation of a user to a repository */
export enum Gh_RepositoryAffiliation {
  /** Repositories that the user has been added to as a collaborator. */
  Collaborator = 'COLLABORATOR',
  /** Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on. */
  OrganizationMember = 'ORGANIZATION_MEMBER',
  /** Repositories that are owned by the authenticated user. */
  Owner = 'OWNER'
}

/** Metadata for an audit entry with action repo.* */
export type Gh_RepositoryAuditEntryData = {
  /** The repository associated with the action */
  repository?: Maybe<Gh_Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars['gh_URI']>;
};

/** Information extracted from a repository's `CODEOWNERS` file. */
export type Gh_RepositoryCodeowners = {
  __typename?: 'gh_RepositoryCodeowners';
  /** Any problems that were encountered while parsing the `CODEOWNERS` file. */
  errors: Array<Gh_RepositoryCodeownersError>;
};

/** An error in a `CODEOWNERS` file. */
export type Gh_RepositoryCodeownersError = {
  __typename?: 'gh_RepositoryCodeownersError';
  /** The column number where the error occurs. */
  column: Scalars['Int'];
  /** A short string describing the type of error. */
  kind: Scalars['String'];
  /** The line number where the error occurs. */
  line: Scalars['Int'];
  /** A complete description of the error, combining information from other fields. */
  message: Scalars['String'];
  /** The path to the file when the error occurs. */
  path: Scalars['String'];
  /** The content of the line where the error occurs. */
  source: Scalars['String'];
  /** A suggestion of how to fix the error. */
  suggestion?: Maybe<Scalars['String']>;
};

/** The connection type for User. */
export type Gh_RepositoryCollaboratorConnection = {
  __typename?: 'gh_RepositoryCollaboratorConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_RepositoryCollaboratorEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_User>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Represents a user who is a collaborator of a repository. */
export type Gh_RepositoryCollaboratorEdge = {
  __typename?: 'gh_RepositoryCollaboratorEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  node: Gh_User;
  /** The permission the user has on the repository. */
  permission: Gh_RepositoryPermission;
  /** A list of sources for the user's access to the repository. */
  permissionSources?: Maybe<Array<Gh_PermissionSource>>;
};

/** A list of repositories owned by the subject. */
export type Gh_RepositoryConnection = {
  __typename?: 'gh_RepositoryConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_RepositoryEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Repository>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  /** The total size in kilobytes of all repositories in the connection. */
  totalDiskUsage: Scalars['Int'];
};

/** A repository contact link. */
export type Gh_RepositoryContactLink = {
  __typename?: 'gh_RepositoryContactLink';
  /** The contact link purpose. */
  about: Scalars['String'];
  /** The contact link name. */
  name: Scalars['String'];
  /** The contact link URL. */
  url: Scalars['gh_URI'];
};

/** The reason a repository is listed as 'contributed'. */
export enum Gh_RepositoryContributionType {
  /** Created a commit */
  Commit = 'COMMIT',
  /** Created an issue */
  Issue = 'ISSUE',
  /** Created a pull request */
  PullRequest = 'PULL_REQUEST',
  /** Reviewed a pull request */
  PullRequestReview = 'PULL_REQUEST_REVIEW',
  /** Created the repository */
  Repository = 'REPOSITORY'
}

/** Represents an author of discussions in repositories. */
export type Gh_RepositoryDiscussionAuthor = {
  /** Discussions this user has started. */
  repositoryDiscussions: Gh_DiscussionConnection;
};


/** Represents an author of discussions in repositories. */
export type Gh_RepositoryDiscussionAuthorRepositoryDiscussionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  answered?: InputMaybe<Scalars['Boolean']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_DiscussionOrder>;
  repositoryId?: InputMaybe<Scalars['ID']>;
};

/** Represents an author of discussion comments in repositories. */
export type Gh_RepositoryDiscussionCommentAuthor = {
  /** Discussion comments this user has authored. */
  repositoryDiscussionComments: Gh_DiscussionCommentConnection;
};


/** Represents an author of discussion comments in repositories. */
export type Gh_RepositoryDiscussionCommentAuthorRepositoryDiscussionCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  onlyAnswers?: InputMaybe<Scalars['Boolean']>;
  repositoryId?: InputMaybe<Scalars['ID']>;
};

/** An edge in a connection. */
export type Gh_RepositoryEdge = {
  __typename?: 'gh_RepositoryEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_Repository>;
};

/** A subset of repository info. */
export type Gh_RepositoryInfo = {
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The description of the repository. */
  description?: Maybe<Scalars['String']>;
  /** The description of the repository rendered to HTML. */
  descriptionHTML: Scalars['gh_HTML'];
  /** Returns how many forks there are of this repository in the whole network. */
  forkCount: Scalars['Int'];
  /** Indicates if the repository has issues feature enabled. */
  hasIssuesEnabled: Scalars['Boolean'];
  /** Indicates if the repository has the Projects feature enabled. */
  hasProjectsEnabled: Scalars['Boolean'];
  /** Indicates if the repository has wiki feature enabled. */
  hasWikiEnabled: Scalars['Boolean'];
  /** The repository's URL. */
  homepageUrl?: Maybe<Scalars['gh_URI']>;
  /** Indicates if the repository is unmaintained. */
  isArchived: Scalars['Boolean'];
  /** Identifies if the repository is a fork. */
  isFork: Scalars['Boolean'];
  /** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */
  isInOrganization: Scalars['Boolean'];
  /** Indicates if the repository has been locked or not. */
  isLocked: Scalars['Boolean'];
  /** Identifies if the repository is a mirror. */
  isMirror: Scalars['Boolean'];
  /** Identifies if the repository is private or internal. */
  isPrivate: Scalars['Boolean'];
  /** Identifies if the repository is a template that can be used to generate new repositories. */
  isTemplate: Scalars['Boolean'];
  /** The license associated with the repository */
  licenseInfo?: Maybe<Gh_License>;
  /** The reason the repository has been locked. */
  lockReason?: Maybe<Gh_RepositoryLockReason>;
  /** The repository's original mirror URL. */
  mirrorUrl?: Maybe<Scalars['gh_URI']>;
  /** The name of the repository. */
  name: Scalars['String'];
  /** The repository's name with owner. */
  nameWithOwner: Scalars['String'];
  /** The image used to represent this repository in Open Graph data. */
  openGraphImageUrl: Scalars['gh_URI'];
  /** The User owner of the repository. */
  owner: Gh_RepositoryOwner;
  /** Identifies when the repository was last pushed to. */
  pushedAt?: Maybe<Scalars['gh_DateTime']>;
  /** The HTTP path for this repository */
  resourcePath: Scalars['gh_URI'];
  /** A description of the repository, rendered to HTML without any links in it. */
  shortDescriptionHTML: Scalars['gh_HTML'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The HTTP URL for this repository */
  url: Scalars['gh_URI'];
  /** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
  usesCustomOpenGraphImage: Scalars['Boolean'];
  /** Indicates the repository's visibility level. */
  visibility: Gh_RepositoryVisibility;
};


/** A subset of repository info. */
export type Gh_RepositoryInfoShortDescriptionHtmlArgs = {
  limit?: InputMaybe<Scalars['Int']>;
};

/** Repository interaction limit that applies to this object. */
export type Gh_RepositoryInteractionAbility = {
  __typename?: 'gh_RepositoryInteractionAbility';
  /** The time the currently active limit expires. */
  expiresAt?: Maybe<Scalars['gh_DateTime']>;
  /** The current limit that is enabled on this object. */
  limit: Gh_RepositoryInteractionLimit;
  /** The origin of the currently active interaction limit. */
  origin: Gh_RepositoryInteractionLimitOrigin;
};

/** A repository interaction limit. */
export enum Gh_RepositoryInteractionLimit {
  /** Users that are not collaborators will not be able to interact with the repository. */
  CollaboratorsOnly = 'COLLABORATORS_ONLY',
  /** Users that have not previously committed to a repository’s default branch will be unable to interact with the repository. */
  ContributorsOnly = 'CONTRIBUTORS_ONLY',
  /** Users that have recently created their account will be unable to interact with the repository. */
  ExistingUsers = 'EXISTING_USERS',
  /** No interaction limits are enabled. */
  NoLimit = 'NO_LIMIT'
}

/** The length for a repository interaction limit to be enabled for. */
export enum Gh_RepositoryInteractionLimitExpiry {
  /** The interaction limit will expire after 1 day. */
  OneDay = 'ONE_DAY',
  /** The interaction limit will expire after 1 month. */
  OneMonth = 'ONE_MONTH',
  /** The interaction limit will expire after 1 week. */
  OneWeek = 'ONE_WEEK',
  /** The interaction limit will expire after 6 months. */
  SixMonths = 'SIX_MONTHS',
  /** The interaction limit will expire after 3 days. */
  ThreeDays = 'THREE_DAYS'
}

/** Indicates where an interaction limit is configured. */
export enum Gh_RepositoryInteractionLimitOrigin {
  /** A limit that is configured at the organization level. */
  Organization = 'ORGANIZATION',
  /** A limit that is configured at the repository level. */
  Repository = 'REPOSITORY',
  /** A limit that is configured at the user-wide level. */
  User = 'USER'
}

/** An invitation for a user to be added to a repository. */
export type Gh_RepositoryInvitation = Gh_Node & {
  __typename?: 'gh_RepositoryInvitation';
  /** The email address that received the invitation. */
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  /** The user who received the invitation. */
  invitee?: Maybe<Gh_User>;
  /** The user who created the invitation. */
  inviter: Gh_User;
  /** The permalink for this repository invitation. */
  permalink: Scalars['gh_URI'];
  /** The permission granted on this repository by this invitation. */
  permission: Gh_RepositoryPermission;
  /** The Repository the user is invited to. */
  repository?: Maybe<Gh_RepositoryInfo>;
};

/** A list of repository invitations. */
export type Gh_RepositoryInvitationConnection = {
  __typename?: 'gh_RepositoryInvitationConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_RepositoryInvitationEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_RepositoryInvitation>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_RepositoryInvitationEdge = {
  __typename?: 'gh_RepositoryInvitationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_RepositoryInvitation>;
};

/** Ordering options for repository invitation connections. */
export type Gh_RepositoryInvitationOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order repository invitations by. */
  field: Gh_RepositoryInvitationOrderField;
};

/** Properties by which repository invitation connections can be ordered. */
export enum Gh_RepositoryInvitationOrderField {
  /** Order repository invitations by creation time */
  CreatedAt = 'CREATED_AT'
}

/** The possible reasons a given repository could be in a locked state. */
export enum Gh_RepositoryLockReason {
  /** The repository is locked due to a billing related reason. */
  Billing = 'BILLING',
  /** The repository is locked due to a migration. */
  Migrating = 'MIGRATING',
  /** The repository is locked due to a move. */
  Moving = 'MOVING',
  /** The repository is locked due to a rename. */
  Rename = 'RENAME'
}

/** An Octoshift repository migration. */
export type Gh_RepositoryMigration = Gh_Migration & Gh_Node & {
  __typename?: 'gh_RepositoryMigration';
  /** The Octoshift migration flag to continue on error. */
  continueOnError: Scalars['Boolean'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The reason the migration failed. */
  failureReason?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  /** The URL for the migration log (expires 1 day after migration completes). */
  migrationLogUrl?: Maybe<Scalars['gh_URI']>;
  /** The Octoshift migration source. */
  migrationSource: Gh_MigrationSource;
  /** The target repository name. */
  repositoryName: Scalars['String'];
  /** The Octoshift migration source URL. */
  sourceUrl: Scalars['gh_URI'];
  /** The Octoshift migration state. */
  state: Gh_MigrationState;
};

/** The connection type for RepositoryMigration. */
export type Gh_RepositoryMigrationConnection = {
  __typename?: 'gh_RepositoryMigrationConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_RepositoryMigrationEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_RepositoryMigration>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Represents a repository migration. */
export type Gh_RepositoryMigrationEdge = {
  __typename?: 'gh_RepositoryMigrationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_RepositoryMigration>;
};

/** Ordering options for repository migrations. */
export type Gh_RepositoryMigrationOrder = {
  /** The ordering direction. */
  direction: Gh_RepositoryMigrationOrderDirection;
  /** The field to order repository migrations by. */
  field: Gh_RepositoryMigrationOrderField;
};

/** Possible directions in which to order a list of repository migrations when provided an `orderBy` argument. */
export enum Gh_RepositoryMigrationOrderDirection {
  /** Specifies an ascending order for a given `orderBy` argument. */
  Asc = 'ASC',
  /** Specifies a descending order for a given `orderBy` argument. */
  Desc = 'DESC'
}

/** Properties by which repository migrations can be ordered. */
export enum Gh_RepositoryMigrationOrderField {
  /** Order mannequins why when they were created. */
  CreatedAt = 'CREATED_AT'
}

/** Represents a object that belongs to a repository. */
export type Gh_RepositoryNode = {
  /** The repository associated with this node. */
  repository: Gh_Repository;
};

/** Ordering options for repository connections */
export type Gh_RepositoryOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order repositories by. */
  field: Gh_RepositoryOrderField;
};

/** Properties by which repository connections can be ordered. */
export enum Gh_RepositoryOrderField {
  /** Order repositories by creation time */
  CreatedAt = 'CREATED_AT',
  /** Order repositories by name */
  Name = 'NAME',
  /** Order repositories by push time */
  PushedAt = 'PUSHED_AT',
  /** Order repositories by number of stargazers */
  Stargazers = 'STARGAZERS',
  /** Order repositories by update time */
  UpdatedAt = 'UPDATED_AT'
}

/** Represents an owner of a Repository. */
export type Gh_RepositoryOwner = {
  /** A URL pointing to the owner's public avatar. */
  avatarUrl: Scalars['gh_URI'];
  id: Scalars['ID'];
  /** The username used to login. */
  login: Scalars['String'];
  /** A list of repositories that the user owns. */
  repositories: Gh_RepositoryConnection;
  /** Find Repository. */
  repository?: Maybe<Gh_Repository>;
  /** The HTTP URL for the owner. */
  resourcePath: Scalars['gh_URI'];
  /** The HTTP URL for the owner. */
  url: Scalars['gh_URI'];
};


/** Represents an owner of a Repository. */
export type Gh_RepositoryOwnerAvatarUrlArgs = {
  size?: InputMaybe<Scalars['Int']>;
};


/** Represents an owner of a Repository. */
export type Gh_RepositoryOwnerRepositoriesArgs = {
  affiliations?: InputMaybe<Array<InputMaybe<Gh_RepositoryAffiliation>>>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  isFork?: InputMaybe<Scalars['Boolean']>;
  isLocked?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_RepositoryOrder>;
  ownerAffiliations?: InputMaybe<Array<InputMaybe<Gh_RepositoryAffiliation>>>;
  privacy?: InputMaybe<Gh_RepositoryPrivacy>;
};


/** Represents an owner of a Repository. */
export type Gh_RepositoryOwnerRepositoryArgs = {
  followRenames?: InputMaybe<Scalars['Boolean']>;
  name: Scalars['String'];
};

/** The access level to a repository */
export enum Gh_RepositoryPermission {
  /** Can read, clone, and push to this repository. Can also manage issues, pull requests, and repository settings, including adding collaborators */
  Admin = 'ADMIN',
  /** Can read, clone, and push to this repository. They can also manage issues, pull requests, and some repository settings */
  Maintain = 'MAINTAIN',
  /** Can read and clone this repository. Can also open and comment on issues and pull requests */
  Read = 'READ',
  /** Can read and clone this repository. Can also manage issues and pull requests */
  Triage = 'TRIAGE',
  /** Can read, clone, and push to this repository. Can also manage issues and pull requests */
  Write = 'WRITE'
}

/** The privacy of a repository */
export enum Gh_RepositoryPrivacy {
  /** Private */
  Private = 'PRIVATE',
  /** Public */
  Public = 'PUBLIC'
}

/** A repository-topic connects a repository to a topic. */
export type Gh_RepositoryTopic = Gh_Node & Gh_UniformResourceLocatable & {
  __typename?: 'gh_RepositoryTopic';
  id: Scalars['ID'];
  /** The HTTP path for this repository-topic. */
  resourcePath: Scalars['gh_URI'];
  /** The topic. */
  topic: Gh_Topic;
  /** The HTTP URL for this repository-topic. */
  url: Scalars['gh_URI'];
};

/** The connection type for RepositoryTopic. */
export type Gh_RepositoryTopicConnection = {
  __typename?: 'gh_RepositoryTopicConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_RepositoryTopicEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_RepositoryTopic>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_RepositoryTopicEdge = {
  __typename?: 'gh_RepositoryTopicEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_RepositoryTopic>;
};

/** The repository's visibility level. */
export enum Gh_RepositoryVisibility {
  /** The repository is visible only to users in the same business. */
  Internal = 'INTERNAL',
  /** The repository is visible only to those with explicit access. */
  Private = 'PRIVATE',
  /** The repository is visible to everyone. */
  Public = 'PUBLIC'
}

/** Audit log entry for a repository_visibility_change.disable event. */
export type Gh_RepositoryVisibilityChangeDisableAuditEntry = Gh_AuditEntry & Gh_EnterpriseAuditEntryData & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_RepositoryVisibilityChangeDisableAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The slug of the enterprise. */
  enterpriseSlug?: Maybe<Scalars['String']>;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: Maybe<Scalars['gh_URI']>;
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a repository_visibility_change.enable event. */
export type Gh_RepositoryVisibilityChangeEnableAuditEntry = Gh_AuditEntry & Gh_EnterpriseAuditEntryData & Gh_Node & Gh_OrganizationAuditEntryData & {
  __typename?: 'gh_RepositoryVisibilityChangeEnableAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  /** The HTTP path for this enterprise. */
  enterpriseResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The slug of the enterprise. */
  enterpriseSlug?: Maybe<Scalars['String']>;
  /** The HTTP URL for this enterprise. */
  enterpriseUrl?: Maybe<Scalars['gh_URI']>;
  id: Scalars['ID'];
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** A Dependabot alert for a repository with a dependency affected by a security vulnerability. */
export type Gh_RepositoryVulnerabilityAlert = Gh_Node & Gh_RepositoryNode & {
  __typename?: 'gh_RepositoryVulnerabilityAlert';
  /** When was the alert created? */
  createdAt: Scalars['gh_DateTime'];
  /** The associated Dependabot update */
  dependabotUpdate?: Maybe<Gh_DependabotUpdate>;
  /** The reason the alert was dismissed */
  dismissReason?: Maybe<Scalars['String']>;
  /** When was the alert dismissed? */
  dismissedAt?: Maybe<Scalars['gh_DateTime']>;
  /** The user who dismissed the alert */
  dismisser?: Maybe<Gh_User>;
  /** The reason the alert was marked as fixed. */
  fixReason?: Maybe<Scalars['String']>;
  /** When was the alert fixed? */
  fixedAt?: Maybe<Scalars['gh_DateTime']>;
  id: Scalars['ID'];
  /** Identifies the alert number. */
  number: Scalars['Int'];
  /** The associated repository */
  repository: Gh_Repository;
  /** The associated security advisory */
  securityAdvisory?: Maybe<Gh_SecurityAdvisory>;
  /** The associated security vulnerability */
  securityVulnerability?: Maybe<Gh_SecurityVulnerability>;
  /** Identifies the state of the alert. */
  state: Gh_RepositoryVulnerabilityAlertState;
  /** The vulnerable manifest filename */
  vulnerableManifestFilename: Scalars['String'];
  /** The vulnerable manifest path */
  vulnerableManifestPath: Scalars['String'];
  /** The vulnerable requirements */
  vulnerableRequirements?: Maybe<Scalars['String']>;
};

/** The connection type for RepositoryVulnerabilityAlert. */
export type Gh_RepositoryVulnerabilityAlertConnection = {
  __typename?: 'gh_RepositoryVulnerabilityAlertConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_RepositoryVulnerabilityAlertEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_RepositoryVulnerabilityAlert>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_RepositoryVulnerabilityAlertEdge = {
  __typename?: 'gh_RepositoryVulnerabilityAlertEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_RepositoryVulnerabilityAlert>;
};

/** The possible states of an alert */
export enum Gh_RepositoryVulnerabilityAlertState {
  /** An alert that has been manually closed by a user. */
  Dismissed = 'DISMISSED',
  /** An alert that has been resolved by a code change. */
  Fixed = 'FIXED',
  /** An alert that is still open. */
  Open = 'OPEN'
}

/** Autogenerated input type of RequestReviews */
export type Gh_RequestReviewsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Node ID of the pull request to modify. */
  pullRequestId: Scalars['ID'];
  /** The Node IDs of the team to request. */
  teamIds?: InputMaybe<Array<Scalars['ID']>>;
  /** Add users to the set rather than replace. */
  union?: InputMaybe<Scalars['Boolean']>;
  /** The Node IDs of the user to request. */
  userIds?: InputMaybe<Array<Scalars['ID']>>;
};

/** Autogenerated return type of RequestReviews */
export type Gh_RequestReviewsPayload = {
  __typename?: 'gh_RequestReviewsPayload';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The pull request that is getting requests. */
  pullRequest?: Maybe<Gh_PullRequest>;
  /** The edge from the pull request to the requested reviewers. */
  requestedReviewersEdge?: Maybe<Gh_UserEdge>;
};

/** The possible states that can be requested when creating a check run. */
export enum Gh_RequestableCheckStatusState {
  /** The check suite or run has been completed. */
  Completed = 'COMPLETED',
  /** The check suite or run is in progress. */
  InProgress = 'IN_PROGRESS',
  /** The check suite or run is in pending state. */
  Pending = 'PENDING',
  /** The check suite or run has been queued. */
  Queued = 'QUEUED',
  /** The check suite or run is in waiting state. */
  Waiting = 'WAITING'
}

/** Types that can be requested reviewers. */
export type Gh_RequestedReviewer = Gh_Mannequin | Gh_Team | Gh_User;

/** Represents a type that can be required by a pull request for merging. */
export type Gh_RequirableByPullRequest = {
  /** Whether this is required to pass before merging for a specific pull request. */
  isRequired: Scalars['Boolean'];
};


/** Represents a type that can be required by a pull request for merging. */
export type Gh_RequirableByPullRequestIsRequiredArgs = {
  pullRequestId?: InputMaybe<Scalars['ID']>;
  pullRequestNumber?: InputMaybe<Scalars['Int']>;
};

/** Represents a required status check for a protected branch, but not any specific run of that check. */
export type Gh_RequiredStatusCheckDescription = {
  __typename?: 'gh_RequiredStatusCheckDescription';
  /** The App that must provide this status in order for it to be accepted. */
  app?: Maybe<Gh_App>;
  /** The name of this status. */
  context: Scalars['String'];
};

/** Specifies the attributes for a new or updated required status check. */
export type Gh_RequiredStatusCheckInput = {
  /** The ID of the App that must set the status in order for it to be accepted. Omit this value to use whichever app has recently been setting this status, or use "any" to allow any app to set the status. */
  appId?: InputMaybe<Scalars['ID']>;
  /** Status check context that must pass for commits to be accepted to the matching branch. */
  context: Scalars['String'];
};

/** Autogenerated input type of RerequestCheckSuite */
export type Gh_RerequestCheckSuiteInput = {
  /** The Node ID of the check suite. */
  checkSuiteId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Node ID of the repository. */
  repositoryId: Scalars['ID'];
};

/** Autogenerated return type of RerequestCheckSuite */
export type Gh_RerequestCheckSuitePayload = {
  __typename?: 'gh_RerequestCheckSuitePayload';
  /** The requested check suite. */
  checkSuite?: Maybe<Gh_CheckSuite>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of ResolveReviewThread */
export type Gh_ResolveReviewThreadInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the thread to resolve */
  threadId: Scalars['ID'];
};

/** Autogenerated return type of ResolveReviewThread */
export type Gh_ResolveReviewThreadPayload = {
  __typename?: 'gh_ResolveReviewThreadPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The thread to resolve. */
  thread?: Maybe<Gh_PullRequestReviewThread>;
};

/** Represents a private contribution a user made on GitHub. */
export type Gh_RestrictedContribution = Gh_Contribution & {
  __typename?: 'gh_RestrictedContribution';
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   *
   */
  isRestricted: Scalars['Boolean'];
  /** When this contribution was made. */
  occurredAt: Scalars['gh_DateTime'];
  /** The HTTP path for this contribution. */
  resourcePath: Scalars['gh_URI'];
  /** The HTTP URL for this contribution. */
  url: Scalars['gh_URI'];
  /**
   * The user who made this contribution.
   *
   */
  user: Gh_User;
};

/** A team or user who has the ability to dismiss a review on a protected branch. */
export type Gh_ReviewDismissalAllowance = Gh_Node & {
  __typename?: 'gh_ReviewDismissalAllowance';
  /** The actor that can dismiss. */
  actor?: Maybe<Gh_ReviewDismissalAllowanceActor>;
  /** Identifies the branch protection rule associated with the allowed user or team. */
  branchProtectionRule?: Maybe<Gh_BranchProtectionRule>;
  id: Scalars['ID'];
};

/** Types that can be an actor. */
export type Gh_ReviewDismissalAllowanceActor = Gh_Team | Gh_User;

/** The connection type for ReviewDismissalAllowance. */
export type Gh_ReviewDismissalAllowanceConnection = {
  __typename?: 'gh_ReviewDismissalAllowanceConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_ReviewDismissalAllowanceEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_ReviewDismissalAllowance>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_ReviewDismissalAllowanceEdge = {
  __typename?: 'gh_ReviewDismissalAllowanceEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_ReviewDismissalAllowance>;
};

/** Represents a 'review_dismissed' event on a given issue or pull request. */
export type Gh_ReviewDismissedEvent = Gh_Node & Gh_UniformResourceLocatable & {
  __typename?: 'gh_ReviewDismissedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** Identifies the optional message associated with the 'review_dismissed' event. */
  dismissalMessage?: Maybe<Scalars['String']>;
  /** Identifies the optional message associated with the event, rendered to HTML. */
  dismissalMessageHTML?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  /** Identifies the previous state of the review with the 'review_dismissed' event. */
  previousReviewState: Gh_PullRequestReviewState;
  /** PullRequest referenced by event. */
  pullRequest: Gh_PullRequest;
  /** Identifies the commit which caused the review to become stale. */
  pullRequestCommit?: Maybe<Gh_PullRequestCommit>;
  /** The HTTP path for this review dismissed event. */
  resourcePath: Scalars['gh_URI'];
  /** Identifies the review associated with the 'review_dismissed' event. */
  review?: Maybe<Gh_PullRequestReview>;
  /** The HTTP URL for this review dismissed event. */
  url: Scalars['gh_URI'];
};

/** A request for a user to review a pull request. */
export type Gh_ReviewRequest = Gh_Node & {
  __typename?: 'gh_ReviewRequest';
  /** Whether this request was created for a code owner */
  asCodeOwner: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  /** Identifies the pull request associated with this review request. */
  pullRequest: Gh_PullRequest;
  /** The reviewer that is requested. */
  requestedReviewer?: Maybe<Gh_RequestedReviewer>;
};

/** The connection type for ReviewRequest. */
export type Gh_ReviewRequestConnection = {
  __typename?: 'gh_ReviewRequestConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_ReviewRequestEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_ReviewRequest>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_ReviewRequestEdge = {
  __typename?: 'gh_ReviewRequestEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_ReviewRequest>;
};

/** Represents an 'review_request_removed' event on a given pull request. */
export type Gh_ReviewRequestRemovedEvent = Gh_Node & {
  __typename?: 'gh_ReviewRequestRemovedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest: Gh_PullRequest;
  /** Identifies the reviewer whose review request was removed. */
  requestedReviewer?: Maybe<Gh_RequestedReviewer>;
};

/** Represents an 'review_requested' event on a given pull request. */
export type Gh_ReviewRequestedEvent = Gh_Node & {
  __typename?: 'gh_ReviewRequestedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** PullRequest referenced by event. */
  pullRequest: Gh_PullRequest;
  /** Identifies the reviewer whose review was requested. */
  requestedReviewer?: Maybe<Gh_RequestedReviewer>;
};

/**
 * A hovercard context with a message describing the current code review state of the pull
 * request.
 *
 */
export type Gh_ReviewStatusHovercardContext = Gh_HovercardContext & {
  __typename?: 'gh_ReviewStatusHovercardContext';
  /** A string describing this context */
  message: Scalars['String'];
  /** An octicon to accompany this context */
  octicon: Scalars['String'];
  /** The current status of the pull request with respect to code review. */
  reviewDecision?: Maybe<Gh_PullRequestReviewDecision>;
};

/** Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole */
export type Gh_RevokeEnterpriseOrganizationsMigratorRoleInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */
  enterpriseId: Scalars['ID'];
  /** The login of the user to revoke the migrator role */
  login: Scalars['String'];
};

/** Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole */
export type Gh_RevokeEnterpriseOrganizationsMigratorRolePayload = {
  __typename?: 'gh_RevokeEnterpriseOrganizationsMigratorRolePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The organizations that had the migrator role revoked for the given user. */
  organizations?: Maybe<Gh_OrganizationConnection>;
};


/** Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole */
export type Gh_RevokeEnterpriseOrganizationsMigratorRolePayloadOrganizationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** Autogenerated input type of RevokeMigratorRole */
export type Gh_RevokeMigratorRoleInput = {
  /** The user login or Team slug to revoke the migrator role from. */
  actor: Scalars['String'];
  /** Specifies the type of the actor, can be either USER or TEAM. */
  actorType: Gh_ActorType;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the organization that the user/team belongs to. */
  organizationId: Scalars['ID'];
};

/** Autogenerated return type of RevokeMigratorRole */
export type Gh_RevokeMigratorRolePayload = {
  __typename?: 'gh_RevokeMigratorRolePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Did the operation succeed? */
  success?: Maybe<Scalars['Boolean']>;
};

/** Possible roles a user may have in relation to an organization. */
export enum Gh_RoleInOrganization {
  /** A user who is a direct member of the organization. */
  DirectMember = 'DIRECT_MEMBER',
  /** A user with full administrative access to the organization. */
  Owner = 'OWNER',
  /** A user who is unaffiliated with the organization. */
  Unaffiliated = 'UNAFFILIATED'
}

/** The possible digest algorithms used to sign SAML requests for an identity provider. */
export enum Gh_SamlDigestAlgorithm {
  /** SHA1 */
  Sha1 = 'SHA1',
  /** SHA256 */
  Sha256 = 'SHA256',
  /** SHA384 */
  Sha384 = 'SHA384',
  /** SHA512 */
  Sha512 = 'SHA512'
}

/** The possible signature algorithms used to sign SAML requests for a Identity Provider. */
export enum Gh_SamlSignatureAlgorithm {
  /** RSA-SHA1 */
  RsaSha1 = 'RSA_SHA1',
  /** RSA-SHA256 */
  RsaSha256 = 'RSA_SHA256',
  /** RSA-SHA384 */
  RsaSha384 = 'RSA_SHA384',
  /** RSA-SHA512 */
  RsaSha512 = 'RSA_SHA512'
}

/** A Saved Reply is text a user can use to reply quickly. */
export type Gh_SavedReply = Gh_Node & {
  __typename?: 'gh_SavedReply';
  /** The body of the saved reply. */
  body: Scalars['String'];
  /** The saved reply body rendered to HTML. */
  bodyHTML: Scalars['gh_HTML'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  /** The title of the saved reply. */
  title: Scalars['String'];
  /** The user that saved this reply. */
  user?: Maybe<Gh_Actor>;
};

/** The connection type for SavedReply. */
export type Gh_SavedReplyConnection = {
  __typename?: 'gh_SavedReplyConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_SavedReplyEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_SavedReply>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_SavedReplyEdge = {
  __typename?: 'gh_SavedReplyEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_SavedReply>;
};

/** Ordering options for saved reply connections. */
export type Gh_SavedReplyOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order saved replies by. */
  field: Gh_SavedReplyOrderField;
};

/** Properties by which saved reply connections can be ordered. */
export enum Gh_SavedReplyOrderField {
  /** Order saved reply by when they were updated. */
  UpdatedAt = 'UPDATED_AT'
}

/** The results of a search. */
export type Gh_SearchResultItem = Gh_App | Gh_Discussion | Gh_Issue | Gh_MarketplaceListing | Gh_Organization | Gh_PullRequest | Gh_Repository | Gh_User;

/** A list of results that matched against a search query. */
export type Gh_SearchResultItemConnection = {
  __typename?: 'gh_SearchResultItemConnection';
  /** The number of pieces of code that matched the search query. */
  codeCount: Scalars['Int'];
  /** The number of discussions that matched the search query. */
  discussionCount: Scalars['Int'];
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_SearchResultItemEdge>>>;
  /** The number of issues that matched the search query. */
  issueCount: Scalars['Int'];
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_SearchResultItem>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** The number of repositories that matched the search query. */
  repositoryCount: Scalars['Int'];
  /** The number of users that matched the search query. */
  userCount: Scalars['Int'];
  /** The number of wiki pages that matched the search query. */
  wikiCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_SearchResultItemEdge = {
  __typename?: 'gh_SearchResultItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_SearchResultItem>;
  /** Text matches on the result found. */
  textMatches?: Maybe<Array<Maybe<Gh_TextMatch>>>;
};

/** Represents the individual results of a search. */
export enum Gh_SearchType {
  /** Returns matching discussions in repositories. */
  Discussion = 'DISCUSSION',
  /** Returns results matching issues in repositories. */
  Issue = 'ISSUE',
  /** Returns results matching repositories. */
  Repository = 'REPOSITORY',
  /** Returns results matching users and organizations on GitHub. */
  User = 'USER'
}

/** A GitHub Security Advisory */
export type Gh_SecurityAdvisory = Gh_Node & {
  __typename?: 'gh_SecurityAdvisory';
  /** The CVSS associated with this advisory */
  cvss: Gh_Cvss;
  /** CWEs associated with this Advisory */
  cwes: Gh_CweConnection;
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** This is a long plaintext description of the advisory */
  description: Scalars['String'];
  /** The GitHub Security Advisory ID */
  ghsaId: Scalars['String'];
  id: Scalars['ID'];
  /** A list of identifiers for this advisory */
  identifiers: Array<Gh_SecurityAdvisoryIdentifier>;
  /** The permalink for the advisory's dependabot alerts page */
  notificationsPermalink?: Maybe<Scalars['gh_URI']>;
  /** The organization that originated the advisory */
  origin: Scalars['String'];
  /** The permalink for the advisory */
  permalink?: Maybe<Scalars['gh_URI']>;
  /** When the advisory was published */
  publishedAt: Scalars['gh_DateTime'];
  /** A list of references for this advisory */
  references: Array<Gh_SecurityAdvisoryReference>;
  /** The severity of the advisory */
  severity: Gh_SecurityAdvisorySeverity;
  /** A short plaintext summary of the advisory */
  summary: Scalars['String'];
  /** When the advisory was last updated */
  updatedAt: Scalars['gh_DateTime'];
  /** Vulnerabilities associated with this Advisory */
  vulnerabilities: Gh_SecurityVulnerabilityConnection;
  /** When the advisory was withdrawn, if it has been withdrawn */
  withdrawnAt?: Maybe<Scalars['gh_DateTime']>;
};


/** A GitHub Security Advisory */
export type Gh_SecurityAdvisoryCwesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A GitHub Security Advisory */
export type Gh_SecurityAdvisoryVulnerabilitiesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  ecosystem?: InputMaybe<Gh_SecurityAdvisoryEcosystem>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_SecurityVulnerabilityOrder>;
  package?: InputMaybe<Scalars['String']>;
  severities?: InputMaybe<Array<Gh_SecurityAdvisorySeverity>>;
};

/** The connection type for SecurityAdvisory. */
export type Gh_SecurityAdvisoryConnection = {
  __typename?: 'gh_SecurityAdvisoryConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_SecurityAdvisoryEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_SecurityAdvisory>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** The possible ecosystems of a security vulnerability's package. */
export enum Gh_SecurityAdvisoryEcosystem {
  /** PHP packages hosted at packagist.org */
  Composer = 'COMPOSER',
  /** Go modules */
  Go = 'GO',
  /** Java artifacts hosted at the Maven central repository */
  Maven = 'MAVEN',
  /** JavaScript packages hosted at npmjs.com */
  Npm = 'NPM',
  /** .NET packages hosted at the NuGet Gallery */
  Nuget = 'NUGET',
  /** Python packages hosted at PyPI.org */
  Pip = 'PIP',
  /** Ruby gems hosted at RubyGems.org */
  Rubygems = 'RUBYGEMS',
  /** Rust crates */
  Rust = 'RUST'
}

/** An edge in a connection. */
export type Gh_SecurityAdvisoryEdge = {
  __typename?: 'gh_SecurityAdvisoryEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_SecurityAdvisory>;
};

/** A GitHub Security Advisory Identifier */
export type Gh_SecurityAdvisoryIdentifier = {
  __typename?: 'gh_SecurityAdvisoryIdentifier';
  /** The identifier type, e.g. GHSA, CVE */
  type: Scalars['String'];
  /** The identifier */
  value: Scalars['String'];
};

/** An advisory identifier to filter results on. */
export type Gh_SecurityAdvisoryIdentifierFilter = {
  /** The identifier type. */
  type: Gh_SecurityAdvisoryIdentifierType;
  /** The identifier string. Supports exact or partial matching. */
  value: Scalars['String'];
};

/** Identifier formats available for advisories. */
export enum Gh_SecurityAdvisoryIdentifierType {
  /** Common Vulnerabilities and Exposures Identifier. */
  Cve = 'CVE',
  /** GitHub Security Advisory ID. */
  Ghsa = 'GHSA'
}

/** Ordering options for security advisory connections */
export type Gh_SecurityAdvisoryOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order security advisories by. */
  field: Gh_SecurityAdvisoryOrderField;
};

/** Properties by which security advisory connections can be ordered. */
export enum Gh_SecurityAdvisoryOrderField {
  /** Order advisories by publication time */
  PublishedAt = 'PUBLISHED_AT',
  /** Order advisories by update time */
  UpdatedAt = 'UPDATED_AT'
}

/** An individual package */
export type Gh_SecurityAdvisoryPackage = {
  __typename?: 'gh_SecurityAdvisoryPackage';
  /** The ecosystem the package belongs to, e.g. RUBYGEMS, NPM */
  ecosystem: Gh_SecurityAdvisoryEcosystem;
  /** The package name */
  name: Scalars['String'];
};

/** An individual package version */
export type Gh_SecurityAdvisoryPackageVersion = {
  __typename?: 'gh_SecurityAdvisoryPackageVersion';
  /** The package name or version */
  identifier: Scalars['String'];
};

/** A GitHub Security Advisory Reference */
export type Gh_SecurityAdvisoryReference = {
  __typename?: 'gh_SecurityAdvisoryReference';
  /** A publicly accessible reference */
  url: Scalars['gh_URI'];
};

/** Severity of the vulnerability. */
export enum Gh_SecurityAdvisorySeverity {
  /** Critical. */
  Critical = 'CRITICAL',
  /** High. */
  High = 'HIGH',
  /** Low. */
  Low = 'LOW',
  /** Moderate. */
  Moderate = 'MODERATE'
}

/** An individual vulnerability within an Advisory */
export type Gh_SecurityVulnerability = {
  __typename?: 'gh_SecurityVulnerability';
  /** The Advisory associated with this Vulnerability */
  advisory: Gh_SecurityAdvisory;
  /** The first version containing a fix for the vulnerability */
  firstPatchedVersion?: Maybe<Gh_SecurityAdvisoryPackageVersion>;
  /** A description of the vulnerable package */
  package: Gh_SecurityAdvisoryPackage;
  /** The severity of the vulnerability within this package */
  severity: Gh_SecurityAdvisorySeverity;
  /** When the vulnerability was last updated */
  updatedAt: Scalars['gh_DateTime'];
  /**
   * A string that describes the vulnerable package versions.
   * This string follows a basic syntax with a few forms.
   * + `= 0.2.0` denotes a single vulnerable version.
   * + `<= 1.0.8` denotes a version range up to and including the specified version
   * + `< 0.1.11` denotes a version range up to, but excluding, the specified version
   * + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
   * + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
   *
   */
  vulnerableVersionRange: Scalars['String'];
};

/** The connection type for SecurityVulnerability. */
export type Gh_SecurityVulnerabilityConnection = {
  __typename?: 'gh_SecurityVulnerabilityConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_SecurityVulnerabilityEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_SecurityVulnerability>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_SecurityVulnerabilityEdge = {
  __typename?: 'gh_SecurityVulnerabilityEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_SecurityVulnerability>;
};

/** Ordering options for security vulnerability connections */
export type Gh_SecurityVulnerabilityOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order security vulnerabilities by. */
  field: Gh_SecurityVulnerabilityOrderField;
};

/** Properties by which security vulnerability connections can be ordered. */
export enum Gh_SecurityVulnerabilityOrderField {
  /** Order vulnerability by update time */
  UpdatedAt = 'UPDATED_AT'
}

/** Autogenerated input type of SetEnterpriseIdentityProvider */
export type Gh_SetEnterpriseIdentityProviderInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The digest algorithm used to sign SAML requests for the identity provider. */
  digestMethod: Gh_SamlDigestAlgorithm;
  /** The ID of the enterprise on which to set an identity provider. */
  enterpriseId: Scalars['ID'];
  /** The x509 certificate used by the identity provider to sign assertions and responses. */
  idpCertificate: Scalars['String'];
  /** The Issuer Entity ID for the SAML identity provider */
  issuer?: InputMaybe<Scalars['String']>;
  /** The signature algorithm used to sign SAML requests for the identity provider. */
  signatureMethod: Gh_SamlSignatureAlgorithm;
  /** The URL endpoint for the identity provider's SAML SSO. */
  ssoUrl: Scalars['gh_URI'];
};

/** Autogenerated return type of SetEnterpriseIdentityProvider */
export type Gh_SetEnterpriseIdentityProviderPayload = {
  __typename?: 'gh_SetEnterpriseIdentityProviderPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The identity provider for the enterprise. */
  identityProvider?: Maybe<Gh_EnterpriseIdentityProvider>;
};

/** Autogenerated input type of SetOrganizationInteractionLimit */
export type Gh_SetOrganizationInteractionLimitInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** When this limit should expire. */
  expiry?: InputMaybe<Gh_RepositoryInteractionLimitExpiry>;
  /** The limit to set. */
  limit: Gh_RepositoryInteractionLimit;
  /** The ID of the organization to set a limit for. */
  organizationId: Scalars['ID'];
};

/** Autogenerated return type of SetOrganizationInteractionLimit */
export type Gh_SetOrganizationInteractionLimitPayload = {
  __typename?: 'gh_SetOrganizationInteractionLimitPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The organization that the interaction limit was set for. */
  organization?: Maybe<Gh_Organization>;
};

/** Autogenerated input type of SetRepositoryInteractionLimit */
export type Gh_SetRepositoryInteractionLimitInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** When this limit should expire. */
  expiry?: InputMaybe<Gh_RepositoryInteractionLimitExpiry>;
  /** The limit to set. */
  limit: Gh_RepositoryInteractionLimit;
  /** The ID of the repository to set a limit for. */
  repositoryId: Scalars['ID'];
};

/** Autogenerated return type of SetRepositoryInteractionLimit */
export type Gh_SetRepositoryInteractionLimitPayload = {
  __typename?: 'gh_SetRepositoryInteractionLimitPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The repository that the interaction limit was set for. */
  repository?: Maybe<Gh_Repository>;
};

/** Autogenerated input type of SetUserInteractionLimit */
export type Gh_SetUserInteractionLimitInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** When this limit should expire. */
  expiry?: InputMaybe<Gh_RepositoryInteractionLimitExpiry>;
  /** The limit to set. */
  limit: Gh_RepositoryInteractionLimit;
  /** The ID of the user to set a limit for. */
  userId: Scalars['ID'];
};

/** Autogenerated return type of SetUserInteractionLimit */
export type Gh_SetUserInteractionLimitPayload = {
  __typename?: 'gh_SetUserInteractionLimitPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The user that the interaction limit was set for. */
  user?: Maybe<Gh_User>;
};

/** Represents an S/MIME signature on a Commit or Tag. */
export type Gh_SmimeSignature = Gh_GitSignature & {
  __typename?: 'gh_SmimeSignature';
  /** Email used to sign this object. */
  email: Scalars['String'];
  /** True if the signature is valid and verified by GitHub. */
  isValid: Scalars['Boolean'];
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload: Scalars['String'];
  /** ASCII-armored signature header from object. */
  signature: Scalars['String'];
  /** GitHub user corresponding to the email signing this commit. */
  signer?: Maybe<Gh_User>;
  /** The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid. */
  state: Gh_GitSignatureState;
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub: Scalars['Boolean'];
};

/** Represents a sort by field and direction. */
export type Gh_SortBy = {
  __typename?: 'gh_SortBy';
  /** The direction of the sorting. Possible values are ASC and DESC. */
  direction: Gh_OrderDirection;
  /** The id of the field by which the column is sorted. */
  field: Scalars['Int'];
};

/** Entities that can sponsor others via GitHub Sponsors */
export type Gh_Sponsor = Gh_Organization | Gh_User;

/** The connection type for Sponsor. */
export type Gh_SponsorConnection = {
  __typename?: 'gh_SponsorConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_SponsorEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Sponsor>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Represents a user or organization who is sponsoring someone in GitHub Sponsors. */
export type Gh_SponsorEdge = {
  __typename?: 'gh_SponsorEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_Sponsor>;
};

/** Ordering options for connections to get sponsor entities for GitHub Sponsors. */
export type Gh_SponsorOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order sponsor entities by. */
  field: Gh_SponsorOrderField;
};

/** Properties by which sponsor connections can be ordered. */
export enum Gh_SponsorOrderField {
  /** Order sponsorable entities by login (username). */
  Login = 'LOGIN',
  /** Order sponsors by their relevance to the viewer. */
  Relevance = 'RELEVANCE'
}

/** Entities that can be sponsored through GitHub Sponsors */
export type Gh_Sponsorable = {
  /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
  estimatedNextSponsorsPayoutInCents: Scalars['Int'];
  /** True if this user/organization has a GitHub Sponsors listing. */
  hasSponsorsListing: Scalars['Boolean'];
  /** Check if the given account is sponsoring this user/organization. */
  isSponsoredBy: Scalars['Boolean'];
  /** True if the viewer is sponsored by this user/organization. */
  isSponsoringViewer: Scalars['Boolean'];
  /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
  monthlyEstimatedSponsorsIncomeInCents: Scalars['Int'];
  /** List of users and organizations this entity is sponsoring. */
  sponsoring: Gh_SponsorConnection;
  /** List of sponsors for this user or organization. */
  sponsors: Gh_SponsorConnection;
  /** Events involving this sponsorable, such as new sponsorships. */
  sponsorsActivities: Gh_SponsorsActivityConnection;
  /** The GitHub Sponsors listing for this user or organization. */
  sponsorsListing?: Maybe<Gh_SponsorsListing>;
  /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. */
  sponsorshipForViewerAsSponsor?: Maybe<Gh_Sponsorship>;
  /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. */
  sponsorshipForViewerAsSponsorable?: Maybe<Gh_Sponsorship>;
  /** List of sponsorship updates sent from this sponsorable to sponsors. */
  sponsorshipNewsletters: Gh_SponsorshipNewsletterConnection;
  /** This object's sponsorships as the maintainer. */
  sponsorshipsAsMaintainer: Gh_SponsorshipConnection;
  /** This object's sponsorships as the sponsor. */
  sponsorshipsAsSponsor: Gh_SponsorshipConnection;
  /** Whether or not the viewer is able to sponsor this user/organization. */
  viewerCanSponsor: Scalars['Boolean'];
  /** True if the viewer is sponsoring this user/organization. */
  viewerIsSponsoring: Scalars['Boolean'];
};


/** Entities that can be sponsored through GitHub Sponsors */
export type Gh_SponsorableIsSponsoredByArgs = {
  accountLogin: Scalars['String'];
};


/** Entities that can be sponsored through GitHub Sponsors */
export type Gh_SponsorableSponsoringArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_SponsorOrder>;
};


/** Entities that can be sponsored through GitHub Sponsors */
export type Gh_SponsorableSponsorsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_SponsorOrder>;
  tierId?: InputMaybe<Scalars['ID']>;
};


/** Entities that can be sponsored through GitHub Sponsors */
export type Gh_SponsorableSponsorsActivitiesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_SponsorsActivityOrder>;
  period?: InputMaybe<Gh_SponsorsActivityPeriod>;
};


/** Entities that can be sponsored through GitHub Sponsors */
export type Gh_SponsorableSponsorshipNewslettersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_SponsorshipNewsletterOrder>;
};


/** Entities that can be sponsored through GitHub Sponsors */
export type Gh_SponsorableSponsorshipsAsMaintainerArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  includePrivate?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_SponsorshipOrder>;
};


/** Entities that can be sponsored through GitHub Sponsors */
export type Gh_SponsorableSponsorshipsAsSponsorArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_SponsorshipOrder>;
};

/** Entities that can be sponsored via GitHub Sponsors */
export type Gh_SponsorableItem = Gh_Organization | Gh_User;

/** The connection type for SponsorableItem. */
export type Gh_SponsorableItemConnection = {
  __typename?: 'gh_SponsorableItemConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_SponsorableItemEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_SponsorableItem>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_SponsorableItemEdge = {
  __typename?: 'gh_SponsorableItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_SponsorableItem>;
};

/** Ordering options for connections to get sponsorable entities for GitHub Sponsors. */
export type Gh_SponsorableOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order sponsorable entities by. */
  field: Gh_SponsorableOrderField;
};

/** Properties by which sponsorable connections can be ordered. */
export enum Gh_SponsorableOrderField {
  /** Order sponsorable entities by login (username). */
  Login = 'LOGIN'
}

/** An event related to sponsorship activity. */
export type Gh_SponsorsActivity = Gh_Node & {
  __typename?: 'gh_SponsorsActivity';
  /** What action this activity indicates took place. */
  action: Gh_SponsorsActivityAction;
  id: Scalars['ID'];
  /** The tier that the sponsorship used to use, for tier change events. */
  previousSponsorsTier?: Maybe<Gh_SponsorsTier>;
  /** The user or organization who triggered this activity and was/is sponsoring the sponsorable. */
  sponsor?: Maybe<Gh_Sponsor>;
  /** The user or organization that is being sponsored, the maintainer. */
  sponsorable: Gh_Sponsorable;
  /** The associated sponsorship tier. */
  sponsorsTier?: Maybe<Gh_SponsorsTier>;
  /** The timestamp of this event. */
  timestamp?: Maybe<Scalars['gh_DateTime']>;
};

/** The possible actions that GitHub Sponsors activities can represent. */
export enum Gh_SponsorsActivityAction {
  /** The activity was cancelling a sponsorship. */
  CancelledSponsorship = 'CANCELLED_SPONSORSHIP',
  /** The activity was starting a sponsorship. */
  NewSponsorship = 'NEW_SPONSORSHIP',
  /** The activity was scheduling a downgrade or cancellation. */
  PendingChange = 'PENDING_CHANGE',
  /** The activity was funds being refunded to the sponsor or GitHub. */
  Refund = 'REFUND',
  /** The activity was disabling matching for a previously matched sponsorship. */
  SponsorMatchDisabled = 'SPONSOR_MATCH_DISABLED',
  /** The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change. */
  TierChange = 'TIER_CHANGE'
}

/** The connection type for SponsorsActivity. */
export type Gh_SponsorsActivityConnection = {
  __typename?: 'gh_SponsorsActivityConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_SponsorsActivityEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_SponsorsActivity>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_SponsorsActivityEdge = {
  __typename?: 'gh_SponsorsActivityEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_SponsorsActivity>;
};

/** Ordering options for GitHub Sponsors activity connections. */
export type Gh_SponsorsActivityOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order activity by. */
  field: Gh_SponsorsActivityOrderField;
};

/** Properties by which GitHub Sponsors activity connections can be ordered. */
export enum Gh_SponsorsActivityOrderField {
  /** Order activities by when they happened. */
  Timestamp = 'TIMESTAMP'
}

/** The possible time periods for which Sponsors activities can be requested. */
export enum Gh_SponsorsActivityPeriod {
  /** Don't restrict the activity to any date range, include all activity. */
  All = 'ALL',
  /** The previous calendar day. */
  Day = 'DAY',
  /** The previous thirty days. */
  Month = 'MONTH',
  /** The previous seven days. */
  Week = 'WEEK'
}

/** A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain. */
export type Gh_SponsorsGoal = {
  __typename?: 'gh_SponsorsGoal';
  /** A description of the goal from the maintainer. */
  description?: Maybe<Scalars['String']>;
  /** What the objective of this goal is. */
  kind: Gh_SponsorsGoalKind;
  /** The percentage representing how complete this goal is, between 0-100. */
  percentComplete: Scalars['Int'];
  /** What the goal amount is. Represents an amount in USD for monthly sponsorship amount goals. Represents a count of unique sponsors for total sponsors count goals. */
  targetValue: Scalars['Int'];
  /** A brief summary of the kind and target value of this goal. */
  title: Scalars['String'];
};

/** The different kinds of goals a GitHub Sponsors member can have. */
export enum Gh_SponsorsGoalKind {
  /** The goal is about getting a certain amount in USD from sponsorships each month. */
  MonthlySponsorshipAmount = 'MONTHLY_SPONSORSHIP_AMOUNT',
  /** The goal is about reaching a certain number of sponsors. */
  TotalSponsorsCount = 'TOTAL_SPONSORS_COUNT'
}

/** A GitHub Sponsors listing. */
export type Gh_SponsorsListing = Gh_Node & {
  __typename?: 'gh_SponsorsListing';
  /** The current goal the maintainer is trying to reach with GitHub Sponsors, if any. */
  activeGoal?: Maybe<Gh_SponsorsGoal>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The full description of the listing. */
  fullDescription: Scalars['String'];
  /** The full description of the listing rendered to HTML. */
  fullDescriptionHTML: Scalars['gh_HTML'];
  id: Scalars['ID'];
  /** Whether this listing is publicly visible. */
  isPublic: Scalars['Boolean'];
  /** The listing's full name. */
  name: Scalars['String'];
  /** A future date on which this listing is eligible to receive a payout. */
  nextPayoutDate?: Maybe<Scalars['gh_Date']>;
  /** The short description of the listing. */
  shortDescription: Scalars['String'];
  /** The short name of the listing. */
  slug: Scalars['String'];
  /** The entity this listing represents who can be sponsored on GitHub Sponsors. */
  sponsorable: Gh_Sponsorable;
  /** The published tiers for this GitHub Sponsors listing. */
  tiers?: Maybe<Gh_SponsorsTierConnection>;
};


/** A GitHub Sponsors listing. */
export type Gh_SponsorsListingTiersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_SponsorsTierOrder>;
};

/** A GitHub Sponsors tier associated with a GitHub Sponsors listing. */
export type Gh_SponsorsTier = Gh_Node & {
  __typename?: 'gh_SponsorsTier';
  /** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
  adminInfo?: Maybe<Gh_SponsorsTierAdminInfo>;
  /** Get a different tier for this tier's maintainer that is at the same frequency as this tier but with an equal or lesser cost. Returns the published tier with the monthly price closest to this tier's without going over. */
  closestLesserValueTier?: Maybe<Gh_SponsorsTier>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The description of the tier. */
  description: Scalars['String'];
  /** The tier description rendered to HTML */
  descriptionHTML: Scalars['gh_HTML'];
  id: Scalars['ID'];
  /** Whether this tier was chosen at checkout time by the sponsor rather than defined ahead of time by the maintainer who manages the Sponsors listing. */
  isCustomAmount: Scalars['Boolean'];
  /** Whether this tier is only for use with one-time sponsorships. */
  isOneTime: Scalars['Boolean'];
  /** How much this tier costs per month in cents. */
  monthlyPriceInCents: Scalars['Int'];
  /** How much this tier costs per month in USD. */
  monthlyPriceInDollars: Scalars['Int'];
  /** The name of the tier. */
  name: Scalars['String'];
  /** The sponsors listing that this tier belongs to. */
  sponsorsListing: Gh_SponsorsListing;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
};

/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
export type Gh_SponsorsTierAdminInfo = {
  __typename?: 'gh_SponsorsTierAdminInfo';
  /** The sponsorships associated with this tier. */
  sponsorships: Gh_SponsorshipConnection;
};


/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
export type Gh_SponsorsTierAdminInfoSponsorshipsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  includePrivate?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_SponsorshipOrder>;
};

/** The connection type for SponsorsTier. */
export type Gh_SponsorsTierConnection = {
  __typename?: 'gh_SponsorsTierConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_SponsorsTierEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_SponsorsTier>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_SponsorsTierEdge = {
  __typename?: 'gh_SponsorsTierEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_SponsorsTier>;
};

/** Ordering options for Sponsors tiers connections. */
export type Gh_SponsorsTierOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order tiers by. */
  field: Gh_SponsorsTierOrderField;
};

/** Properties by which Sponsors tiers connections can be ordered. */
export enum Gh_SponsorsTierOrderField {
  /** Order tiers by creation time. */
  CreatedAt = 'CREATED_AT',
  /** Order tiers by their monthly price in cents */
  MonthlyPriceInCents = 'MONTHLY_PRICE_IN_CENTS'
}

/** A sponsorship relationship between a sponsor and a maintainer */
export type Gh_Sponsorship = Gh_Node & {
  __typename?: 'gh_Sponsorship';
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** Whether this sponsorship represents a one-time payment versus a recurring sponsorship. */
  isOneTimePayment: Scalars['Boolean'];
  /** Check if the sponsor has chosen to receive sponsorship update emails sent from the sponsorable. Only returns a non-null value when the viewer has permission to know this. */
  isSponsorOptedIntoEmail?: Maybe<Scalars['Boolean']>;
  /** The entity that is being sponsored */
  maintainer: Gh_User;
  /** The privacy level for this sponsorship. */
  privacyLevel: Gh_SponsorshipPrivacy;
  /** The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user. */
  sponsor?: Maybe<Gh_User>;
  /** The user or organization that is sponsoring, if you have permission to view them. */
  sponsorEntity?: Maybe<Gh_Sponsor>;
  /** The entity that is being sponsored */
  sponsorable: Gh_Sponsorable;
  /** The associated sponsorship tier */
  tier?: Maybe<Gh_SponsorsTier>;
  /** Identifies the date and time when the current tier was chosen for this sponsorship. */
  tierSelectedAt?: Maybe<Scalars['gh_DateTime']>;
};

/** The connection type for Sponsorship. */
export type Gh_SponsorshipConnection = {
  __typename?: 'gh_SponsorshipConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_SponsorshipEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Sponsorship>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
  /** The total amount in cents of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships. */
  totalRecurringMonthlyPriceInCents: Scalars['Int'];
  /** The total amount in USD of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships. */
  totalRecurringMonthlyPriceInDollars: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_SponsorshipEdge = {
  __typename?: 'gh_SponsorshipEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_Sponsorship>;
};

/** An update sent to sponsors of a user or organization on GitHub Sponsors. */
export type Gh_SponsorshipNewsletter = Gh_Node & {
  __typename?: 'gh_SponsorshipNewsletter';
  /** The contents of the newsletter, the message the sponsorable wanted to give. */
  body: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** Indicates if the newsletter has been made available to sponsors. */
  isPublished: Scalars['Boolean'];
  /** The user or organization this newsletter is from. */
  sponsorable: Gh_Sponsorable;
  /** The subject of the newsletter, what it's about. */
  subject: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
};

/** The connection type for SponsorshipNewsletter. */
export type Gh_SponsorshipNewsletterConnection = {
  __typename?: 'gh_SponsorshipNewsletterConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_SponsorshipNewsletterEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_SponsorshipNewsletter>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_SponsorshipNewsletterEdge = {
  __typename?: 'gh_SponsorshipNewsletterEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_SponsorshipNewsletter>;
};

/** Ordering options for sponsorship newsletter connections. */
export type Gh_SponsorshipNewsletterOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order sponsorship newsletters by. */
  field: Gh_SponsorshipNewsletterOrderField;
};

/** Properties by which sponsorship update connections can be ordered. */
export enum Gh_SponsorshipNewsletterOrderField {
  /** Order sponsorship newsletters by when they were created. */
  CreatedAt = 'CREATED_AT'
}

/** Ordering options for sponsorship connections. */
export type Gh_SponsorshipOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order sponsorship by. */
  field: Gh_SponsorshipOrderField;
};

/** Properties by which sponsorship connections can be ordered. */
export enum Gh_SponsorshipOrderField {
  /** Order sponsorship by creation time. */
  CreatedAt = 'CREATED_AT'
}

/** The privacy of a sponsorship */
export enum Gh_SponsorshipPrivacy {
  /** Private */
  Private = 'PRIVATE',
  /** Public */
  Public = 'PUBLIC'
}

/** Ways in which star connections can be ordered. */
export type Gh_StarOrder = {
  /** The direction in which to order nodes. */
  direction: Gh_OrderDirection;
  /** The field in which to order nodes by. */
  field: Gh_StarOrderField;
};

/** Properties by which star connections can be ordered. */
export enum Gh_StarOrderField {
  /** Allows ordering a list of stars by when they were created. */
  StarredAt = 'STARRED_AT'
}

/** The connection type for User. */
export type Gh_StargazerConnection = {
  __typename?: 'gh_StargazerConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_StargazerEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_User>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Represents a user that's starred a repository. */
export type Gh_StargazerEdge = {
  __typename?: 'gh_StargazerEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  node: Gh_User;
  /** Identifies when the item was starred. */
  starredAt: Scalars['gh_DateTime'];
};

/** Things that can be starred. */
export type Gh_Starrable = {
  id: Scalars['ID'];
  /**
   * Returns a count of how many stargazers there are on this object
   *
   */
  stargazerCount: Scalars['Int'];
  /** A list of users who have starred this starrable. */
  stargazers: Gh_StargazerConnection;
  /** Returns a boolean indicating whether the viewing user has starred this starrable. */
  viewerHasStarred: Scalars['Boolean'];
};


/** Things that can be starred. */
export type Gh_StarrableStargazersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_StarOrder>;
};

/** The connection type for Repository. */
export type Gh_StarredRepositoryConnection = {
  __typename?: 'gh_StarredRepositoryConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_StarredRepositoryEdge>>>;
  /** Is the list of stars for this user truncated? This is true for users that have many stars. */
  isOverLimit: Scalars['Boolean'];
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Repository>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Represents a starred repository. */
export type Gh_StarredRepositoryEdge = {
  __typename?: 'gh_StarredRepositoryEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  node: Gh_Repository;
  /** Identifies when the item was starred. */
  starredAt: Scalars['gh_DateTime'];
};

/** Autogenerated input type of StartRepositoryMigration */
export type Gh_StartRepositoryMigrationInput = {
  /** The Octoshift migration source access token. */
  accessToken?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Whether to continue the migration on error */
  continueOnError?: InputMaybe<Scalars['Boolean']>;
  /** The signed URL to access the user-uploaded git archive */
  gitArchiveUrl?: InputMaybe<Scalars['String']>;
  /** The GitHub personal access token of the user importing to the target repository. */
  githubPat?: InputMaybe<Scalars['String']>;
  /** The signed URL to access the user-uploaded metadata archive */
  metadataArchiveUrl?: InputMaybe<Scalars['String']>;
  /** The ID of the organization that will own the imported repository. */
  ownerId: Scalars['ID'];
  /** The name of the imported repository. */
  repositoryName: Scalars['String'];
  /** Whether to skip migrating releases for the repository. */
  skipReleases?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the Octoshift migration source. */
  sourceId: Scalars['ID'];
  /** The Octoshift migration source repository URL. */
  sourceRepositoryUrl: Scalars['gh_URI'];
};

/** Autogenerated return type of StartRepositoryMigration */
export type Gh_StartRepositoryMigrationPayload = {
  __typename?: 'gh_StartRepositoryMigrationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The new Octoshift repository migration. */
  repositoryMigration?: Maybe<Gh_RepositoryMigration>;
};

/** Represents a commit status. */
export type Gh_Status = Gh_Node & {
  __typename?: 'gh_Status';
  /** A list of status contexts and check runs for this commit. */
  combinedContexts: Gh_StatusCheckRollupContextConnection;
  /** The commit this status is attached to. */
  commit?: Maybe<Gh_Commit>;
  /** Looks up an individual status context by context name. */
  context?: Maybe<Gh_StatusContext>;
  /** The individual status contexts for this commit. */
  contexts: Array<Gh_StatusContext>;
  id: Scalars['ID'];
  /** The combined commit status. */
  state: Gh_StatusState;
};


/** Represents a commit status. */
export type Gh_StatusCombinedContextsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** Represents a commit status. */
export type Gh_StatusContextArgs = {
  name: Scalars['String'];
};

/** Represents the rollup for both the check runs and status for a commit. */
export type Gh_StatusCheckRollup = Gh_Node & {
  __typename?: 'gh_StatusCheckRollup';
  /** The commit the status and check runs are attached to. */
  commit?: Maybe<Gh_Commit>;
  /** A list of status contexts and check runs for this commit. */
  contexts: Gh_StatusCheckRollupContextConnection;
  id: Scalars['ID'];
  /** The combined status for the commit. */
  state: Gh_StatusState;
};


/** Represents the rollup for both the check runs and status for a commit. */
export type Gh_StatusCheckRollupContextsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** Types that can be inside a StatusCheckRollup context. */
export type Gh_StatusCheckRollupContext = Gh_CheckRun | Gh_StatusContext;

/** The connection type for StatusCheckRollupContext. */
export type Gh_StatusCheckRollupContextConnection = {
  __typename?: 'gh_StatusCheckRollupContextConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_StatusCheckRollupContextEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_StatusCheckRollupContext>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_StatusCheckRollupContextEdge = {
  __typename?: 'gh_StatusCheckRollupContextEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_StatusCheckRollupContext>;
};

/** Represents an individual commit status context */
export type Gh_StatusContext = Gh_Node & Gh_RequirableByPullRequest & {
  __typename?: 'gh_StatusContext';
  /** The avatar of the OAuth application or the user that created the status */
  avatarUrl?: Maybe<Scalars['gh_URI']>;
  /** This commit this status context is attached to. */
  commit?: Maybe<Gh_Commit>;
  /** The name of this status context. */
  context: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The actor who created this status context. */
  creator?: Maybe<Gh_Actor>;
  /** The description for this status context. */
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  /** Whether this is required to pass before merging for a specific pull request. */
  isRequired: Scalars['Boolean'];
  /** The state of this status context. */
  state: Gh_StatusState;
  /** The URL for this status context. */
  targetUrl?: Maybe<Scalars['gh_URI']>;
};


/** Represents an individual commit status context */
export type Gh_StatusContextAvatarUrlArgs = {
  size?: InputMaybe<Scalars['Int']>;
};


/** Represents an individual commit status context */
export type Gh_StatusContextIsRequiredArgs = {
  pullRequestId?: InputMaybe<Scalars['ID']>;
  pullRequestNumber?: InputMaybe<Scalars['Int']>;
};

/** The possible commit status states. */
export enum Gh_StatusState {
  /** Status is errored. */
  Error = 'ERROR',
  /** Status is expected. */
  Expected = 'EXPECTED',
  /** Status is failing. */
  Failure = 'FAILURE',
  /** Status is pending. */
  Pending = 'PENDING',
  /** Status is successful. */
  Success = 'SUCCESS'
}

/** Autogenerated input type of SubmitPullRequestReview */
export type Gh_SubmitPullRequestReviewInput = {
  /** The text field to set on the Pull Request Review. */
  body?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The event to send to the Pull Request Review. */
  event: Gh_PullRequestReviewEvent;
  /** The Pull Request ID to submit any pending reviews. */
  pullRequestId?: InputMaybe<Scalars['ID']>;
  /** The Pull Request Review ID to submit. */
  pullRequestReviewId?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of SubmitPullRequestReview */
export type Gh_SubmitPullRequestReviewPayload = {
  __typename?: 'gh_SubmitPullRequestReviewPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The submitted pull request review. */
  pullRequestReview?: Maybe<Gh_PullRequestReview>;
};

/** A pointer to a repository at a specific revision embedded inside another repository. */
export type Gh_Submodule = {
  __typename?: 'gh_Submodule';
  /** The branch of the upstream submodule for tracking updates */
  branch?: Maybe<Scalars['String']>;
  /** The git URL of the submodule repository */
  gitUrl: Scalars['gh_URI'];
  /** The name of the submodule in .gitmodules */
  name: Scalars['String'];
  /** The path in the superproject that this submodule is located in */
  path: Scalars['String'];
  /** The commit revision of the subproject repository being tracked by the submodule */
  subprojectCommitOid?: Maybe<Scalars['gh_GitObjectID']>;
};

/** The connection type for Submodule. */
export type Gh_SubmoduleConnection = {
  __typename?: 'gh_SubmoduleConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_SubmoduleEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Submodule>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_SubmoduleEdge = {
  __typename?: 'gh_SubmoduleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_Submodule>;
};

/** Entities that can be subscribed to for web and email notifications. */
export type Gh_Subscribable = {
  id: Scalars['ID'];
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe: Scalars['Boolean'];
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: Maybe<Gh_SubscriptionState>;
};

/** Represents a 'subscribed' event on a given `Subscribable`. */
export type Gh_SubscribedEvent = Gh_Node & {
  __typename?: 'gh_SubscribedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** Object referenced by event. */
  subscribable: Gh_Subscribable;
};

/** The possible states of a subscription. */
export enum Gh_SubscriptionState {
  /** The User is never notified. */
  Ignored = 'IGNORED',
  /** The User is notified of all conversations. */
  Subscribed = 'SUBSCRIBED',
  /** The User is only notified when participating or @mentioned. */
  Unsubscribed = 'UNSUBSCRIBED'
}

/** A suggestion to review a pull request based on a user's commit history and review comments. */
export type Gh_SuggestedReviewer = {
  __typename?: 'gh_SuggestedReviewer';
  /** Is this suggestion based on past commits? */
  isAuthor: Scalars['Boolean'];
  /** Is this suggestion based on past review comments? */
  isCommenter: Scalars['Boolean'];
  /** Identifies the user suggested to review the pull request. */
  reviewer: Gh_User;
};

/** Represents a Git tag. */
export type Gh_Tag = Gh_GitObject & Gh_Node & {
  __typename?: 'gh_Tag';
  /** An abbreviated version of the Git object ID */
  abbreviatedOid: Scalars['String'];
  /** The HTTP path for this Git object */
  commitResourcePath: Scalars['gh_URI'];
  /** The HTTP URL for this Git object */
  commitUrl: Scalars['gh_URI'];
  id: Scalars['ID'];
  /** The Git tag message. */
  message?: Maybe<Scalars['String']>;
  /** The Git tag name. */
  name: Scalars['String'];
  /** The Git object ID */
  oid: Scalars['gh_GitObjectID'];
  /** The Repository the Git object belongs to */
  repository: Gh_Repository;
  /** Details about the tag author. */
  tagger?: Maybe<Gh_GitActor>;
  /** The Git object the tag points to. */
  target: Gh_GitObject;
};

/** A team of users in an organization. */
export type Gh_Team = Gh_MemberStatusable & Gh_Node & Gh_Subscribable & {
  __typename?: 'gh_Team';
  /** A list of teams that are ancestors of this team. */
  ancestors: Gh_TeamConnection;
  /** A URL pointing to the team's avatar. */
  avatarUrl?: Maybe<Scalars['gh_URI']>;
  /** List of child teams belonging to this team */
  childTeams: Gh_TeamConnection;
  /** The slug corresponding to the organization and team. */
  combinedSlug: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The description of the team. */
  description?: Maybe<Scalars['String']>;
  /** Find a team discussion by its number. */
  discussion?: Maybe<Gh_TeamDiscussion>;
  /** A list of team discussions. */
  discussions: Gh_TeamDiscussionConnection;
  /** The HTTP path for team discussions */
  discussionsResourcePath: Scalars['gh_URI'];
  /** The HTTP URL for team discussions */
  discussionsUrl: Scalars['gh_URI'];
  /** The HTTP path for editing this team */
  editTeamResourcePath: Scalars['gh_URI'];
  /** The HTTP URL for editing this team */
  editTeamUrl: Scalars['gh_URI'];
  id: Scalars['ID'];
  /** A list of pending invitations for users to this team */
  invitations?: Maybe<Gh_OrganizationInvitationConnection>;
  /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
  memberStatuses: Gh_UserStatusConnection;
  /** A list of users who are members of this team. */
  members: Gh_TeamMemberConnection;
  /** The HTTP path for the team' members */
  membersResourcePath: Scalars['gh_URI'];
  /** The HTTP URL for the team' members */
  membersUrl: Scalars['gh_URI'];
  /** The name of the team. */
  name: Scalars['String'];
  /** The HTTP path creating a new team */
  newTeamResourcePath: Scalars['gh_URI'];
  /** The HTTP URL creating a new team */
  newTeamUrl: Scalars['gh_URI'];
  /** The organization that owns this team. */
  organization: Gh_Organization;
  /** The parent team of the team. */
  parentTeam?: Maybe<Gh_Team>;
  /** The level of privacy the team has. */
  privacy: Gh_TeamPrivacy;
  /** A list of repositories this team has access to. */
  repositories: Gh_TeamRepositoryConnection;
  /** The HTTP path for this team's repositories */
  repositoriesResourcePath: Scalars['gh_URI'];
  /** The HTTP URL for this team's repositories */
  repositoriesUrl: Scalars['gh_URI'];
  /** The HTTP path for this team */
  resourcePath: Scalars['gh_URI'];
  /** The slug corresponding to the team. */
  slug: Scalars['String'];
  /** The HTTP path for this team's teams */
  teamsResourcePath: Scalars['gh_URI'];
  /** The HTTP URL for this team's teams */
  teamsUrl: Scalars['gh_URI'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The HTTP URL for this team */
  url: Scalars['gh_URI'];
  /** Team is adminable by the viewer. */
  viewerCanAdminister: Scalars['Boolean'];
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe: Scalars['Boolean'];
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: Maybe<Gh_SubscriptionState>;
};


/** A team of users in an organization. */
export type Gh_TeamAncestorsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A team of users in an organization. */
export type Gh_TeamAvatarUrlArgs = {
  size?: InputMaybe<Scalars['Int']>;
};


/** A team of users in an organization. */
export type Gh_TeamChildTeamsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  immediateOnly?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_TeamOrder>;
  userLogins?: InputMaybe<Array<Scalars['String']>>;
};


/** A team of users in an organization. */
export type Gh_TeamDiscussionArgs = {
  number: Scalars['Int'];
};


/** A team of users in an organization. */
export type Gh_TeamDiscussionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  isPinned?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_TeamDiscussionOrder>;
};


/** A team of users in an organization. */
export type Gh_TeamInvitationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A team of users in an organization. */
export type Gh_TeamMemberStatusesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_UserStatusOrder>;
};


/** A team of users in an organization. */
export type Gh_TeamMembersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  membership?: InputMaybe<Gh_TeamMembershipType>;
  orderBy?: InputMaybe<Gh_TeamMemberOrder>;
  query?: InputMaybe<Scalars['String']>;
  role?: InputMaybe<Gh_TeamMemberRole>;
};


/** A team of users in an organization. */
export type Gh_TeamRepositoriesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_TeamRepositoryOrder>;
  query?: InputMaybe<Scalars['String']>;
};

/** Audit log entry for a team.add_member event. */
export type Gh_TeamAddMemberAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & Gh_TeamAuditEntryData & {
  __typename?: 'gh_TeamAddMemberAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** Whether the team was mapped to an LDAP Group. */
  isLdapMapped?: Maybe<Scalars['Boolean']>;
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The team associated with the action */
  team?: Maybe<Gh_Team>;
  /** The name of the team */
  teamName?: Maybe<Scalars['String']>;
  /** The HTTP path for this team */
  teamResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for this team */
  teamUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a team.add_repository event. */
export type Gh_TeamAddRepositoryAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData & Gh_TeamAuditEntryData & {
  __typename?: 'gh_TeamAddRepositoryAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** Whether the team was mapped to an LDAP Group. */
  isLdapMapped?: Maybe<Scalars['Boolean']>;
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The repository associated with the action */
  repository?: Maybe<Gh_Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars['gh_URI']>;
  /** The team associated with the action */
  team?: Maybe<Gh_Team>;
  /** The name of the team */
  teamName?: Maybe<Scalars['String']>;
  /** The HTTP path for this team */
  teamResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for this team */
  teamUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Metadata for an audit entry with action team.* */
export type Gh_TeamAuditEntryData = {
  /** The team associated with the action */
  team?: Maybe<Gh_Team>;
  /** The name of the team */
  teamName?: Maybe<Scalars['String']>;
  /** The HTTP path for this team */
  teamResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for this team */
  teamUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a team.change_parent_team event. */
export type Gh_TeamChangeParentTeamAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & Gh_TeamAuditEntryData & {
  __typename?: 'gh_TeamChangeParentTeamAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** Whether the team was mapped to an LDAP Group. */
  isLdapMapped?: Maybe<Scalars['Boolean']>;
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The new parent team. */
  parentTeam?: Maybe<Gh_Team>;
  /** The name of the new parent team */
  parentTeamName?: Maybe<Scalars['String']>;
  /** The name of the former parent team */
  parentTeamNameWas?: Maybe<Scalars['String']>;
  /** The HTTP path for the parent team */
  parentTeamResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the parent team */
  parentTeamUrl?: Maybe<Scalars['gh_URI']>;
  /** The former parent team. */
  parentTeamWas?: Maybe<Gh_Team>;
  /** The HTTP path for the previous parent team */
  parentTeamWasResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the previous parent team */
  parentTeamWasUrl?: Maybe<Scalars['gh_URI']>;
  /** The team associated with the action */
  team?: Maybe<Gh_Team>;
  /** The name of the team */
  teamName?: Maybe<Scalars['String']>;
  /** The HTTP path for this team */
  teamResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for this team */
  teamUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** The connection type for Team. */
export type Gh_TeamConnection = {
  __typename?: 'gh_TeamConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_TeamEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Team>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** A team discussion. */
export type Gh_TeamDiscussion = Gh_Comment & Gh_Deletable & Gh_Node & Gh_Reactable & Gh_Subscribable & Gh_UniformResourceLocatable & Gh_Updatable & Gh_UpdatableComment & {
  __typename?: 'gh_TeamDiscussion';
  /** The actor who authored the comment. */
  author?: Maybe<Gh_Actor>;
  /** Author's association with the discussion's team. */
  authorAssociation: Gh_CommentAuthorAssociation;
  /** The body as Markdown. */
  body: Scalars['String'];
  /** The body rendered to HTML. */
  bodyHTML: Scalars['gh_HTML'];
  /** The body rendered to text. */
  bodyText: Scalars['String'];
  /** Identifies the discussion body hash. */
  bodyVersion: Scalars['String'];
  /** A list of comments on this discussion. */
  comments: Gh_TeamDiscussionCommentConnection;
  /** The HTTP path for discussion comments */
  commentsResourcePath: Scalars['gh_URI'];
  /** The HTTP URL for discussion comments */
  commentsUrl: Scalars['gh_URI'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Check if this comment was created via an email reply. */
  createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The actor who edited the comment. */
  editor?: Maybe<Gh_Actor>;
  id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: Scalars['Boolean'];
  /** Whether or not the discussion is pinned. */
  isPinned: Scalars['Boolean'];
  /** Whether or not the discussion is only visible to team members and org admins. */
  isPrivate: Scalars['Boolean'];
  /** The moment the editor made the last edit */
  lastEditedAt?: Maybe<Scalars['gh_DateTime']>;
  /** Identifies the discussion within its team. */
  number: Scalars['Int'];
  /** Identifies when the comment was published at. */
  publishedAt?: Maybe<Scalars['gh_DateTime']>;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: Maybe<Array<Gh_ReactionGroup>>;
  /** A list of Reactions left on the Issue. */
  reactions: Gh_ReactionConnection;
  /** The HTTP path for this discussion */
  resourcePath: Scalars['gh_URI'];
  /** The team that defines the context of this discussion. */
  team: Gh_Team;
  /** The title of the discussion */
  title: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The HTTP URL for this discussion */
  url: Scalars['gh_URI'];
  /** A list of edits to this content. */
  userContentEdits?: Maybe<Gh_UserContentEditConnection>;
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: Scalars['Boolean'];
  /** Whether or not the current viewer can pin this discussion. */
  viewerCanPin: Scalars['Boolean'];
  /** Can user react to this subject */
  viewerCanReact: Scalars['Boolean'];
  /** Check if the viewer is able to change their subscription status for the repository. */
  viewerCanSubscribe: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: Array<Gh_CommentCannotUpdateReason>;
  /** Did the viewer author this comment. */
  viewerDidAuthor: Scalars['Boolean'];
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  viewerSubscription?: Maybe<Gh_SubscriptionState>;
};


/** A team discussion. */
export type Gh_TeamDiscussionCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  fromComment?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_TeamDiscussionCommentOrder>;
};


/** A team discussion. */
export type Gh_TeamDiscussionReactionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Gh_ReactionContent>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_ReactionOrder>;
};


/** A team discussion. */
export type Gh_TeamDiscussionUserContentEditsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** A comment on a team discussion. */
export type Gh_TeamDiscussionComment = Gh_Comment & Gh_Deletable & Gh_Node & Gh_Reactable & Gh_UniformResourceLocatable & Gh_Updatable & Gh_UpdatableComment & {
  __typename?: 'gh_TeamDiscussionComment';
  /** The actor who authored the comment. */
  author?: Maybe<Gh_Actor>;
  /** Author's association with the comment's team. */
  authorAssociation: Gh_CommentAuthorAssociation;
  /** The body as Markdown. */
  body: Scalars['String'];
  /** The body rendered to HTML. */
  bodyHTML: Scalars['gh_HTML'];
  /** The body rendered to text. */
  bodyText: Scalars['String'];
  /** The current version of the body content. */
  bodyVersion: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Check if this comment was created via an email reply. */
  createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The discussion this comment is about. */
  discussion: Gh_TeamDiscussion;
  /** The actor who edited the comment. */
  editor?: Maybe<Gh_Actor>;
  id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  includesCreatedEdit: Scalars['Boolean'];
  /** The moment the editor made the last edit */
  lastEditedAt?: Maybe<Scalars['gh_DateTime']>;
  /** Identifies the comment number. */
  number: Scalars['Int'];
  /** Identifies when the comment was published at. */
  publishedAt?: Maybe<Scalars['gh_DateTime']>;
  /** A list of reactions grouped by content left on the subject. */
  reactionGroups?: Maybe<Array<Gh_ReactionGroup>>;
  /** A list of Reactions left on the Issue. */
  reactions: Gh_ReactionConnection;
  /** The HTTP path for this comment */
  resourcePath: Scalars['gh_URI'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The HTTP URL for this comment */
  url: Scalars['gh_URI'];
  /** A list of edits to this content. */
  userContentEdits?: Maybe<Gh_UserContentEditConnection>;
  /** Check if the current viewer can delete this object. */
  viewerCanDelete: Scalars['Boolean'];
  /** Can user react to this subject */
  viewerCanReact: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: Array<Gh_CommentCannotUpdateReason>;
  /** Did the viewer author this comment. */
  viewerDidAuthor: Scalars['Boolean'];
};


/** A comment on a team discussion. */
export type Gh_TeamDiscussionCommentReactionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Gh_ReactionContent>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_ReactionOrder>;
};


/** A comment on a team discussion. */
export type Gh_TeamDiscussionCommentUserContentEditsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for TeamDiscussionComment. */
export type Gh_TeamDiscussionCommentConnection = {
  __typename?: 'gh_TeamDiscussionCommentConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_TeamDiscussionCommentEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_TeamDiscussionComment>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_TeamDiscussionCommentEdge = {
  __typename?: 'gh_TeamDiscussionCommentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_TeamDiscussionComment>;
};

/** Ways in which team discussion comment connections can be ordered. */
export type Gh_TeamDiscussionCommentOrder = {
  /** The direction in which to order nodes. */
  direction: Gh_OrderDirection;
  /** The field by which to order nodes. */
  field: Gh_TeamDiscussionCommentOrderField;
};

/** Properties by which team discussion comment connections can be ordered. */
export enum Gh_TeamDiscussionCommentOrderField {
  /** Allows sequential ordering of team discussion comments (which is equivalent to chronological ordering). */
  Number = 'NUMBER'
}

/** The connection type for TeamDiscussion. */
export type Gh_TeamDiscussionConnection = {
  __typename?: 'gh_TeamDiscussionConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_TeamDiscussionEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_TeamDiscussion>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_TeamDiscussionEdge = {
  __typename?: 'gh_TeamDiscussionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_TeamDiscussion>;
};

/** Ways in which team discussion connections can be ordered. */
export type Gh_TeamDiscussionOrder = {
  /** The direction in which to order nodes. */
  direction: Gh_OrderDirection;
  /** The field by which to order nodes. */
  field: Gh_TeamDiscussionOrderField;
};

/** Properties by which team discussion connections can be ordered. */
export enum Gh_TeamDiscussionOrderField {
  /** Allows chronological ordering of team discussions. */
  CreatedAt = 'CREATED_AT'
}

/** An edge in a connection. */
export type Gh_TeamEdge = {
  __typename?: 'gh_TeamEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_Team>;
};

/** The connection type for User. */
export type Gh_TeamMemberConnection = {
  __typename?: 'gh_TeamMemberConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_TeamMemberEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_User>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Represents a user who is a member of a team. */
export type Gh_TeamMemberEdge = {
  __typename?: 'gh_TeamMemberEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The HTTP path to the organization's member access page. */
  memberAccessResourcePath: Scalars['gh_URI'];
  /** The HTTP URL to the organization's member access page. */
  memberAccessUrl: Scalars['gh_URI'];
  node: Gh_User;
  /** The role the member has on the team. */
  role: Gh_TeamMemberRole;
};

/** Ordering options for team member connections */
export type Gh_TeamMemberOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order team members by. */
  field: Gh_TeamMemberOrderField;
};

/** Properties by which team member connections can be ordered. */
export enum Gh_TeamMemberOrderField {
  /** Order team members by creation time */
  CreatedAt = 'CREATED_AT',
  /** Order team members by login */
  Login = 'LOGIN'
}

/** The possible team member roles; either 'maintainer' or 'member'. */
export enum Gh_TeamMemberRole {
  /** A team maintainer has permission to add and remove team members. */
  Maintainer = 'MAINTAINER',
  /** A team member has no administrative permissions on the team. */
  Member = 'MEMBER'
}

/** Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL. */
export enum Gh_TeamMembershipType {
  /** Includes immediate and child team members for the team. */
  All = 'ALL',
  /** Includes only child team members for the team. */
  ChildTeam = 'CHILD_TEAM',
  /** Includes only immediate members of the team. */
  Immediate = 'IMMEDIATE'
}

/** Ways in which team connections can be ordered. */
export type Gh_TeamOrder = {
  /** The direction in which to order nodes. */
  direction: Gh_OrderDirection;
  /** The field in which to order nodes by. */
  field: Gh_TeamOrderField;
};

/** Properties by which team connections can be ordered. */
export enum Gh_TeamOrderField {
  /** Allows ordering a list of teams by name. */
  Name = 'NAME'
}

/** The possible team privacy values. */
export enum Gh_TeamPrivacy {
  /** A secret team can only be seen by its members. */
  Secret = 'SECRET',
  /** A visible team can be seen and @mentioned by every member of the organization. */
  Visible = 'VISIBLE'
}

/** Audit log entry for a team.remove_member event. */
export type Gh_TeamRemoveMemberAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & Gh_TeamAuditEntryData & {
  __typename?: 'gh_TeamRemoveMemberAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** Whether the team was mapped to an LDAP Group. */
  isLdapMapped?: Maybe<Scalars['Boolean']>;
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The team associated with the action */
  team?: Maybe<Gh_Team>;
  /** The name of the team */
  teamName?: Maybe<Scalars['String']>;
  /** The HTTP path for this team */
  teamResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for this team */
  teamUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** Audit log entry for a team.remove_repository event. */
export type Gh_TeamRemoveRepositoryAuditEntry = Gh_AuditEntry & Gh_Node & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData & Gh_TeamAuditEntryData & {
  __typename?: 'gh_TeamRemoveRepositoryAuditEntry';
  /** The action name */
  action: Scalars['String'];
  /** The user who initiated the action */
  actor?: Maybe<Gh_AuditEntryActor>;
  /** The IP address of the actor */
  actorIp?: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  actorLocation?: Maybe<Gh_ActorLocation>;
  /** The username of the user who initiated the action */
  actorLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  actorResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the actor. */
  actorUrl?: Maybe<Scalars['gh_URI']>;
  /** The time the action was initiated */
  createdAt: Scalars['gh_PreciseDateTime'];
  id: Scalars['ID'];
  /** Whether the team was mapped to an LDAP Group. */
  isLdapMapped?: Maybe<Scalars['Boolean']>;
  /** The corresponding operation type for the action */
  operationType?: Maybe<Gh_OperationType>;
  /** The Organization associated with the Audit Entry. */
  organization?: Maybe<Gh_Organization>;
  /** The name of the Organization. */
  organizationName?: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  organizationResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the organization */
  organizationUrl?: Maybe<Scalars['gh_URI']>;
  /** The repository associated with the action */
  repository?: Maybe<Gh_Repository>;
  /** The name of the repository */
  repositoryName?: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  repositoryResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the repository */
  repositoryUrl?: Maybe<Scalars['gh_URI']>;
  /** The team associated with the action */
  team?: Maybe<Gh_Team>;
  /** The name of the team */
  teamName?: Maybe<Scalars['String']>;
  /** The HTTP path for this team */
  teamResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for this team */
  teamUrl?: Maybe<Scalars['gh_URI']>;
  /** The user affected by the action */
  user?: Maybe<Gh_User>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  userLogin?: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  userResourcePath?: Maybe<Scalars['gh_URI']>;
  /** The HTTP URL for the user. */
  userUrl?: Maybe<Scalars['gh_URI']>;
};

/** The connection type for Repository. */
export type Gh_TeamRepositoryConnection = {
  __typename?: 'gh_TeamRepositoryConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_TeamRepositoryEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_Repository>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Represents a team repository. */
export type Gh_TeamRepositoryEdge = {
  __typename?: 'gh_TeamRepositoryEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  node: Gh_Repository;
  /** The permission level the team has on the repository */
  permission: Gh_RepositoryPermission;
};

/** Ordering options for team repository connections */
export type Gh_TeamRepositoryOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order repositories by. */
  field: Gh_TeamRepositoryOrderField;
};

/** Properties by which team repository connections can be ordered. */
export enum Gh_TeamRepositoryOrderField {
  /** Order repositories by creation time */
  CreatedAt = 'CREATED_AT',
  /** Order repositories by name */
  Name = 'NAME',
  /** Order repositories by permission */
  Permission = 'PERMISSION',
  /** Order repositories by push time */
  PushedAt = 'PUSHED_AT',
  /** Order repositories by number of stargazers */
  Stargazers = 'STARGAZERS',
  /** Order repositories by update time */
  UpdatedAt = 'UPDATED_AT'
}

/** The role of a user on a team. */
export enum Gh_TeamRole {
  /** User has admin rights on the team. */
  Admin = 'ADMIN',
  /** User is a member of the team. */
  Member = 'MEMBER'
}

/** A text match within a search result. */
export type Gh_TextMatch = {
  __typename?: 'gh_TextMatch';
  /** The specific text fragment within the property matched on. */
  fragment: Scalars['String'];
  /** Highlights within the matched fragment. */
  highlights: Array<Gh_TextMatchHighlight>;
  /** The property matched on. */
  property: Scalars['String'];
};

/** Represents a single highlight in a search result match. */
export type Gh_TextMatchHighlight = {
  __typename?: 'gh_TextMatchHighlight';
  /** The indice in the fragment where the matched text begins. */
  beginIndice: Scalars['Int'];
  /** The indice in the fragment where the matched text ends. */
  endIndice: Scalars['Int'];
  /** The text matched. */
  text: Scalars['String'];
};

/** A topic aggregates entities that are related to a subject. */
export type Gh_Topic = Gh_Node & Gh_Starrable & {
  __typename?: 'gh_Topic';
  id: Scalars['ID'];
  /** The topic's name. */
  name: Scalars['String'];
  /**
   * A list of related topics, including aliases of this topic, sorted with the most relevant
   * first. Returns up to 10 Topics.
   *
   */
  relatedTopics: Array<Gh_Topic>;
  /** A list of repositories. */
  repositories: Gh_RepositoryConnection;
  /**
   * Returns a count of how many stargazers there are on this object
   *
   */
  stargazerCount: Scalars['Int'];
  /** A list of users who have starred this starrable. */
  stargazers: Gh_StargazerConnection;
  /** Returns a boolean indicating whether the viewing user has starred this starrable. */
  viewerHasStarred: Scalars['Boolean'];
};


/** A topic aggregates entities that are related to a subject. */
export type Gh_TopicRelatedTopicsArgs = {
  first?: InputMaybe<Scalars['Int']>;
};


/** A topic aggregates entities that are related to a subject. */
export type Gh_TopicRepositoriesArgs = {
  affiliations?: InputMaybe<Array<InputMaybe<Gh_RepositoryAffiliation>>>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  isLocked?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_RepositoryOrder>;
  ownerAffiliations?: InputMaybe<Array<InputMaybe<Gh_RepositoryAffiliation>>>;
  privacy?: InputMaybe<Gh_RepositoryPrivacy>;
  sponsorableOnly?: InputMaybe<Scalars['Boolean']>;
};


/** A topic aggregates entities that are related to a subject. */
export type Gh_TopicStargazersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_StarOrder>;
};

/** Metadata for an audit entry with a topic. */
export type Gh_TopicAuditEntryData = {
  /** The name of the topic added to the repository */
  topic?: Maybe<Gh_Topic>;
  /** The name of the topic added to the repository */
  topicName?: Maybe<Scalars['String']>;
};

/** Reason that the suggested topic is declined. */
export enum Gh_TopicSuggestionDeclineReason {
  /** The suggested topic is not relevant to the repository. */
  NotRelevant = 'NOT_RELEVANT',
  /** The viewer does not like the suggested topic. */
  PersonalPreference = 'PERSONAL_PREFERENCE',
  /** The suggested topic is too general for the repository. */
  TooGeneral = 'TOO_GENERAL',
  /** The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1). */
  TooSpecific = 'TOO_SPECIFIC'
}

/** The possible states of a tracked issue. */
export enum Gh_TrackedIssueStates {
  /** The tracked issue is closed */
  Closed = 'CLOSED',
  /** The tracked issue is open */
  Open = 'OPEN'
}

/** Autogenerated input type of TransferIssue */
export type Gh_TransferIssueInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Node ID of the issue to be transferred */
  issueId: Scalars['ID'];
  /** The Node ID of the repository the issue should be transferred to */
  repositoryId: Scalars['ID'];
};

/** Autogenerated return type of TransferIssue */
export type Gh_TransferIssuePayload = {
  __typename?: 'gh_TransferIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The issue that was transferred */
  issue?: Maybe<Gh_Issue>;
};

/** Represents a 'transferred' event on a given issue or pull request. */
export type Gh_TransferredEvent = Gh_Node & {
  __typename?: 'gh_TransferredEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The repository this came from */
  fromRepository?: Maybe<Gh_Repository>;
  id: Scalars['ID'];
  /** Identifies the issue associated with the event. */
  issue: Gh_Issue;
};

/** Represents a Git tree. */
export type Gh_Tree = Gh_GitObject & Gh_Node & {
  __typename?: 'gh_Tree';
  /** An abbreviated version of the Git object ID */
  abbreviatedOid: Scalars['String'];
  /** The HTTP path for this Git object */
  commitResourcePath: Scalars['gh_URI'];
  /** The HTTP URL for this Git object */
  commitUrl: Scalars['gh_URI'];
  /** A list of tree entries. */
  entries?: Maybe<Array<Gh_TreeEntry>>;
  id: Scalars['ID'];
  /** The Git object ID */
  oid: Scalars['gh_GitObjectID'];
  /** The Repository the Git object belongs to */
  repository: Gh_Repository;
};

/** Represents a Git tree entry. */
export type Gh_TreeEntry = {
  __typename?: 'gh_TreeEntry';
  /** The extension of the file */
  extension?: Maybe<Scalars['String']>;
  /** Whether or not this tree entry is generated */
  isGenerated: Scalars['Boolean'];
  /** Number of lines in the file. */
  lineCount?: Maybe<Scalars['Int']>;
  /** Entry file mode. */
  mode: Scalars['Int'];
  /** Entry file name. */
  name: Scalars['String'];
  /** Entry file object. */
  object?: Maybe<Gh_GitObject>;
  /** Entry file Git object ID. */
  oid: Scalars['gh_GitObjectID'];
  /** The full path of the file. */
  path?: Maybe<Scalars['String']>;
  /** The Repository the tree entry belongs to */
  repository: Gh_Repository;
  /** If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule */
  submodule?: Maybe<Gh_Submodule>;
  /** Entry file type. */
  type: Scalars['String'];
};

/** Autogenerated input type of UnarchiveRepository */
export type Gh_UnarchiveRepositoryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the repository to unarchive. */
  repositoryId: Scalars['ID'];
};

/** Autogenerated return type of UnarchiveRepository */
export type Gh_UnarchiveRepositoryPayload = {
  __typename?: 'gh_UnarchiveRepositoryPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The repository that was unarchived. */
  repository?: Maybe<Gh_Repository>;
};

/** Represents an 'unassigned' event on any assignable object. */
export type Gh_UnassignedEvent = Gh_Node & {
  __typename?: 'gh_UnassignedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the assignable associated with the event. */
  assignable: Gh_Assignable;
  /** Identifies the user or mannequin that was unassigned. */
  assignee?: Maybe<Gh_Assignee>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** Identifies the subject (user) who was unassigned. */
  user?: Maybe<Gh_User>;
};

/** Autogenerated input type of UnfollowOrganization */
export type Gh_UnfollowOrganizationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** ID of the organization to unfollow. */
  organizationId: Scalars['ID'];
};

/** Autogenerated return type of UnfollowOrganization */
export type Gh_UnfollowOrganizationPayload = {
  __typename?: 'gh_UnfollowOrganizationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The organization that was unfollowed. */
  organization?: Maybe<Gh_Organization>;
};

/** Autogenerated input type of UnfollowUser */
export type Gh_UnfollowUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** ID of the user to unfollow. */
  userId: Scalars['ID'];
};

/** Autogenerated return type of UnfollowUser */
export type Gh_UnfollowUserPayload = {
  __typename?: 'gh_UnfollowUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The user that was unfollowed. */
  user?: Maybe<Gh_User>;
};

/** Represents a type that can be retrieved by a URL. */
export type Gh_UniformResourceLocatable = {
  /** The HTML path to this resource. */
  resourcePath: Scalars['gh_URI'];
  /** The URL to this resource. */
  url: Scalars['gh_URI'];
};

/** Represents an unknown signature on a Commit or Tag. */
export type Gh_UnknownSignature = Gh_GitSignature & {
  __typename?: 'gh_UnknownSignature';
  /** Email used to sign this object. */
  email: Scalars['String'];
  /** True if the signature is valid and verified by GitHub. */
  isValid: Scalars['Boolean'];
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  payload: Scalars['String'];
  /** ASCII-armored signature header from object. */
  signature: Scalars['String'];
  /** GitHub user corresponding to the email signing this commit. */
  signer?: Maybe<Gh_User>;
  /** The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid. */
  state: Gh_GitSignatureState;
  /** True if the signature was made with GitHub's signing key. */
  wasSignedByGitHub: Scalars['Boolean'];
};

/** Represents an 'unlabeled' event on a given issue or pull request. */
export type Gh_UnlabeledEvent = Gh_Node & {
  __typename?: 'gh_UnlabeledEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** Identifies the label associated with the 'unlabeled' event. */
  label: Gh_Label;
  /** Identifies the `Labelable` associated with the event. */
  labelable: Gh_Labelable;
};

/** Autogenerated input type of UnlinkRepositoryFromProject */
export type Gh_UnlinkRepositoryFromProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the Project linked to the Repository. */
  projectId: Scalars['ID'];
  /** The ID of the Repository linked to the Project. */
  repositoryId: Scalars['ID'];
};

/** Autogenerated return type of UnlinkRepositoryFromProject */
export type Gh_UnlinkRepositoryFromProjectPayload = {
  __typename?: 'gh_UnlinkRepositoryFromProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The linked Project. */
  project?: Maybe<Gh_Project>;
  /** The linked Repository. */
  repository?: Maybe<Gh_Repository>;
};

/** Autogenerated input type of UnlockLockable */
export type Gh_UnlockLockableInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** ID of the item to be unlocked. */
  lockableId: Scalars['ID'];
};

/** Autogenerated return type of UnlockLockable */
export type Gh_UnlockLockablePayload = {
  __typename?: 'gh_UnlockLockablePayload';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The item that was unlocked. */
  unlockedRecord?: Maybe<Gh_Lockable>;
};

/** Represents an 'unlocked' event on a given issue or pull request. */
export type Gh_UnlockedEvent = Gh_Node & {
  __typename?: 'gh_UnlockedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** Object that was unlocked. */
  lockable: Gh_Lockable;
};

/** Autogenerated input type of UnmarkDiscussionCommentAsAnswer */
export type Gh_UnmarkDiscussionCommentAsAnswerInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Node ID of the discussion comment to unmark as an answer. */
  id: Scalars['ID'];
};

/** Autogenerated return type of UnmarkDiscussionCommentAsAnswer */
export type Gh_UnmarkDiscussionCommentAsAnswerPayload = {
  __typename?: 'gh_UnmarkDiscussionCommentAsAnswerPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The discussion that includes the comment. */
  discussion?: Maybe<Gh_Discussion>;
};

/** Autogenerated input type of UnmarkFileAsViewed */
export type Gh_UnmarkFileAsViewedInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The path of the file to mark as unviewed */
  path: Scalars['String'];
  /** The Node ID of the pull request. */
  pullRequestId: Scalars['ID'];
};

/** Autogenerated return type of UnmarkFileAsViewed */
export type Gh_UnmarkFileAsViewedPayload = {
  __typename?: 'gh_UnmarkFileAsViewedPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The updated pull request. */
  pullRequest?: Maybe<Gh_PullRequest>;
};

/** Autogenerated input type of UnmarkIssueAsDuplicate */
export type Gh_UnmarkIssueAsDuplicateInput = {
  /** ID of the issue or pull request currently considered canonical/authoritative/original. */
  canonicalId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** ID of the issue or pull request currently marked as a duplicate. */
  duplicateId: Scalars['ID'];
};

/** Autogenerated return type of UnmarkIssueAsDuplicate */
export type Gh_UnmarkIssueAsDuplicatePayload = {
  __typename?: 'gh_UnmarkIssueAsDuplicatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The issue or pull request that was marked as a duplicate. */
  duplicate?: Maybe<Gh_IssueOrPullRequest>;
};

/** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
export type Gh_UnmarkedAsDuplicateEvent = Gh_Node & {
  __typename?: 'gh_UnmarkedAsDuplicateEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** The authoritative issue or pull request which has been duplicated by another. */
  canonical?: Maybe<Gh_IssueOrPullRequest>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** The issue or pull request which has been marked as a duplicate of another. */
  duplicate?: Maybe<Gh_IssueOrPullRequest>;
  id: Scalars['ID'];
  /** Canonical and duplicate belong to different repositories. */
  isCrossRepository: Scalars['Boolean'];
};

/** Autogenerated input type of UnminimizeComment */
export type Gh_UnminimizeCommentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Node ID of the subject to modify. */
  subjectId: Scalars['ID'];
};

/** Autogenerated return type of UnminimizeComment */
export type Gh_UnminimizeCommentPayload = {
  __typename?: 'gh_UnminimizeCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The comment that was unminimized. */
  unminimizedComment?: Maybe<Gh_Minimizable>;
};

/** Autogenerated input type of UnpinIssue */
export type Gh_UnpinIssueInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the issue to be unpinned */
  issueId: Scalars['ID'];
};

/** Autogenerated return type of UnpinIssue */
export type Gh_UnpinIssuePayload = {
  __typename?: 'gh_UnpinIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The issue that was unpinned */
  issue?: Maybe<Gh_Issue>;
};

/** Represents an 'unpinned' event on a given issue or pull request. */
export type Gh_UnpinnedEvent = Gh_Node & {
  __typename?: 'gh_UnpinnedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** Identifies the issue associated with the event. */
  issue: Gh_Issue;
};

/** Autogenerated input type of UnresolveReviewThread */
export type Gh_UnresolveReviewThreadInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the thread to unresolve */
  threadId: Scalars['ID'];
};

/** Autogenerated return type of UnresolveReviewThread */
export type Gh_UnresolveReviewThreadPayload = {
  __typename?: 'gh_UnresolveReviewThreadPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The thread to resolve. */
  thread?: Maybe<Gh_PullRequestReviewThread>;
};

/** Represents an 'unsubscribed' event on a given `Subscribable`. */
export type Gh_UnsubscribedEvent = Gh_Node & {
  __typename?: 'gh_UnsubscribedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** Object referenced by event. */
  subscribable: Gh_Subscribable;
};

/** Entities that can be updated. */
export type Gh_Updatable = {
  /** Check if the current viewer can update this object. */
  viewerCanUpdate: Scalars['Boolean'];
};

/** Comments that can be updated. */
export type Gh_UpdatableComment = {
  /** Reasons why the current viewer can not update this comment. */
  viewerCannotUpdateReasons: Array<Gh_CommentCannotUpdateReason>;
};

/** Autogenerated input type of UpdateBranchProtectionRule */
export type Gh_UpdateBranchProtectionRuleInput = {
  /** Can this branch be deleted. */
  allowsDeletions?: InputMaybe<Scalars['Boolean']>;
  /** Are force pushes allowed on this branch. */
  allowsForcePushes?: InputMaybe<Scalars['Boolean']>;
  /** Is branch creation a protected operation. */
  blocksCreations?: InputMaybe<Scalars['Boolean']>;
  /** The global relay id of the branch protection rule to be updated. */
  branchProtectionRuleId: Scalars['ID'];
  /** A list of User or Team IDs allowed to bypass force push targeting matching branches. */
  bypassForcePushActorIds?: InputMaybe<Array<Scalars['ID']>>;
  /** A list of User or Team IDs allowed to bypass pull requests targeting matching branches. */
  bypassPullRequestActorIds?: InputMaybe<Array<Scalars['ID']>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Will new commits pushed to matching branches dismiss pull request review approvals. */
  dismissesStaleReviews?: InputMaybe<Scalars['Boolean']>;
  /** Can admins overwrite branch protection. */
  isAdminEnforced?: InputMaybe<Scalars['Boolean']>;
  /** The glob-like pattern used to determine matching branches. */
  pattern?: InputMaybe<Scalars['String']>;
  /** A list of User, Team or App IDs allowed to push to matching branches. */
  pushActorIds?: InputMaybe<Array<Scalars['ID']>>;
  /** Number of approving reviews required to update matching branches. */
  requiredApprovingReviewCount?: InputMaybe<Scalars['Int']>;
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  requiredStatusCheckContexts?: InputMaybe<Array<Scalars['String']>>;
  /** The list of required status checks */
  requiredStatusChecks?: InputMaybe<Array<Gh_RequiredStatusCheckInput>>;
  /** Are approving reviews required to update matching branches. */
  requiresApprovingReviews?: InputMaybe<Scalars['Boolean']>;
  /** Are reviews from code owners required to update matching branches. */
  requiresCodeOwnerReviews?: InputMaybe<Scalars['Boolean']>;
  /** Are commits required to be signed. */
  requiresCommitSignatures?: InputMaybe<Scalars['Boolean']>;
  /** Are conversations required to be resolved before merging. */
  requiresConversationResolution?: InputMaybe<Scalars['Boolean']>;
  /** Are merge commits prohibited from being pushed to this branch. */
  requiresLinearHistory?: InputMaybe<Scalars['Boolean']>;
  /** Are status checks required to update matching branches. */
  requiresStatusChecks?: InputMaybe<Scalars['Boolean']>;
  /** Are branches required to be up to date before merging. */
  requiresStrictStatusChecks?: InputMaybe<Scalars['Boolean']>;
  /** Is pushing to matching branches restricted. */
  restrictsPushes?: InputMaybe<Scalars['Boolean']>;
  /** Is dismissal of pull request reviews restricted. */
  restrictsReviewDismissals?: InputMaybe<Scalars['Boolean']>;
  /** A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches. */
  reviewDismissalActorIds?: InputMaybe<Array<Scalars['ID']>>;
};

/** Autogenerated return type of UpdateBranchProtectionRule */
export type Gh_UpdateBranchProtectionRulePayload = {
  __typename?: 'gh_UpdateBranchProtectionRulePayload';
  /** The newly created BranchProtectionRule. */
  branchProtectionRule?: Maybe<Gh_BranchProtectionRule>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateCheckRun */
export type Gh_UpdateCheckRunInput = {
  /** Possible further actions the integrator can perform, which a user may trigger. */
  actions?: InputMaybe<Array<Gh_CheckRunAction>>;
  /** The node of the check. */
  checkRunId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The time that the check run finished. */
  completedAt?: InputMaybe<Scalars['gh_DateTime']>;
  /** The final conclusion of the check. */
  conclusion?: InputMaybe<Gh_CheckConclusionState>;
  /** The URL of the integrator's site that has the full details of the check. */
  detailsUrl?: InputMaybe<Scalars['gh_URI']>;
  /** A reference for the run on the integrator's system. */
  externalId?: InputMaybe<Scalars['String']>;
  /** The name of the check. */
  name?: InputMaybe<Scalars['String']>;
  /** Descriptive details about the run. */
  output?: InputMaybe<Gh_CheckRunOutput>;
  /** The node ID of the repository. */
  repositoryId: Scalars['ID'];
  /** The time that the check run began. */
  startedAt?: InputMaybe<Scalars['gh_DateTime']>;
  /** The current status. */
  status?: InputMaybe<Gh_RequestableCheckStatusState>;
};

/** Autogenerated return type of UpdateCheckRun */
export type Gh_UpdateCheckRunPayload = {
  __typename?: 'gh_UpdateCheckRunPayload';
  /** The updated check run. */
  checkRun?: Maybe<Gh_CheckRun>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateCheckSuitePreferences */
export type Gh_UpdateCheckSuitePreferencesInput = {
  /** The check suite preferences to modify. */
  autoTriggerPreferences: Array<Gh_CheckSuiteAutoTriggerPreference>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Node ID of the repository. */
  repositoryId: Scalars['ID'];
};

/** Autogenerated return type of UpdateCheckSuitePreferences */
export type Gh_UpdateCheckSuitePreferencesPayload = {
  __typename?: 'gh_UpdateCheckSuitePreferencesPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The updated repository. */
  repository?: Maybe<Gh_Repository>;
};

/** Autogenerated input type of UpdateDiscussionComment */
export type Gh_UpdateDiscussionCommentInput = {
  /** The new contents of the comment body. */
  body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Node ID of the discussion comment to update. */
  commentId: Scalars['ID'];
};

/** Autogenerated return type of UpdateDiscussionComment */
export type Gh_UpdateDiscussionCommentPayload = {
  __typename?: 'gh_UpdateDiscussionCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The modified discussion comment. */
  comment?: Maybe<Gh_DiscussionComment>;
};

/** Autogenerated input type of UpdateDiscussion */
export type Gh_UpdateDiscussionInput = {
  /** The new contents of the discussion body. */
  body?: InputMaybe<Scalars['String']>;
  /** The Node ID of a discussion category within the same repository to change this discussion to. */
  categoryId?: InputMaybe<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Node ID of the discussion to update. */
  discussionId: Scalars['ID'];
  /** The new discussion title. */
  title?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateDiscussion */
export type Gh_UpdateDiscussionPayload = {
  __typename?: 'gh_UpdateDiscussionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The modified discussion. */
  discussion?: Maybe<Gh_Discussion>;
};

/** Autogenerated input type of UpdateEnterpriseAdministratorRole */
export type Gh_UpdateEnterpriseAdministratorRoleInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the Enterprise which the admin belongs to. */
  enterpriseId: Scalars['ID'];
  /** The login of a administrator whose role is being changed. */
  login: Scalars['String'];
  /** The new role for the Enterprise administrator. */
  role: Gh_EnterpriseAdministratorRole;
};

/** Autogenerated return type of UpdateEnterpriseAdministratorRole */
export type Gh_UpdateEnterpriseAdministratorRolePayload = {
  __typename?: 'gh_UpdateEnterpriseAdministratorRolePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** A message confirming the result of changing the administrator's role. */
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
export type Gh_UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the enterprise on which to set the allow private repository forking setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the allow private repository forking setting on the enterprise. */
  settingValue: Gh_EnterpriseEnabledDisabledSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
export type Gh_UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload = {
  __typename?: 'gh_UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The enterprise with the updated allow private repository forking setting. */
  enterprise?: Maybe<Gh_Enterprise>;
  /** A message confirming the result of updating the allow private repository forking setting. */
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting */
export type Gh_UpdateEnterpriseDefaultRepositoryPermissionSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the enterprise on which to set the base repository permission setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the base repository permission setting on the enterprise. */
  settingValue: Gh_EnterpriseDefaultRepositoryPermissionSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting */
export type Gh_UpdateEnterpriseDefaultRepositoryPermissionSettingPayload = {
  __typename?: 'gh_UpdateEnterpriseDefaultRepositoryPermissionSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The enterprise with the updated base repository permission setting. */
  enterprise?: Maybe<Gh_Enterprise>;
  /** A message confirming the result of updating the base repository permission setting. */
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
export type Gh_UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the enterprise on which to set the members can change repository visibility setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the members can change repository visibility setting on the enterprise. */
  settingValue: Gh_EnterpriseEnabledDisabledSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
export type Gh_UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload = {
  __typename?: 'gh_UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The enterprise with the updated members can change repository visibility setting. */
  enterprise?: Maybe<Gh_Enterprise>;
  /** A message confirming the result of updating the members can change repository visibility setting. */
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */
export type Gh_UpdateEnterpriseMembersCanCreateRepositoriesSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the enterprise on which to set the members can create repositories setting. */
  enterpriseId: Scalars['ID'];
  /** Allow members to create internal repositories. Defaults to current value. */
  membersCanCreateInternalRepositories?: InputMaybe<Scalars['Boolean']>;
  /** Allow members to create private repositories. Defaults to current value. */
  membersCanCreatePrivateRepositories?: InputMaybe<Scalars['Boolean']>;
  /** Allow members to create public repositories. Defaults to current value. */
  membersCanCreatePublicRepositories?: InputMaybe<Scalars['Boolean']>;
  /** When false, allow member organizations to set their own repository creation member privileges. */
  membersCanCreateRepositoriesPolicyEnabled?: InputMaybe<Scalars['Boolean']>;
  /** Value for the members can create repositories setting on the enterprise. This or the granular public/private/internal allowed fields (but not both) must be provided. */
  settingValue?: InputMaybe<Gh_EnterpriseMembersCanCreateRepositoriesSettingValue>;
};

/** Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */
export type Gh_UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload = {
  __typename?: 'gh_UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The enterprise with the updated members can create repositories setting. */
  enterprise?: Maybe<Gh_Enterprise>;
  /** A message confirming the result of updating the members can create repositories setting. */
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting */
export type Gh_UpdateEnterpriseMembersCanDeleteIssuesSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the enterprise on which to set the members can delete issues setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the members can delete issues setting on the enterprise. */
  settingValue: Gh_EnterpriseEnabledDisabledSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting */
export type Gh_UpdateEnterpriseMembersCanDeleteIssuesSettingPayload = {
  __typename?: 'gh_UpdateEnterpriseMembersCanDeleteIssuesSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The enterprise with the updated members can delete issues setting. */
  enterprise?: Maybe<Gh_Enterprise>;
  /** A message confirming the result of updating the members can delete issues setting. */
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
export type Gh_UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the enterprise on which to set the members can delete repositories setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the members can delete repositories setting on the enterprise. */
  settingValue: Gh_EnterpriseEnabledDisabledSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
export type Gh_UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload = {
  __typename?: 'gh_UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The enterprise with the updated members can delete repositories setting. */
  enterprise?: Maybe<Gh_Enterprise>;
  /** A message confirming the result of updating the members can delete repositories setting. */
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
export type Gh_UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the enterprise on which to set the members can invite collaborators setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the members can invite collaborators setting on the enterprise. */
  settingValue: Gh_EnterpriseEnabledDisabledSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
export type Gh_UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload = {
  __typename?: 'gh_UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The enterprise with the updated members can invite collaborators setting. */
  enterprise?: Maybe<Gh_Enterprise>;
  /** A message confirming the result of updating the members can invite collaborators setting. */
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting */
export type Gh_UpdateEnterpriseMembersCanMakePurchasesSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the enterprise on which to set the members can make purchases setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the members can make purchases setting on the enterprise. */
  settingValue: Gh_EnterpriseMembersCanMakePurchasesSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting */
export type Gh_UpdateEnterpriseMembersCanMakePurchasesSettingPayload = {
  __typename?: 'gh_UpdateEnterpriseMembersCanMakePurchasesSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The enterprise with the updated members can make purchases setting. */
  enterprise?: Maybe<Gh_Enterprise>;
  /** A message confirming the result of updating the members can make purchases setting. */
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
export type Gh_UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the enterprise on which to set the members can update protected branches setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the members can update protected branches setting on the enterprise. */
  settingValue: Gh_EnterpriseEnabledDisabledSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
export type Gh_UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload = {
  __typename?: 'gh_UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The enterprise with the updated members can update protected branches setting. */
  enterprise?: Maybe<Gh_Enterprise>;
  /** A message confirming the result of updating the members can update protected branches setting. */
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
export type Gh_UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the enterprise on which to set the members can view dependency insights setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the members can view dependency insights setting on the enterprise. */
  settingValue: Gh_EnterpriseEnabledDisabledSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
export type Gh_UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload = {
  __typename?: 'gh_UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The enterprise with the updated members can view dependency insights setting. */
  enterprise?: Maybe<Gh_Enterprise>;
  /** A message confirming the result of updating the members can view dependency insights setting. */
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting */
export type Gh_UpdateEnterpriseOrganizationProjectsSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the enterprise on which to set the organization projects setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the organization projects setting on the enterprise. */
  settingValue: Gh_EnterpriseEnabledDisabledSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting */
export type Gh_UpdateEnterpriseOrganizationProjectsSettingPayload = {
  __typename?: 'gh_UpdateEnterpriseOrganizationProjectsSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The enterprise with the updated organization projects setting. */
  enterprise?: Maybe<Gh_Enterprise>;
  /** A message confirming the result of updating the organization projects setting. */
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseOwnerOrganizationRole */
export type Gh_UpdateEnterpriseOwnerOrganizationRoleInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the Enterprise which the owner belongs to. */
  enterpriseId: Scalars['ID'];
  /** The ID of the organization for membership change. */
  organizationId: Scalars['ID'];
  /** The role to assume in the organization. */
  organizationRole: Gh_RoleInOrganization;
};

/** Autogenerated return type of UpdateEnterpriseOwnerOrganizationRole */
export type Gh_UpdateEnterpriseOwnerOrganizationRolePayload = {
  __typename?: 'gh_UpdateEnterpriseOwnerOrganizationRolePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** A message confirming the result of changing the owner's organization role. */
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseProfile */
export type Gh_UpdateEnterpriseProfileInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The description of the enterprise. */
  description?: InputMaybe<Scalars['String']>;
  /** The Enterprise ID to update. */
  enterpriseId: Scalars['ID'];
  /** The location of the enterprise. */
  location?: InputMaybe<Scalars['String']>;
  /** The name of the enterprise. */
  name?: InputMaybe<Scalars['String']>;
  /** The URL of the enterprise's website. */
  websiteUrl?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateEnterpriseProfile */
export type Gh_UpdateEnterpriseProfilePayload = {
  __typename?: 'gh_UpdateEnterpriseProfilePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The updated enterprise. */
  enterprise?: Maybe<Gh_Enterprise>;
};

/** Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting */
export type Gh_UpdateEnterpriseRepositoryProjectsSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the enterprise on which to set the repository projects setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the repository projects setting on the enterprise. */
  settingValue: Gh_EnterpriseEnabledDisabledSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting */
export type Gh_UpdateEnterpriseRepositoryProjectsSettingPayload = {
  __typename?: 'gh_UpdateEnterpriseRepositoryProjectsSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The enterprise with the updated repository projects setting. */
  enterprise?: Maybe<Gh_Enterprise>;
  /** A message confirming the result of updating the repository projects setting. */
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting */
export type Gh_UpdateEnterpriseTeamDiscussionsSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the enterprise on which to set the team discussions setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the team discussions setting on the enterprise. */
  settingValue: Gh_EnterpriseEnabledDisabledSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting */
export type Gh_UpdateEnterpriseTeamDiscussionsSettingPayload = {
  __typename?: 'gh_UpdateEnterpriseTeamDiscussionsSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The enterprise with the updated team discussions setting. */
  enterprise?: Maybe<Gh_Enterprise>;
  /** A message confirming the result of updating the team discussions setting. */
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
export type Gh_UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the enterprise on which to set the two factor authentication required setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the two factor authentication required setting on the enterprise. */
  settingValue: Gh_EnterpriseEnabledSettingValue;
};

/** Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
export type Gh_UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload = {
  __typename?: 'gh_UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The enterprise with the updated two factor authentication required setting. */
  enterprise?: Maybe<Gh_Enterprise>;
  /** A message confirming the result of updating the two factor authentication required setting. */
  message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnvironment */
export type Gh_UpdateEnvironmentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The node ID of the environment. */
  environmentId: Scalars['ID'];
  /** The ids of users or teams that can approve deployments to this environment */
  reviewers?: InputMaybe<Array<Scalars['ID']>>;
  /** The wait timer in minutes. */
  waitTimer?: InputMaybe<Scalars['Int']>;
};

/** Autogenerated return type of UpdateEnvironment */
export type Gh_UpdateEnvironmentPayload = {
  __typename?: 'gh_UpdateEnvironmentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The updated environment. */
  environment?: Maybe<Gh_Environment>;
};

/** Autogenerated input type of UpdateIpAllowListEnabledSetting */
export type Gh_UpdateIpAllowListEnabledSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the owner on which to set the IP allow list enabled setting. */
  ownerId: Scalars['ID'];
  /** The value for the IP allow list enabled setting. */
  settingValue: Gh_IpAllowListEnabledSettingValue;
};

/** Autogenerated return type of UpdateIpAllowListEnabledSetting */
export type Gh_UpdateIpAllowListEnabledSettingPayload = {
  __typename?: 'gh_UpdateIpAllowListEnabledSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The IP allow list owner on which the setting was updated. */
  owner?: Maybe<Gh_IpAllowListOwner>;
};

/** Autogenerated input type of UpdateIpAllowListEntry */
export type Gh_UpdateIpAllowListEntryInput = {
  /** An IP address or range of addresses in CIDR notation. */
  allowListValue: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the IP allow list entry to update. */
  ipAllowListEntryId: Scalars['ID'];
  /** Whether the IP allow list entry is active when an IP allow list is enabled. */
  isActive: Scalars['Boolean'];
  /** An optional name for the IP allow list entry. */
  name?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateIpAllowListEntry */
export type Gh_UpdateIpAllowListEntryPayload = {
  __typename?: 'gh_UpdateIpAllowListEntryPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The IP allow list entry that was updated. */
  ipAllowListEntry?: Maybe<Gh_IpAllowListEntry>;
};

/** Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting */
export type Gh_UpdateIpAllowListForInstalledAppsEnabledSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the owner. */
  ownerId: Scalars['ID'];
  /** The value for the IP allow list configuration for installed GitHub Apps setting. */
  settingValue: Gh_IpAllowListForInstalledAppsEnabledSettingValue;
};

/** Autogenerated return type of UpdateIpAllowListForInstalledAppsEnabledSetting */
export type Gh_UpdateIpAllowListForInstalledAppsEnabledSettingPayload = {
  __typename?: 'gh_UpdateIpAllowListForInstalledAppsEnabledSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The IP allow list owner on which the setting was updated. */
  owner?: Maybe<Gh_IpAllowListOwner>;
};

/** Autogenerated input type of UpdateIssueComment */
export type Gh_UpdateIssueCommentInput = {
  /** The updated text of the comment. */
  body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the IssueComment to modify. */
  id: Scalars['ID'];
};

/** Autogenerated return type of UpdateIssueComment */
export type Gh_UpdateIssueCommentPayload = {
  __typename?: 'gh_UpdateIssueCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The updated comment. */
  issueComment?: Maybe<Gh_IssueComment>;
};

/** Autogenerated input type of UpdateIssue */
export type Gh_UpdateIssueInput = {
  /** An array of Node IDs of users for this issue. */
  assigneeIds?: InputMaybe<Array<Scalars['ID']>>;
  /** The body for the issue description. */
  body?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the Issue to modify. */
  id: Scalars['ID'];
  /** An array of Node IDs of labels for this issue. */
  labelIds?: InputMaybe<Array<Scalars['ID']>>;
  /** The Node ID of the milestone for this issue. */
  milestoneId?: InputMaybe<Scalars['ID']>;
  /** An array of Node IDs for projects associated with this issue. */
  projectIds?: InputMaybe<Array<Scalars['ID']>>;
  /** The desired issue state. */
  state?: InputMaybe<Gh_IssueState>;
  /** The title for the issue. */
  title?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateIssue */
export type Gh_UpdateIssuePayload = {
  __typename?: 'gh_UpdateIssuePayload';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The issue. */
  issue?: Maybe<Gh_Issue>;
};

/** Autogenerated input type of UpdateNotificationRestrictionSetting */
export type Gh_UpdateNotificationRestrictionSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the owner on which to set the restrict notifications setting. */
  ownerId: Scalars['ID'];
  /** The value for the restrict notifications setting. */
  settingValue: Gh_NotificationRestrictionSettingValue;
};

/** Autogenerated return type of UpdateNotificationRestrictionSetting */
export type Gh_UpdateNotificationRestrictionSettingPayload = {
  __typename?: 'gh_UpdateNotificationRestrictionSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The owner on which the setting was updated. */
  owner?: Maybe<Gh_VerifiableDomainOwner>;
};

/** Autogenerated input type of UpdateOrganizationAllowPrivateRepositoryForkingSetting */
export type Gh_UpdateOrganizationAllowPrivateRepositoryForkingSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Enable forking of private repositories in the organization? */
  forkingEnabled: Scalars['Boolean'];
  /** The ID of the organization on which to set the allow private repository forking setting. */
  organizationId: Scalars['ID'];
};

/** Autogenerated return type of UpdateOrganizationAllowPrivateRepositoryForkingSetting */
export type Gh_UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload = {
  __typename?: 'gh_UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** A message confirming the result of updating the allow private repository forking setting. */
  message?: Maybe<Scalars['String']>;
  /** The organization with the updated allow private repository forking setting. */
  organization?: Maybe<Gh_Organization>;
};

/** Autogenerated input type of UpdateProjectCard */
export type Gh_UpdateProjectCardInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Whether or not the ProjectCard should be archived */
  isArchived?: InputMaybe<Scalars['Boolean']>;
  /** The note of ProjectCard. */
  note?: InputMaybe<Scalars['String']>;
  /** The ProjectCard ID to update. */
  projectCardId: Scalars['ID'];
};

/** Autogenerated return type of UpdateProjectCard */
export type Gh_UpdateProjectCardPayload = {
  __typename?: 'gh_UpdateProjectCardPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The updated ProjectCard. */
  projectCard?: Maybe<Gh_ProjectCard>;
};

/** Autogenerated input type of UpdateProjectColumn */
export type Gh_UpdateProjectColumnInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The name of project column. */
  name: Scalars['String'];
  /** The ProjectColumn ID to update. */
  projectColumnId: Scalars['ID'];
};

/** Autogenerated return type of UpdateProjectColumn */
export type Gh_UpdateProjectColumnPayload = {
  __typename?: 'gh_UpdateProjectColumnPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The updated project column. */
  projectColumn?: Maybe<Gh_ProjectColumn>;
};

/** Autogenerated input type of UpdateProjectDraftIssue */
export type Gh_UpdateProjectDraftIssueInput = {
  /** The IDs of the assignees of the draft issue. */
  assigneeIds?: InputMaybe<Array<Scalars['ID']>>;
  /** The body of the draft issue. */
  body?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the draft issue to update. */
  draftIssueId: Scalars['ID'];
  /** The title of the draft issue. */
  title?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateProjectDraftIssue */
export type Gh_UpdateProjectDraftIssuePayload = {
  __typename?: 'gh_UpdateProjectDraftIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The draft issue updated in the project. */
  draftIssue?: Maybe<Gh_DraftIssue>;
};

/** Autogenerated input type of UpdateProject */
export type Gh_UpdateProjectInput = {
  /** The description of project. */
  body?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The name of project. */
  name?: InputMaybe<Scalars['String']>;
  /** The Project ID to update. */
  projectId: Scalars['ID'];
  /** Whether the project is public or not. */
  public?: InputMaybe<Scalars['Boolean']>;
  /** Whether the project is open or closed. */
  state?: InputMaybe<Gh_ProjectState>;
};

/** Autogenerated input type of UpdateProjectNext */
export type Gh_UpdateProjectNextInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Set the project to closed or open. */
  closed?: InputMaybe<Scalars['Boolean']>;
  /** Set the readme description of the project. */
  description?: InputMaybe<Scalars['String']>;
  /** The ID of the Project to update. */
  projectId: Scalars['ID'];
  /** Set the project to public or private. */
  public?: InputMaybe<Scalars['Boolean']>;
  /** Set the short description of the project. */
  shortDescription?: InputMaybe<Scalars['String']>;
  /** Set the title of the project. */
  title?: InputMaybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateProjectNextItemField */
export type Gh_UpdateProjectNextItemFieldInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The id of the field to be updated. */
  fieldId?: InputMaybe<Scalars['ID']>;
  /** The id of the item to be updated. */
  itemId: Scalars['ID'];
  /** The ID of the Project. */
  projectId: Scalars['ID'];
  /** The value which will be set on the field. */
  value: Scalars['String'];
};

/** Autogenerated return type of UpdateProjectNextItemField */
export type Gh_UpdateProjectNextItemFieldPayload = {
  __typename?: 'gh_UpdateProjectNextItemFieldPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The updated item. */
  projectNextItem?: Maybe<Gh_ProjectNextItem>;
};

/** Autogenerated return type of UpdateProjectNext */
export type Gh_UpdateProjectNextPayload = {
  __typename?: 'gh_UpdateProjectNextPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The updated Project. */
  projectNext?: Maybe<Gh_ProjectNext>;
};

/** Autogenerated return type of UpdateProject */
export type Gh_UpdateProjectPayload = {
  __typename?: 'gh_UpdateProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The updated project. */
  project?: Maybe<Gh_Project>;
};

/** Autogenerated input type of UpdatePullRequestBranch */
export type Gh_UpdatePullRequestBranchInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The head ref oid for the upstream branch. */
  expectedHeadOid?: InputMaybe<Scalars['gh_GitObjectID']>;
  /** The Node ID of the pull request. */
  pullRequestId: Scalars['ID'];
};

/** Autogenerated return type of UpdatePullRequestBranch */
export type Gh_UpdatePullRequestBranchPayload = {
  __typename?: 'gh_UpdatePullRequestBranchPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The updated pull request. */
  pullRequest?: Maybe<Gh_PullRequest>;
};

/** Autogenerated input type of UpdatePullRequest */
export type Gh_UpdatePullRequestInput = {
  /** An array of Node IDs of users for this pull request. */
  assigneeIds?: InputMaybe<Array<Scalars['ID']>>;
  /**
   * The name of the branch you want your changes pulled into. This should be an existing branch
   * on the current repository.
   *
   */
  baseRefName?: InputMaybe<Scalars['String']>;
  /** The contents of the pull request. */
  body?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** An array of Node IDs of labels for this pull request. */
  labelIds?: InputMaybe<Array<Scalars['ID']>>;
  /** Indicates whether maintainers can modify the pull request. */
  maintainerCanModify?: InputMaybe<Scalars['Boolean']>;
  /** The Node ID of the milestone for this pull request. */
  milestoneId?: InputMaybe<Scalars['ID']>;
  /** An array of Node IDs for projects associated with this pull request. */
  projectIds?: InputMaybe<Array<Scalars['ID']>>;
  /** The Node ID of the pull request. */
  pullRequestId: Scalars['ID'];
  /** The target state of the pull request. */
  state?: InputMaybe<Gh_PullRequestUpdateState>;
  /** The title of the pull request. */
  title?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of UpdatePullRequest */
export type Gh_UpdatePullRequestPayload = {
  __typename?: 'gh_UpdatePullRequestPayload';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The updated pull request. */
  pullRequest?: Maybe<Gh_PullRequest>;
};

/** Autogenerated input type of UpdatePullRequestReviewComment */
export type Gh_UpdatePullRequestReviewCommentInput = {
  /** The text of the comment. */
  body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Node ID of the comment to modify. */
  pullRequestReviewCommentId: Scalars['ID'];
};

/** Autogenerated return type of UpdatePullRequestReviewComment */
export type Gh_UpdatePullRequestReviewCommentPayload = {
  __typename?: 'gh_UpdatePullRequestReviewCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The updated comment. */
  pullRequestReviewComment?: Maybe<Gh_PullRequestReviewComment>;
};

/** Autogenerated input type of UpdatePullRequestReview */
export type Gh_UpdatePullRequestReviewInput = {
  /** The contents of the pull request review body. */
  body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Node ID of the pull request review to modify. */
  pullRequestReviewId: Scalars['ID'];
};

/** Autogenerated return type of UpdatePullRequestReview */
export type Gh_UpdatePullRequestReviewPayload = {
  __typename?: 'gh_UpdatePullRequestReviewPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The updated pull request review. */
  pullRequestReview?: Maybe<Gh_PullRequestReview>;
};

/** Autogenerated input type of UpdateRef */
export type Gh_UpdateRefInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Permit updates of branch Refs that are not fast-forwards? */
  force?: InputMaybe<Scalars['Boolean']>;
  /** The GitObjectID that the Ref shall be updated to target. */
  oid: Scalars['gh_GitObjectID'];
  /** The Node ID of the Ref to be updated. */
  refId: Scalars['ID'];
};

/** Autogenerated return type of UpdateRef */
export type Gh_UpdateRefPayload = {
  __typename?: 'gh_UpdateRefPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The updated Ref. */
  ref?: Maybe<Gh_Ref>;
};

/** Autogenerated input type of UpdateRepository */
export type Gh_UpdateRepositoryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** A new description for the repository. Pass an empty string to erase the existing description. */
  description?: InputMaybe<Scalars['String']>;
  /** Indicates if the repository should have the issues feature enabled. */
  hasIssuesEnabled?: InputMaybe<Scalars['Boolean']>;
  /** Indicates if the repository should have the project boards feature enabled. */
  hasProjectsEnabled?: InputMaybe<Scalars['Boolean']>;
  /** Indicates if the repository should have the wiki feature enabled. */
  hasWikiEnabled?: InputMaybe<Scalars['Boolean']>;
  /** The URL for a web page about this repository. Pass an empty string to erase the existing URL. */
  homepageUrl?: InputMaybe<Scalars['gh_URI']>;
  /** The new name of the repository. */
  name?: InputMaybe<Scalars['String']>;
  /** The ID of the repository to update. */
  repositoryId: Scalars['ID'];
  /** Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure. */
  template?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of UpdateRepository */
export type Gh_UpdateRepositoryPayload = {
  __typename?: 'gh_UpdateRepositoryPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The updated repository. */
  repository?: Maybe<Gh_Repository>;
};

/** Autogenerated input type of UpdateSponsorshipPreferences */
export type Gh_UpdateSponsorshipPreferencesInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used. */
  privacyLevel?: InputMaybe<Gh_SponsorshipPrivacy>;
  /** Whether the sponsor should receive email updates from the sponsorable. */
  receiveEmails?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given. */
  sponsorId?: InputMaybe<Scalars['ID']>;
  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given. */
  sponsorLogin?: InputMaybe<Scalars['String']>;
  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
  sponsorableId?: InputMaybe<Scalars['ID']>;
  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
  sponsorableLogin?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateSponsorshipPreferences */
export type Gh_UpdateSponsorshipPreferencesPayload = {
  __typename?: 'gh_UpdateSponsorshipPreferencesPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The sponsorship that was updated. */
  sponsorship?: Maybe<Gh_Sponsorship>;
};

/** Autogenerated input type of UpdateSubscription */
export type Gh_UpdateSubscriptionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The new state of the subscription. */
  state: Gh_SubscriptionState;
  /** The Node ID of the subscribable object to modify. */
  subscribableId: Scalars['ID'];
};

/** Autogenerated return type of UpdateSubscription */
export type Gh_UpdateSubscriptionPayload = {
  __typename?: 'gh_UpdateSubscriptionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The input subscribable entity. */
  subscribable?: Maybe<Gh_Subscribable>;
};

/** Autogenerated input type of UpdateTeamDiscussionComment */
export type Gh_UpdateTeamDiscussionCommentInput = {
  /** The updated text of the comment. */
  body: Scalars['String'];
  /** The current version of the body content. */
  bodyVersion?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the comment to modify. */
  id: Scalars['ID'];
};

/** Autogenerated return type of UpdateTeamDiscussionComment */
export type Gh_UpdateTeamDiscussionCommentPayload = {
  __typename?: 'gh_UpdateTeamDiscussionCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The updated comment. */
  teamDiscussionComment?: Maybe<Gh_TeamDiscussionComment>;
};

/** Autogenerated input type of UpdateTeamDiscussion */
export type Gh_UpdateTeamDiscussionInput = {
  /** The updated text of the discussion. */
  body?: InputMaybe<Scalars['String']>;
  /** The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server. */
  bodyVersion?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Node ID of the discussion to modify. */
  id: Scalars['ID'];
  /** If provided, sets the pinned state of the updated discussion. */
  pinned?: InputMaybe<Scalars['Boolean']>;
  /** The updated title of the discussion. */
  title?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateTeamDiscussion */
export type Gh_UpdateTeamDiscussionPayload = {
  __typename?: 'gh_UpdateTeamDiscussionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The updated discussion. */
  teamDiscussion?: Maybe<Gh_TeamDiscussion>;
};

/** Autogenerated input type of UpdateTeamsRepository */
export type Gh_UpdateTeamsRepositoryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Permission that should be granted to the teams. */
  permission: Gh_RepositoryPermission;
  /** Repository ID being granted access to. */
  repositoryId: Scalars['ID'];
  /** A list of teams being granted access. Limit: 10 */
  teamIds: Array<Scalars['ID']>;
};

/** Autogenerated return type of UpdateTeamsRepository */
export type Gh_UpdateTeamsRepositoryPayload = {
  __typename?: 'gh_UpdateTeamsRepositoryPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The repository that was updated. */
  repository?: Maybe<Gh_Repository>;
  /** The teams granted permission on the repository. */
  teams?: Maybe<Array<Gh_Team>>;
};

/** Autogenerated input type of UpdateTopics */
export type Gh_UpdateTopicsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The Node ID of the repository. */
  repositoryId: Scalars['ID'];
  /** An array of topic names. */
  topicNames: Array<Scalars['String']>;
};

/** Autogenerated return type of UpdateTopics */
export type Gh_UpdateTopicsPayload = {
  __typename?: 'gh_UpdateTopicsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Names of the provided topics that are not valid. */
  invalidTopicNames?: Maybe<Array<Scalars['String']>>;
  /** The updated repository. */
  repository?: Maybe<Gh_Repository>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_User = Gh_Actor & Gh_Node & Gh_PackageOwner & Gh_ProfileOwner & Gh_ProjectNextOwner & Gh_ProjectOwner & Gh_ProjectV2Owner & Gh_RepositoryDiscussionAuthor & Gh_RepositoryDiscussionCommentAuthor & Gh_RepositoryOwner & Gh_Sponsorable & Gh_UniformResourceLocatable & {
  __typename?: 'gh_User';
  /** Determine if this repository owner has any items that can be pinned to their profile. */
  anyPinnableItems: Scalars['Boolean'];
  /** A URL pointing to the user's public avatar. */
  avatarUrl: Scalars['gh_URI'];
  /** The user's public profile bio. */
  bio?: Maybe<Scalars['String']>;
  /** The user's public profile bio as HTML. */
  bioHTML: Scalars['gh_HTML'];
  /** Could this user receive email notifications, if the organization had notification restrictions enabled? */
  canReceiveOrganizationEmailsWhenNotificationsRestricted: Scalars['Boolean'];
  /** A list of commit comments made by this user. */
  commitComments: Gh_CommitCommentConnection;
  /** The user's public profile company. */
  company?: Maybe<Scalars['String']>;
  /** The user's public profile company as HTML. */
  companyHTML: Scalars['gh_HTML'];
  /** The collection of contributions this user has made to different repositories. */
  contributionsCollection: Gh_ContributionsCollection;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The user's publicly visible profile email. */
  email: Scalars['String'];
  /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
  estimatedNextSponsorsPayoutInCents: Scalars['Int'];
  /** A list of users the given user is followed by. */
  followers: Gh_FollowerConnection;
  /** A list of users the given user is following. */
  following: Gh_FollowingConnection;
  /** Find gist by repo name. */
  gist?: Maybe<Gh_Gist>;
  /** A list of gist comments made by this user. */
  gistComments: Gh_GistCommentConnection;
  /** A list of the Gists the user has created. */
  gists: Gh_GistConnection;
  /** True if this user/organization has a GitHub Sponsors listing. */
  hasSponsorsListing: Scalars['Boolean'];
  /** The hovercard information for this user in a given context */
  hovercard: Gh_Hovercard;
  id: Scalars['ID'];
  /** The interaction ability settings for this user. */
  interactionAbility?: Maybe<Gh_RepositoryInteractionAbility>;
  /** Whether or not this user is a participant in the GitHub Security Bug Bounty. */
  isBountyHunter: Scalars['Boolean'];
  /** Whether or not this user is a participant in the GitHub Campus Experts Program. */
  isCampusExpert: Scalars['Boolean'];
  /** Whether or not this user is a GitHub Developer Program member. */
  isDeveloperProgramMember: Scalars['Boolean'];
  /** Whether or not this user is a GitHub employee. */
  isEmployee: Scalars['Boolean'];
  /** Whether or not this user is following the viewer. Inverse of viewer_is_following */
  isFollowingViewer: Scalars['Boolean'];
  /** Whether or not this user is a member of the GitHub Stars Program. */
  isGitHubStar: Scalars['Boolean'];
  /** Whether or not the user has marked themselves as for hire. */
  isHireable: Scalars['Boolean'];
  /** Whether or not this user is a site administrator. */
  isSiteAdmin: Scalars['Boolean'];
  /** Check if the given account is sponsoring this user/organization. */
  isSponsoredBy: Scalars['Boolean'];
  /** True if the viewer is sponsored by this user/organization. */
  isSponsoringViewer: Scalars['Boolean'];
  /** Whether or not this user is the viewing user. */
  isViewer: Scalars['Boolean'];
  /** A list of issue comments made by this user. */
  issueComments: Gh_IssueCommentConnection;
  /** A list of issues associated with this user. */
  issues: Gh_IssueConnection;
  /** Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. */
  itemShowcase: Gh_ProfileItemShowcase;
  /** The user's public profile location. */
  location?: Maybe<Scalars['String']>;
  /** The username used to login. */
  login: Scalars['String'];
  /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
  monthlyEstimatedSponsorsIncomeInCents: Scalars['Int'];
  /** The user's public profile name. */
  name?: Maybe<Scalars['String']>;
  /** Find an organization by its login that the user belongs to. */
  organization?: Maybe<Gh_Organization>;
  /** Verified email addresses that match verified domains for a specified organization the user is a member of. */
  organizationVerifiedDomainEmails: Array<Scalars['String']>;
  /** A list of organizations the user belongs to. */
  organizations: Gh_OrganizationConnection;
  /** A list of packages under the owner. */
  packages: Gh_PackageConnection;
  /** A list of repositories and gists this profile owner can pin to their profile. */
  pinnableItems: Gh_PinnableItemConnection;
  /** A list of repositories and gists this profile owner has pinned to their profile */
  pinnedItems: Gh_PinnableItemConnection;
  /** Returns how many more items this profile owner can pin to their profile. */
  pinnedItemsRemaining: Scalars['Int'];
  /** Find project by number. */
  project?: Maybe<Gh_Project>;
  /** Find a project by project (beta) number. */
  projectNext?: Maybe<Gh_ProjectNext>;
  /** A list of projects under the owner. */
  projects: Gh_ProjectConnection;
  /** A list of projects (beta) under the owner. */
  projectsNext: Gh_ProjectNextConnection;
  /** The HTTP path listing user's projects */
  projectsResourcePath: Scalars['gh_URI'];
  /** The HTTP URL listing user's projects */
  projectsUrl: Scalars['gh_URI'];
  /** A list of public keys associated with this user. */
  publicKeys: Gh_PublicKeyConnection;
  /** A list of pull requests associated with this user. */
  pullRequests: Gh_PullRequestConnection;
  /** A list of repositories that the user owns. */
  repositories: Gh_RepositoryConnection;
  /** A list of repositories that the user recently contributed to. */
  repositoriesContributedTo: Gh_RepositoryConnection;
  /** Find Repository. */
  repository?: Maybe<Gh_Repository>;
  /** Discussion comments this user has authored. */
  repositoryDiscussionComments: Gh_DiscussionCommentConnection;
  /** Discussions this user has started. */
  repositoryDiscussions: Gh_DiscussionConnection;
  /** The HTTP path for this user */
  resourcePath: Scalars['gh_URI'];
  /** Replies this user has saved */
  savedReplies?: Maybe<Gh_SavedReplyConnection>;
  /** List of users and organizations this entity is sponsoring. */
  sponsoring: Gh_SponsorConnection;
  /** List of sponsors for this user or organization. */
  sponsors: Gh_SponsorConnection;
  /** Events involving this sponsorable, such as new sponsorships. */
  sponsorsActivities: Gh_SponsorsActivityConnection;
  /** The GitHub Sponsors listing for this user or organization. */
  sponsorsListing?: Maybe<Gh_SponsorsListing>;
  /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. */
  sponsorshipForViewerAsSponsor?: Maybe<Gh_Sponsorship>;
  /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. */
  sponsorshipForViewerAsSponsorable?: Maybe<Gh_Sponsorship>;
  /** List of sponsorship updates sent from this sponsorable to sponsors. */
  sponsorshipNewsletters: Gh_SponsorshipNewsletterConnection;
  /** This object's sponsorships as the maintainer. */
  sponsorshipsAsMaintainer: Gh_SponsorshipConnection;
  /** This object's sponsorships as the sponsor. */
  sponsorshipsAsSponsor: Gh_SponsorshipConnection;
  /** Repositories the user has starred. */
  starredRepositories: Gh_StarredRepositoryConnection;
  /** The user's description of what they're currently doing. */
  status?: Maybe<Gh_UserStatus>;
  /**
   * Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created
   *
   */
  topRepositories: Gh_RepositoryConnection;
  /** The user's Twitter username. */
  twitterUsername?: Maybe<Scalars['String']>;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The HTTP URL for this user */
  url: Scalars['gh_URI'];
  /** Can the viewer pin repositories and gists to the profile? */
  viewerCanChangePinnedItems: Scalars['Boolean'];
  /** Can the current viewer create new projects on this owner. */
  viewerCanCreateProjects: Scalars['Boolean'];
  /** Whether or not the viewer is able to follow the user. */
  viewerCanFollow: Scalars['Boolean'];
  /** Whether or not the viewer is able to sponsor this user/organization. */
  viewerCanSponsor: Scalars['Boolean'];
  /** Whether or not this user is followed by the viewer. Inverse of is_following_viewer. */
  viewerIsFollowing: Scalars['Boolean'];
  /** True if the viewer is sponsoring this user/organization. */
  viewerIsSponsoring: Scalars['Boolean'];
  /** A list of repositories the given user is watching. */
  watching: Gh_RepositoryConnection;
  /** A URL pointing to the user's public website/blog. */
  websiteUrl?: Maybe<Scalars['gh_URI']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserAnyPinnableItemsArgs = {
  type?: InputMaybe<Gh_PinnableItemType>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserAvatarUrlArgs = {
  size?: InputMaybe<Scalars['Int']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserCanReceiveOrganizationEmailsWhenNotificationsRestrictedArgs = {
  login: Scalars['String'];
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserCommitCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserContributionsCollectionArgs = {
  from?: InputMaybe<Scalars['gh_DateTime']>;
  organizationID?: InputMaybe<Scalars['ID']>;
  to?: InputMaybe<Scalars['gh_DateTime']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserFollowersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserFollowingArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserGistArgs = {
  name: Scalars['String'];
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserGistCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserGistsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_GistOrder>;
  privacy?: InputMaybe<Gh_GistPrivacy>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserHovercardArgs = {
  primarySubjectId?: InputMaybe<Scalars['ID']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserIsSponsoredByArgs = {
  accountLogin: Scalars['String'];
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserIssueCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_IssueCommentOrder>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserIssuesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  filterBy?: InputMaybe<Gh_IssueFilters>;
  first?: InputMaybe<Scalars['Int']>;
  labels?: InputMaybe<Array<Scalars['String']>>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_IssueOrder>;
  states?: InputMaybe<Array<Gh_IssueState>>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserOrganizationArgs = {
  login: Scalars['String'];
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserOrganizationVerifiedDomainEmailsArgs = {
  login: Scalars['String'];
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserOrganizationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserPackagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  names?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  orderBy?: InputMaybe<Gh_PackageOrder>;
  packageType?: InputMaybe<Gh_PackageType>;
  repositoryId?: InputMaybe<Scalars['ID']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserPinnableItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  types?: InputMaybe<Array<Gh_PinnableItemType>>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserPinnedItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  types?: InputMaybe<Array<Gh_PinnableItemType>>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserProjectArgs = {
  number: Scalars['Int'];
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserProjectNextArgs = {
  number: Scalars['Int'];
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserProjectsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_ProjectOrder>;
  search?: InputMaybe<Scalars['String']>;
  states?: InputMaybe<Array<Gh_ProjectState>>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserProjectsNextArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  query?: InputMaybe<Scalars['String']>;
  sortBy?: InputMaybe<Gh_ProjectNextOrderField>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserPublicKeysArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserPullRequestsArgs = {
  after?: InputMaybe<Scalars['String']>;
  baseRefName?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  headRefName?: InputMaybe<Scalars['String']>;
  labels?: InputMaybe<Array<Scalars['String']>>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_IssueOrder>;
  states?: InputMaybe<Array<Gh_PullRequestState>>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserRepositoriesArgs = {
  affiliations?: InputMaybe<Array<InputMaybe<Gh_RepositoryAffiliation>>>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  isFork?: InputMaybe<Scalars['Boolean']>;
  isLocked?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_RepositoryOrder>;
  ownerAffiliations?: InputMaybe<Array<InputMaybe<Gh_RepositoryAffiliation>>>;
  privacy?: InputMaybe<Gh_RepositoryPrivacy>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserRepositoriesContributedToArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  contributionTypes?: InputMaybe<Array<InputMaybe<Gh_RepositoryContributionType>>>;
  first?: InputMaybe<Scalars['Int']>;
  includeUserRepositories?: InputMaybe<Scalars['Boolean']>;
  isLocked?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_RepositoryOrder>;
  privacy?: InputMaybe<Gh_RepositoryPrivacy>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserRepositoryArgs = {
  followRenames?: InputMaybe<Scalars['Boolean']>;
  name: Scalars['String'];
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserRepositoryDiscussionCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  onlyAnswers?: InputMaybe<Scalars['Boolean']>;
  repositoryId?: InputMaybe<Scalars['ID']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserRepositoryDiscussionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  answered?: InputMaybe<Scalars['Boolean']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_DiscussionOrder>;
  repositoryId?: InputMaybe<Scalars['ID']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserSavedRepliesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_SavedReplyOrder>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserSponsoringArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_SponsorOrder>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserSponsorsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_SponsorOrder>;
  tierId?: InputMaybe<Scalars['ID']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserSponsorsActivitiesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_SponsorsActivityOrder>;
  period?: InputMaybe<Gh_SponsorsActivityPeriod>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserSponsorshipNewslettersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_SponsorshipNewsletterOrder>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserSponsorshipsAsMaintainerArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  includePrivate?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_SponsorshipOrder>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserSponsorshipsAsSponsorArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_SponsorshipOrder>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserStarredRepositoriesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_StarOrder>;
  ownedByViewer?: InputMaybe<Scalars['Boolean']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserTopRepositoriesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy: Gh_RepositoryOrder;
  since?: InputMaybe<Scalars['gh_DateTime']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type Gh_UserWatchingArgs = {
  affiliations?: InputMaybe<Array<InputMaybe<Gh_RepositoryAffiliation>>>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  isLocked?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Gh_RepositoryOrder>;
  ownerAffiliations?: InputMaybe<Array<InputMaybe<Gh_RepositoryAffiliation>>>;
  privacy?: InputMaybe<Gh_RepositoryPrivacy>;
};

/** The possible durations that a user can be blocked for. */
export enum Gh_UserBlockDuration {
  /** The user was blocked for 1 day */
  OneDay = 'ONE_DAY',
  /** The user was blocked for 30 days */
  OneMonth = 'ONE_MONTH',
  /** The user was blocked for 7 days */
  OneWeek = 'ONE_WEEK',
  /** The user was blocked permanently */
  Permanent = 'PERMANENT',
  /** The user was blocked for 3 days */
  ThreeDays = 'THREE_DAYS'
}

/** Represents a 'user_blocked' event on a given user. */
export type Gh_UserBlockedEvent = Gh_Node & {
  __typename?: 'gh_UserBlockedEvent';
  /** Identifies the actor who performed the event. */
  actor?: Maybe<Gh_Actor>;
  /** Number of days that the user was blocked for. */
  blockDuration: Gh_UserBlockDuration;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  id: Scalars['ID'];
  /** The user who was blocked. */
  subject?: Maybe<Gh_User>;
};

/** The connection type for User. */
export type Gh_UserConnection = {
  __typename?: 'gh_UserConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_UserEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_User>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edit on user content */
export type Gh_UserContentEdit = Gh_Node & {
  __typename?: 'gh_UserContentEdit';
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the date and time when the object was deleted. */
  deletedAt?: Maybe<Scalars['gh_DateTime']>;
  /** The actor who deleted this content */
  deletedBy?: Maybe<Gh_Actor>;
  /** A summary of the changes for this edit */
  diff?: Maybe<Scalars['String']>;
  /** When this content was edited */
  editedAt: Scalars['gh_DateTime'];
  /** The actor who edited this content */
  editor?: Maybe<Gh_Actor>;
  id: Scalars['ID'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
};

/** A list of edits to content. */
export type Gh_UserContentEditConnection = {
  __typename?: 'gh_UserContentEditConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_UserContentEditEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_UserContentEdit>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_UserContentEditEdge = {
  __typename?: 'gh_UserContentEditEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_UserContentEdit>;
};

/** Represents a user. */
export type Gh_UserEdge = {
  __typename?: 'gh_UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_User>;
};

/** Email attributes from External Identity */
export type Gh_UserEmailMetadata = {
  __typename?: 'gh_UserEmailMetadata';
  /** Boolean to identify primary emails */
  primary?: Maybe<Scalars['Boolean']>;
  /** Type of email */
  type?: Maybe<Scalars['String']>;
  /** Email id */
  value: Scalars['String'];
};

/** The user's description of what they're currently doing. */
export type Gh_UserStatus = Gh_Node & {
  __typename?: 'gh_UserStatus';
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** An emoji summarizing the user's status. */
  emoji?: Maybe<Scalars['String']>;
  /** The status emoji as HTML. */
  emojiHTML?: Maybe<Scalars['gh_HTML']>;
  /** If set, the status will not be shown after this date. */
  expiresAt?: Maybe<Scalars['gh_DateTime']>;
  id: Scalars['ID'];
  /** Whether this status indicates the user is not fully available on GitHub. */
  indicatesLimitedAvailability: Scalars['Boolean'];
  /** A brief message describing what the user is doing. */
  message?: Maybe<Scalars['String']>;
  /** The organization whose members can see this status. If null, this status is publicly visible. */
  organization?: Maybe<Gh_Organization>;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The user who has this status. */
  user: Gh_User;
};

/** The connection type for UserStatus. */
export type Gh_UserStatusConnection = {
  __typename?: 'gh_UserStatusConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_UserStatusEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_UserStatus>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_UserStatusEdge = {
  __typename?: 'gh_UserStatusEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_UserStatus>;
};

/** Ordering options for user status connections. */
export type Gh_UserStatusOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order user statuses by. */
  field: Gh_UserStatusOrderField;
};

/** Properties by which user status connections can be ordered. */
export enum Gh_UserStatusOrderField {
  /** Order user statuses by when they were updated. */
  UpdatedAt = 'UPDATED_AT'
}

/** A domain that can be verified or approved for an organization or an enterprise. */
export type Gh_VerifiableDomain = Gh_Node & {
  __typename?: 'gh_VerifiableDomain';
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The DNS host name that should be used for verification. */
  dnsHostName?: Maybe<Scalars['gh_URI']>;
  /** The unicode encoded domain. */
  domain: Scalars['gh_URI'];
  /** Whether a TXT record for verification with the expected host name was found. */
  hasFoundHostName: Scalars['Boolean'];
  /** Whether a TXT record for verification with the expected verification token was found. */
  hasFoundVerificationToken: Scalars['Boolean'];
  id: Scalars['ID'];
  /** Whether or not the domain is approved. */
  isApproved: Scalars['Boolean'];
  /** Whether this domain is required to exist for an organization or enterprise policy to be enforced. */
  isRequiredForPolicyEnforcement: Scalars['Boolean'];
  /** Whether or not the domain is verified. */
  isVerified: Scalars['Boolean'];
  /** The owner of the domain. */
  owner: Gh_VerifiableDomainOwner;
  /** The punycode encoded domain. */
  punycodeEncodedDomain: Scalars['gh_URI'];
  /** The time that the current verification token will expire. */
  tokenExpirationTime?: Maybe<Scalars['gh_DateTime']>;
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The current verification token for the domain. */
  verificationToken?: Maybe<Scalars['String']>;
};

/** The connection type for VerifiableDomain. */
export type Gh_VerifiableDomainConnection = {
  __typename?: 'gh_VerifiableDomainConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Gh_VerifiableDomainEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Gh_VerifiableDomain>>>;
  /** Information to aid in pagination. */
  pageInfo: Gh_PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type Gh_VerifiableDomainEdge = {
  __typename?: 'gh_VerifiableDomainEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Gh_VerifiableDomain>;
};

/** Ordering options for verifiable domain connections. */
export type Gh_VerifiableDomainOrder = {
  /** The ordering direction. */
  direction: Gh_OrderDirection;
  /** The field to order verifiable domains by. */
  field: Gh_VerifiableDomainOrderField;
};

/** Properties by which verifiable domain connections can be ordered. */
export enum Gh_VerifiableDomainOrderField {
  /** Order verifiable domains by their creation date. */
  CreatedAt = 'CREATED_AT',
  /** Order verifiable domains by the domain name. */
  Domain = 'DOMAIN'
}

/** Types that can own a verifiable domain. */
export type Gh_VerifiableDomainOwner = Gh_Enterprise | Gh_Organization;

/** Autogenerated input type of VerifyVerifiableDomain */
export type Gh_VerifyVerifiableDomainInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the verifiable domain to verify. */
  id: Scalars['ID'];
};

/** Autogenerated return type of VerifyVerifiableDomain */
export type Gh_VerifyVerifiableDomainPayload = {
  __typename?: 'gh_VerifyVerifiableDomainPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The verifiable domain that was verified. */
  domain?: Maybe<Gh_VerifiableDomain>;
};

/** A hovercard context with a message describing how the viewer is related. */
export type Gh_ViewerHovercardContext = Gh_HovercardContext & {
  __typename?: 'gh_ViewerHovercardContext';
  /** A string describing this context */
  message: Scalars['String'];
  /** An octicon to accompany this context */
  octicon: Scalars['String'];
  /** Identifies the user who is related to this context. */
  viewer: Gh_User;
};

/** A subject that may be upvoted. */
export type Gh_Votable = {
  /** Number of upvotes that this subject has received. */
  upvoteCount: Scalars['Int'];
  /** Whether or not the current user can add or remove an upvote on this subject. */
  viewerCanUpvote: Scalars['Boolean'];
  /** Whether or not the current user has already upvoted this subject. */
  viewerHasUpvoted: Scalars['Boolean'];
};

/** A workflow contains meta information about an Actions workflow file. */
export type Gh_Workflow = Gh_Node & {
  __typename?: 'gh_Workflow';
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  /** The name of the workflow. */
  name: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
};

/** A workflow run. */
export type Gh_WorkflowRun = Gh_Node & {
  __typename?: 'gh_WorkflowRun';
  /** The check suite this workflow run belongs to. */
  checkSuite: Gh_CheckSuite;
  /** Identifies the date and time when the object was created. */
  createdAt: Scalars['gh_DateTime'];
  /** Identifies the primary key from the database. */
  databaseId?: Maybe<Scalars['Int']>;
  /** The log of deployment reviews */
  deploymentReviews: Gh_DeploymentReviewConnection;
  id: Scalars['ID'];
  /** The pending deployment requests of all check runs in this workflow run */
  pendingDeploymentRequests: Gh_DeploymentRequestConnection;
  /** The HTTP path for this workflow run */
  resourcePath: Scalars['gh_URI'];
  /** A number that uniquely identifies this workflow run in its parent workflow. */
  runNumber: Scalars['Int'];
  /** Identifies the date and time when the object was last updated. */
  updatedAt: Scalars['gh_DateTime'];
  /** The HTTP URL for this workflow run */
  url: Scalars['gh_URI'];
  /** The workflow executed in this workflow run. */
  workflow: Gh_Workflow;
};


/** A workflow run. */
export type Gh_WorkflowRunDeploymentReviewsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A workflow run. */
export type Gh_WorkflowRunPendingDeploymentRequestsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

export type Graphcms_Aggregate = {
  __typename?: 'graphcms_Aggregate';
  count: Scalars['Int'];
};

/** Asset system model */
export type Graphcms_Asset = Graphcms_Node & {
  __typename?: 'graphcms_Asset';
  authorAvatar: Array<Graphcms_Author>;
  /** Enter a caption to appear with the image */
  caption?: Maybe<Scalars['String']>;
  coverImagePost: Array<Graphcms_Post>;
  /** The time the document was created */
  createdAt: Scalars['graphcms_DateTime'];
  /** User that created this document */
  createdBy?: Maybe<Graphcms_User>;
  /** Get the document in other stages */
  documentInStages: Array<Graphcms_Asset>;
  /** The file name */
  fileName: Scalars['String'];
  /** The file handle */
  handle: Scalars['String'];
  /** The height of the file */
  height?: Maybe<Scalars['Float']>;
  /** List of Asset versions */
  history: Array<Graphcms_Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  imageShowcaseCard: Array<Graphcms_ShowcaseCard>;
  /** System Locale field */
  locale: Graphcms_Locale;
  /** Get the other localizations for this document */
  localizations: Array<Graphcms_Asset>;
  /** The mime type of the file */
  mimeType?: Maybe<Scalars['String']>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['graphcms_DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<Graphcms_User>;
  scheduledIn: Array<Graphcms_ScheduledOperation>;
  seoImage: Array<Graphcms_Seo>;
  /** The file size */
  size?: Maybe<Scalars['Float']>;
  /** System stage field */
  stage: Graphcms_Stage;
  /** The time the document was updated */
  updatedAt: Scalars['graphcms_DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<Graphcms_User>;
  /** Get the url for the asset with provided transformations applied. */
  url: Scalars['String'];
  /** The file width */
  width?: Maybe<Scalars['Float']>;
};


/** Asset system model */
export type Graphcms_AssetAuthorAvatarArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Graphcms_Locale>>;
  orderBy?: InputMaybe<Graphcms_AuthorOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_AuthorWhereInput>;
};


/** Asset system model */
export type Graphcms_AssetCoverImagePostArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Graphcms_Locale>>;
  orderBy?: InputMaybe<Graphcms_PostOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_PostWhereInput>;
};


/** Asset system model */
export type Graphcms_AssetCreatedAtArgs = {
  variation?: Graphcms_SystemDateTimeFieldVariation;
};


/** Asset system model */
export type Graphcms_AssetCreatedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


/** Asset system model */
export type Graphcms_AssetDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Graphcms_Stage>;
};


/** Asset system model */
export type Graphcms_AssetHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Graphcms_Stage>;
};


/** Asset system model */
export type Graphcms_AssetImageShowcaseCardArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Graphcms_Locale>>;
  orderBy?: InputMaybe<Graphcms_ShowcaseCardOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_ShowcaseCardWhereInput>;
};


/** Asset system model */
export type Graphcms_AssetLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Graphcms_Locale>;
};


/** Asset system model */
export type Graphcms_AssetPublishedAtArgs = {
  variation?: Graphcms_SystemDateTimeFieldVariation;
};


/** Asset system model */
export type Graphcms_AssetPublishedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


/** Asset system model */
export type Graphcms_AssetScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Graphcms_Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
};


/** Asset system model */
export type Graphcms_AssetSeoImageArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Graphcms_Locale>>;
  orderBy?: InputMaybe<Graphcms_SeoOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_SeoWhereInput>;
};


/** Asset system model */
export type Graphcms_AssetUpdatedAtArgs = {
  variation?: Graphcms_SystemDateTimeFieldVariation;
};


/** Asset system model */
export type Graphcms_AssetUpdatedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


/** Asset system model */
export type Graphcms_AssetUrlArgs = {
  transformation?: InputMaybe<Graphcms_AssetTransformationInput>;
};

/** A connection to a list of items. */
export type Graphcms_AssetConnection = {
  __typename?: 'graphcms_AssetConnection';
  aggregate: Graphcms_Aggregate;
  /** A list of edges. */
  edges: Array<Graphcms_AssetEdge>;
  /** Information to aid in pagination. */
  pageInfo: Graphcms_PageInfo;
};

export type Graphcms_AssetCreateInput = {
  authorAvatar?: InputMaybe<Graphcms_AuthorCreateManyInlineInput>;
  caption?: InputMaybe<Scalars['String']>;
  coverImagePost?: InputMaybe<Graphcms_PostCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  fileName: Scalars['String'];
  handle: Scalars['String'];
  height?: InputMaybe<Scalars['Float']>;
  imageShowcaseCard?: InputMaybe<Graphcms_ShowcaseCardCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<Graphcms_AssetCreateLocalizationsInput>;
  mimeType?: InputMaybe<Scalars['String']>;
  seoImage?: InputMaybe<Graphcms_SeoCreateManyInlineInput>;
  size?: InputMaybe<Scalars['Float']>;
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type Graphcms_AssetCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  fileName: Scalars['String'];
  handle: Scalars['String'];
  height?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Float']>;
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type Graphcms_AssetCreateLocalizationInput = {
  /** Localization input */
  data: Graphcms_AssetCreateLocalizationDataInput;
  locale: Graphcms_Locale;
};

export type Graphcms_AssetCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<Graphcms_AssetCreateLocalizationInput>>;
};

export type Graphcms_AssetCreateOneInlineInput = {
  /** Connect one existing Asset document */
  connect?: InputMaybe<Graphcms_AssetWhereUniqueInput>;
  /** Create and connect one Asset document */
  create?: InputMaybe<Graphcms_AssetCreateInput>;
};

/** An edge in a connection. */
export type Graphcms_AssetEdge = {
  __typename?: 'graphcms_AssetEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Graphcms_Asset;
};

/** Identifies documents */
export type Graphcms_AssetManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<Graphcms_AssetWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<Graphcms_AssetWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<Graphcms_AssetWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  authorAvatar_every?: InputMaybe<Graphcms_AuthorWhereInput>;
  authorAvatar_none?: InputMaybe<Graphcms_AuthorWhereInput>;
  authorAvatar_some?: InputMaybe<Graphcms_AuthorWhereInput>;
  caption?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  caption_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  caption_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  caption_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  caption_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  caption_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  caption_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  caption_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  caption_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  caption_starts_with?: InputMaybe<Scalars['String']>;
  coverImagePost_every?: InputMaybe<Graphcms_PostWhereInput>;
  coverImagePost_none?: InputMaybe<Graphcms_PostWhereInput>;
  coverImagePost_some?: InputMaybe<Graphcms_PostWhereInput>;
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  createdBy?: InputMaybe<Graphcms_UserWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  imageShowcaseCard_every?: InputMaybe<Graphcms_ShowcaseCardWhereInput>;
  imageShowcaseCard_none?: InputMaybe<Graphcms_ShowcaseCardWhereInput>;
  imageShowcaseCard_some?: InputMaybe<Graphcms_ShowcaseCardWhereInput>;
  publishedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  publishedBy?: InputMaybe<Graphcms_UserWhereInput>;
  scheduledIn_every?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  seoImage_every?: InputMaybe<Graphcms_SeoWhereInput>;
  seoImage_none?: InputMaybe<Graphcms_SeoWhereInput>;
  seoImage_some?: InputMaybe<Graphcms_SeoWhereInput>;
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  updatedBy?: InputMaybe<Graphcms_UserWhereInput>;
};

export enum Graphcms_AssetOrderByInput {
  CaptionAsc = 'caption_ASC',
  CaptionDesc = 'caption_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  FileNameAsc = 'fileName_ASC',
  FileNameDesc = 'fileName_DESC',
  HandleAsc = 'handle_ASC',
  HandleDesc = 'handle_DESC',
  HeightAsc = 'height_ASC',
  HeightDesc = 'height_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  MimeTypeAsc = 'mimeType_ASC',
  MimeTypeDesc = 'mimeType_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SizeAsc = 'size_ASC',
  SizeDesc = 'size_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WidthAsc = 'width_ASC',
  WidthDesc = 'width_DESC'
}

/** Transformations for Assets */
export type Graphcms_AssetTransformationInput = {
  document?: InputMaybe<Graphcms_DocumentTransformationInput>;
  image?: InputMaybe<Graphcms_ImageTransformationInput>;
  /** Pass true if you want to validate the passed transformation parameters */
  validateOptions?: InputMaybe<Scalars['Boolean']>;
};

export type Graphcms_AssetUpdateInput = {
  authorAvatar?: InputMaybe<Graphcms_AuthorUpdateManyInlineInput>;
  caption?: InputMaybe<Scalars['String']>;
  coverImagePost?: InputMaybe<Graphcms_PostUpdateManyInlineInput>;
  fileName?: InputMaybe<Scalars['String']>;
  handle?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  imageShowcaseCard?: InputMaybe<Graphcms_ShowcaseCardUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<Graphcms_AssetUpdateLocalizationsInput>;
  mimeType?: InputMaybe<Scalars['String']>;
  seoImage?: InputMaybe<Graphcms_SeoUpdateManyInlineInput>;
  size?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type Graphcms_AssetUpdateLocalizationDataInput = {
  fileName?: InputMaybe<Scalars['String']>;
  handle?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type Graphcms_AssetUpdateLocalizationInput = {
  data: Graphcms_AssetUpdateLocalizationDataInput;
  locale: Graphcms_Locale;
};

export type Graphcms_AssetUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<Graphcms_AssetCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Graphcms_Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<Graphcms_AssetUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<Graphcms_AssetUpsertLocalizationInput>>;
};

export type Graphcms_AssetUpdateManyInput = {
  caption?: InputMaybe<Scalars['String']>;
  fileName?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<Graphcms_AssetUpdateManyLocalizationsInput>;
  mimeType?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type Graphcms_AssetUpdateManyLocalizationDataInput = {
  fileName?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type Graphcms_AssetUpdateManyLocalizationInput = {
  data: Graphcms_AssetUpdateManyLocalizationDataInput;
  locale: Graphcms_Locale;
};

export type Graphcms_AssetUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<Graphcms_AssetUpdateManyLocalizationInput>>;
};

export type Graphcms_AssetUpdateOneInlineInput = {
  /** Connect existing Asset document */
  connect?: InputMaybe<Graphcms_AssetWhereUniqueInput>;
  /** Create and connect one Asset document */
  create?: InputMaybe<Graphcms_AssetCreateInput>;
  /** Delete currently connected Asset document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Asset document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Asset document */
  update?: InputMaybe<Graphcms_AssetUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Asset document */
  upsert?: InputMaybe<Graphcms_AssetUpsertWithNestedWhereUniqueInput>;
};

export type Graphcms_AssetUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: Graphcms_AssetUpdateInput;
  /** Unique document search */
  where: Graphcms_AssetWhereUniqueInput;
};

export type Graphcms_AssetUpsertInput = {
  /** Create document if it didn't exist */
  create: Graphcms_AssetCreateInput;
  /** Update document if it exists */
  update: Graphcms_AssetUpdateInput;
};

export type Graphcms_AssetUpsertLocalizationInput = {
  create: Graphcms_AssetCreateLocalizationDataInput;
  locale: Graphcms_Locale;
  update: Graphcms_AssetUpdateLocalizationDataInput;
};

export type Graphcms_AssetUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: Graphcms_AssetUpsertInput;
  /** Unique document search */
  where: Graphcms_AssetWhereUniqueInput;
};

/** Identifies documents */
export type Graphcms_AssetWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<Graphcms_AssetWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<Graphcms_AssetWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<Graphcms_AssetWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  authorAvatar_every?: InputMaybe<Graphcms_AuthorWhereInput>;
  authorAvatar_none?: InputMaybe<Graphcms_AuthorWhereInput>;
  authorAvatar_some?: InputMaybe<Graphcms_AuthorWhereInput>;
  caption?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  caption_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  caption_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  caption_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  caption_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  caption_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  caption_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  caption_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  caption_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  caption_starts_with?: InputMaybe<Scalars['String']>;
  coverImagePost_every?: InputMaybe<Graphcms_PostWhereInput>;
  coverImagePost_none?: InputMaybe<Graphcms_PostWhereInput>;
  coverImagePost_some?: InputMaybe<Graphcms_PostWhereInput>;
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  createdBy?: InputMaybe<Graphcms_UserWhereInput>;
  fileName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  fileName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  fileName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  fileName_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  fileName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  fileName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  fileName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  fileName_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  fileName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  fileName_starts_with?: InputMaybe<Scalars['String']>;
  handle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  handle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  handle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  handle_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  handle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  handle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  handle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  handle_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  handle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  handle_starts_with?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  height_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  height_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  height_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  height_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  height_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  height_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  height_not_in?: InputMaybe<Array<Scalars['Float']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  imageShowcaseCard_every?: InputMaybe<Graphcms_ShowcaseCardWhereInput>;
  imageShowcaseCard_none?: InputMaybe<Graphcms_ShowcaseCardWhereInput>;
  imageShowcaseCard_some?: InputMaybe<Graphcms_ShowcaseCardWhereInput>;
  mimeType?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  mimeType_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  mimeType_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  mimeType_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  mimeType_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  mimeType_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  mimeType_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  mimeType_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  mimeType_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  mimeType_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  publishedBy?: InputMaybe<Graphcms_UserWhereInput>;
  scheduledIn_every?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  seoImage_every?: InputMaybe<Graphcms_SeoWhereInput>;
  seoImage_none?: InputMaybe<Graphcms_SeoWhereInput>;
  seoImage_some?: InputMaybe<Graphcms_SeoWhereInput>;
  size?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  size_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  size_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  size_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  size_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  size_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  size_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  size_not_in?: InputMaybe<Array<Scalars['Float']>>;
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  updatedBy?: InputMaybe<Graphcms_UserWhereInput>;
  width?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  width_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  width_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  width_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  width_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  width_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  width_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  width_not_in?: InputMaybe<Array<Scalars['Float']>>;
};

/** References Asset record uniquely */
export type Graphcms_AssetWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Graphcms_Author = Graphcms_Node & {
  __typename?: 'graphcms_Author';
  /** Enter a short bio about yourself, or other authors. */
  biography?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['graphcms_DateTime'];
  /** User that created this document */
  createdBy?: Maybe<Graphcms_User>;
  /** Get the document in other stages */
  documentInStages: Array<Graphcms_Author>;
  /** List of Author versions */
  history: Array<Graphcms_Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** Enter the display name for authors */
  name: Scalars['String'];
  /** Add a profile picture for authors */
  picture?: Maybe<Graphcms_Asset>;
  /** Connect blog posts to this author */
  posts: Array<Graphcms_Post>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['graphcms_DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<Graphcms_User>;
  scheduledIn: Array<Graphcms_ScheduledOperation>;
  /** System stage field */
  stage: Graphcms_Stage;
  /** Enter the job title of the author */
  title?: Maybe<Scalars['String']>;
  twitterHandle?: Maybe<Scalars['String']>;
  /** The time the document was updated */
  updatedAt: Scalars['graphcms_DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<Graphcms_User>;
};


export type Graphcms_AuthorCreatedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


export type Graphcms_AuthorDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Graphcms_Stage>;
};


export type Graphcms_AuthorHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Graphcms_Stage>;
};


export type Graphcms_AuthorPictureArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


export type Graphcms_AuthorPostsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Graphcms_Locale>>;
  orderBy?: InputMaybe<Graphcms_PostOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_PostWhereInput>;
};


export type Graphcms_AuthorPublishedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


export type Graphcms_AuthorScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Graphcms_Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
};


export type Graphcms_AuthorUpdatedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};

export type Graphcms_AuthorConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<Graphcms_ConnectPositionInput>;
  /** Document to connect */
  where: Graphcms_AuthorWhereUniqueInput;
};

/** A connection to a list of items. */
export type Graphcms_AuthorConnection = {
  __typename?: 'graphcms_AuthorConnection';
  aggregate: Graphcms_Aggregate;
  /** A list of edges. */
  edges: Array<Graphcms_AuthorEdge>;
  /** Information to aid in pagination. */
  pageInfo: Graphcms_PageInfo;
};

export type Graphcms_AuthorCreateInput = {
  biography?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  name: Scalars['String'];
  picture?: InputMaybe<Graphcms_AssetCreateOneInlineInput>;
  posts?: InputMaybe<Graphcms_PostCreateManyInlineInput>;
  title?: InputMaybe<Scalars['String']>;
  twitterHandle?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
};

export type Graphcms_AuthorCreateManyInlineInput = {
  /** Connect multiple existing Author documents */
  connect?: InputMaybe<Array<Graphcms_AuthorWhereUniqueInput>>;
  /** Create and connect multiple existing Author documents */
  create?: InputMaybe<Array<Graphcms_AuthorCreateInput>>;
};

export type Graphcms_AuthorCreateOneInlineInput = {
  /** Connect one existing Author document */
  connect?: InputMaybe<Graphcms_AuthorWhereUniqueInput>;
  /** Create and connect one Author document */
  create?: InputMaybe<Graphcms_AuthorCreateInput>;
};

/** An edge in a connection. */
export type Graphcms_AuthorEdge = {
  __typename?: 'graphcms_AuthorEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Graphcms_Author;
};

/** Identifies documents */
export type Graphcms_AuthorManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<Graphcms_AuthorWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<Graphcms_AuthorWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<Graphcms_AuthorWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  biography?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  biography_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  biography_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  biography_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  biography_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  biography_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  biography_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  biography_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  biography_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  biography_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  createdBy?: InputMaybe<Graphcms_UserWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<Graphcms_AssetWhereInput>;
  posts_every?: InputMaybe<Graphcms_PostWhereInput>;
  posts_none?: InputMaybe<Graphcms_PostWhereInput>;
  posts_some?: InputMaybe<Graphcms_PostWhereInput>;
  publishedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  publishedBy?: InputMaybe<Graphcms_UserWhereInput>;
  scheduledIn_every?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  twitterHandle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  twitterHandle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  twitterHandle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  twitterHandle_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  twitterHandle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  twitterHandle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  twitterHandle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  twitterHandle_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  twitterHandle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  twitterHandle_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  updatedBy?: InputMaybe<Graphcms_UserWhereInput>;
};

export enum Graphcms_AuthorOrderByInput {
  BiographyAsc = 'biography_ASC',
  BiographyDesc = 'biography_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  TwitterHandleAsc = 'twitterHandle_ASC',
  TwitterHandleDesc = 'twitterHandle_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type Graphcms_AuthorUpdateInput = {
  biography?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<Graphcms_AssetUpdateOneInlineInput>;
  posts?: InputMaybe<Graphcms_PostUpdateManyInlineInput>;
  title?: InputMaybe<Scalars['String']>;
  twitterHandle?: InputMaybe<Scalars['String']>;
};

export type Graphcms_AuthorUpdateManyInlineInput = {
  /** Connect multiple existing Author documents */
  connect?: InputMaybe<Array<Graphcms_AuthorConnectInput>>;
  /** Create and connect multiple Author documents */
  create?: InputMaybe<Array<Graphcms_AuthorCreateInput>>;
  /** Delete multiple Author documents */
  delete?: InputMaybe<Array<Graphcms_AuthorWhereUniqueInput>>;
  /** Disconnect multiple Author documents */
  disconnect?: InputMaybe<Array<Graphcms_AuthorWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Author documents */
  set?: InputMaybe<Array<Graphcms_AuthorWhereUniqueInput>>;
  /** Update multiple Author documents */
  update?: InputMaybe<Array<Graphcms_AuthorUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Author documents */
  upsert?: InputMaybe<Array<Graphcms_AuthorUpsertWithNestedWhereUniqueInput>>;
};

export type Graphcms_AuthorUpdateManyInput = {
  biography?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  twitterHandle?: InputMaybe<Scalars['String']>;
};

export type Graphcms_AuthorUpdateOneInlineInput = {
  /** Connect existing Author document */
  connect?: InputMaybe<Graphcms_AuthorWhereUniqueInput>;
  /** Create and connect one Author document */
  create?: InputMaybe<Graphcms_AuthorCreateInput>;
  /** Delete currently connected Author document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Author document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Author document */
  update?: InputMaybe<Graphcms_AuthorUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Author document */
  upsert?: InputMaybe<Graphcms_AuthorUpsertWithNestedWhereUniqueInput>;
};

export type Graphcms_AuthorUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: Graphcms_AuthorUpdateInput;
  /** Unique document search */
  where: Graphcms_AuthorWhereUniqueInput;
};

export type Graphcms_AuthorUpsertInput = {
  /** Create document if it didn't exist */
  create: Graphcms_AuthorCreateInput;
  /** Update document if it exists */
  update: Graphcms_AuthorUpdateInput;
};

export type Graphcms_AuthorUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: Graphcms_AuthorUpsertInput;
  /** Unique document search */
  where: Graphcms_AuthorWhereUniqueInput;
};

/** Identifies documents */
export type Graphcms_AuthorWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<Graphcms_AuthorWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<Graphcms_AuthorWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<Graphcms_AuthorWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  biography?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  biography_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  biography_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  biography_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  biography_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  biography_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  biography_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  biography_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  biography_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  biography_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  createdBy?: InputMaybe<Graphcms_UserWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<Graphcms_AssetWhereInput>;
  posts_every?: InputMaybe<Graphcms_PostWhereInput>;
  posts_none?: InputMaybe<Graphcms_PostWhereInput>;
  posts_some?: InputMaybe<Graphcms_PostWhereInput>;
  publishedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  publishedBy?: InputMaybe<Graphcms_UserWhereInput>;
  scheduledIn_every?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  twitterHandle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  twitterHandle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  twitterHandle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  twitterHandle_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  twitterHandle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  twitterHandle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  twitterHandle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  twitterHandle_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  twitterHandle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  twitterHandle_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  updatedBy?: InputMaybe<Graphcms_UserWhereInput>;
};

/** References Author record uniquely */
export type Graphcms_AuthorWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Graphcms_BatchPayload = {
  __typename?: 'graphcms_BatchPayload';
  /** The number of nodes that have been affected by the Batch operation. */
  count: Scalars['graphcms_Long'];
};

export type Graphcms_BlogCategory = Graphcms_Node & {
  __typename?: 'graphcms_BlogCategory';
  /** The time the document was created */
  createdAt: Scalars['graphcms_DateTime'];
  /** User that created this document */
  createdBy?: Maybe<Graphcms_User>;
  description?: Maybe<Graphcms_RichText>;
  /** Get the document in other stages */
  documentInStages: Array<Graphcms_BlogCategory>;
  /** List of BlogCategory versions */
  history: Array<Graphcms_Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  name: Scalars['String'];
  posts: Array<Graphcms_Post>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['graphcms_DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<Graphcms_User>;
  scheduledIn: Array<Graphcms_ScheduledOperation>;
  slug: Scalars['String'];
  /** System stage field */
  stage: Graphcms_Stage;
  /** The time the document was updated */
  updatedAt: Scalars['graphcms_DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<Graphcms_User>;
};


export type Graphcms_BlogCategoryCreatedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


export type Graphcms_BlogCategoryDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Graphcms_Stage>;
};


export type Graphcms_BlogCategoryHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Graphcms_Stage>;
};


export type Graphcms_BlogCategoryPostsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Graphcms_Locale>>;
  orderBy?: InputMaybe<Graphcms_PostOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_PostWhereInput>;
};


export type Graphcms_BlogCategoryPublishedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


export type Graphcms_BlogCategoryScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Graphcms_Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
};


export type Graphcms_BlogCategoryUpdatedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};

export type Graphcms_BlogCategoryConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<Graphcms_ConnectPositionInput>;
  /** Document to connect */
  where: Graphcms_BlogCategoryWhereUniqueInput;
};

/** A connection to a list of items. */
export type Graphcms_BlogCategoryConnection = {
  __typename?: 'graphcms_BlogCategoryConnection';
  aggregate: Graphcms_Aggregate;
  /** A list of edges. */
  edges: Array<Graphcms_BlogCategoryEdge>;
  /** Information to aid in pagination. */
  pageInfo: Graphcms_PageInfo;
};

export type Graphcms_BlogCategoryCreateInput = {
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  description?: InputMaybe<Scalars['graphcms_RichTextAST']>;
  name: Scalars['String'];
  posts?: InputMaybe<Graphcms_PostCreateManyInlineInput>;
  slug: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
};

export type Graphcms_BlogCategoryCreateManyInlineInput = {
  /** Connect multiple existing BlogCategory documents */
  connect?: InputMaybe<Array<Graphcms_BlogCategoryWhereUniqueInput>>;
  /** Create and connect multiple existing BlogCategory documents */
  create?: InputMaybe<Array<Graphcms_BlogCategoryCreateInput>>;
};

/** An edge in a connection. */
export type Graphcms_BlogCategoryEdge = {
  __typename?: 'graphcms_BlogCategoryEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Graphcms_BlogCategory;
};

/** Identifies documents */
export type Graphcms_BlogCategoryManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<Graphcms_BlogCategoryWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<Graphcms_BlogCategoryWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<Graphcms_BlogCategoryWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  createdBy?: InputMaybe<Graphcms_UserWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  posts_every?: InputMaybe<Graphcms_PostWhereInput>;
  posts_none?: InputMaybe<Graphcms_PostWhereInput>;
  posts_some?: InputMaybe<Graphcms_PostWhereInput>;
  publishedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  publishedBy?: InputMaybe<Graphcms_UserWhereInput>;
  scheduledIn_every?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  slug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  updatedBy?: InputMaybe<Graphcms_UserWhereInput>;
};

export enum Graphcms_BlogCategoryOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type Graphcms_BlogCategoryUpdateInput = {
  description?: InputMaybe<Scalars['graphcms_RichTextAST']>;
  name?: InputMaybe<Scalars['String']>;
  posts?: InputMaybe<Graphcms_PostUpdateManyInlineInput>;
  slug?: InputMaybe<Scalars['String']>;
};

export type Graphcms_BlogCategoryUpdateManyInlineInput = {
  /** Connect multiple existing BlogCategory documents */
  connect?: InputMaybe<Array<Graphcms_BlogCategoryConnectInput>>;
  /** Create and connect multiple BlogCategory documents */
  create?: InputMaybe<Array<Graphcms_BlogCategoryCreateInput>>;
  /** Delete multiple BlogCategory documents */
  delete?: InputMaybe<Array<Graphcms_BlogCategoryWhereUniqueInput>>;
  /** Disconnect multiple BlogCategory documents */
  disconnect?: InputMaybe<Array<Graphcms_BlogCategoryWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing BlogCategory documents */
  set?: InputMaybe<Array<Graphcms_BlogCategoryWhereUniqueInput>>;
  /** Update multiple BlogCategory documents */
  update?: InputMaybe<Array<Graphcms_BlogCategoryUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple BlogCategory documents */
  upsert?: InputMaybe<Array<Graphcms_BlogCategoryUpsertWithNestedWhereUniqueInput>>;
};

export type Graphcms_BlogCategoryUpdateManyInput = {
  description?: InputMaybe<Scalars['graphcms_RichTextAST']>;
};

export type Graphcms_BlogCategoryUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: Graphcms_BlogCategoryUpdateInput;
  /** Unique document search */
  where: Graphcms_BlogCategoryWhereUniqueInput;
};

export type Graphcms_BlogCategoryUpsertInput = {
  /** Create document if it didn't exist */
  create: Graphcms_BlogCategoryCreateInput;
  /** Update document if it exists */
  update: Graphcms_BlogCategoryUpdateInput;
};

export type Graphcms_BlogCategoryUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: Graphcms_BlogCategoryUpsertInput;
  /** Unique document search */
  where: Graphcms_BlogCategoryWhereUniqueInput;
};

/** Identifies documents */
export type Graphcms_BlogCategoryWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<Graphcms_BlogCategoryWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<Graphcms_BlogCategoryWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<Graphcms_BlogCategoryWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  createdBy?: InputMaybe<Graphcms_UserWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  posts_every?: InputMaybe<Graphcms_PostWhereInput>;
  posts_none?: InputMaybe<Graphcms_PostWhereInput>;
  posts_some?: InputMaybe<Graphcms_PostWhereInput>;
  publishedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  publishedBy?: InputMaybe<Graphcms_UserWhereInput>;
  scheduledIn_every?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  slug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  updatedBy?: InputMaybe<Graphcms_UserWhereInput>;
};

/** References BlogCategory record uniquely */
export type Graphcms_BlogCategoryWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
};

export type Graphcms_ConnectPositionInput = {
  /** Connect document after specified document */
  after?: InputMaybe<Scalars['ID']>;
  /** Connect document before specified document */
  before?: InputMaybe<Scalars['ID']>;
  /** Connect document at last position */
  end?: InputMaybe<Scalars['Boolean']>;
  /** Connect document at first position */
  start?: InputMaybe<Scalars['Boolean']>;
};

export enum Graphcms_DocumentFileTypes {
  Doc = 'doc',
  Docx = 'docx',
  Html = 'html',
  Jpg = 'jpg',
  Odp = 'odp',
  Ods = 'ods',
  Odt = 'odt',
  Pdf = 'pdf',
  Png = 'png',
  Ppt = 'ppt',
  Pptx = 'pptx',
  Svg = 'svg',
  Txt = 'txt',
  Webp = 'webp',
  Xls = 'xls',
  Xlsx = 'xlsx'
}

export type Graphcms_DocumentOutputInput = {
  /**
   * Transforms a document into a desired file type.
   * See this matrix for format support:
   *
   * PDF:	jpg, odp, ods, odt, png, svg, txt, and webp
   * DOC:	docx, html, jpg, odt, pdf, png, svg, txt, and webp
   * DOCX:	doc, html, jpg, odt, pdf, png, svg, txt, and webp
   * ODT:	doc, docx, html, jpg, pdf, png, svg, txt, and webp
   * XLS:	jpg, pdf, ods, png, svg, xlsx, and webp
   * XLSX:	jpg, pdf, ods, png, svg, xls, and webp
   * ODS:	jpg, pdf, png, xls, svg, xlsx, and webp
   * PPT:	jpg, odp, pdf, png, svg, pptx, and webp
   * PPTX:	jpg, odp, pdf, png, svg, ppt, and webp
   * ODP:	jpg, pdf, png, ppt, svg, pptx, and webp
   * BMP:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * GIF:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * JPG:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * PNG:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * WEBP:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * TIFF:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * AI:	    jpg, odp, ods, odt, pdf, png, svg, and webp
   * PSD:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * SVG:	jpg, odp, ods, odt, pdf, png, and webp
   * HTML:	jpg, odt, pdf, svg, txt, and webp
   * TXT:	jpg, html, odt, pdf, svg, and webp
   */
  format?: InputMaybe<Graphcms_DocumentFileTypes>;
};

/** Transformations for Documents */
export type Graphcms_DocumentTransformationInput = {
  /** Changes the output for the file. */
  output?: InputMaybe<Graphcms_DocumentOutputInput>;
};

export type Graphcms_DocumentVersion = {
  __typename?: 'graphcms_DocumentVersion';
  createdAt: Scalars['graphcms_DateTime'];
  data?: Maybe<Scalars['graphcms_Json']>;
  id: Scalars['ID'];
  revision: Scalars['Int'];
  stage: Graphcms_Stage;
};

export enum Graphcms_ImageFit {
  /** Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio. */
  Clip = 'clip',
  /** Resizes the image to fit the specified parameters exactly by removing any parts of the image that don't fit within the boundaries. */
  Crop = 'crop',
  /** Resizes the image to fit within the parameters, but as opposed to 'fit:clip' will not scale the image if the image is smaller than the output size. */
  Max = 'max',
  /** Resizes the image to fit the specified parameters exactly by scaling the image to the desired size. The aspect ratio of the image is not respected and the image can be distorted using this method. */
  Scale = 'scale'
}

export type Graphcms_ImageResizeInput = {
  /** The default value for the fit parameter is fit:clip. */
  fit?: InputMaybe<Graphcms_ImageFit>;
  /** The height in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  height?: InputMaybe<Scalars['Int']>;
  /** The width in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  width?: InputMaybe<Scalars['Int']>;
};

/** Transformations for Images */
export type Graphcms_ImageTransformationInput = {
  /** Resizes the image */
  resize?: InputMaybe<Graphcms_ImageResizeInput>;
};

/** Locale system enumeration */
export enum Graphcms_Locale {
  /** System locale */
  En = 'en'
}

export type Graphcms_Mutation = {
  __typename?: 'graphcms_Mutation';
  /** Create one asset */
  createAsset?: Maybe<Graphcms_Asset>;
  /** Create one author */
  createAuthor?: Maybe<Graphcms_Author>;
  /** Create one blogCategory */
  createBlogCategory?: Maybe<Graphcms_BlogCategory>;
  /** Create one navigationLink */
  createNavigationLink?: Maybe<Graphcms_NavigationLink>;
  /** Create one page */
  createPage?: Maybe<Graphcms_Page>;
  /** Create one post */
  createPost?: Maybe<Graphcms_Post>;
  /** Create one scheduledRelease */
  createScheduledRelease?: Maybe<Graphcms_ScheduledRelease>;
  /** Create one seo */
  createSeo?: Maybe<Graphcms_Seo>;
  /** Create one showcaseCard */
  createShowcaseCard?: Maybe<Graphcms_ShowcaseCard>;
  /** Delete one asset from _all_ existing stages. Returns deleted document. */
  deleteAsset?: Maybe<Graphcms_Asset>;
  /** Delete one author from _all_ existing stages. Returns deleted document. */
  deleteAuthor?: Maybe<Graphcms_Author>;
  /** Delete one blogCategory from _all_ existing stages. Returns deleted document. */
  deleteBlogCategory?: Maybe<Graphcms_BlogCategory>;
  /** Delete many Asset documents */
  deleteManyAssets: Graphcms_BatchPayload;
  /** Delete many Asset documents, return deleted documents */
  deleteManyAssetsConnection: Graphcms_AssetConnection;
  /** Delete many Author documents */
  deleteManyAuthors: Graphcms_BatchPayload;
  /** Delete many Author documents, return deleted documents */
  deleteManyAuthorsConnection: Graphcms_AuthorConnection;
  /** Delete many BlogCategory documents */
  deleteManyBlogCategories: Graphcms_BatchPayload;
  /** Delete many BlogCategory documents, return deleted documents */
  deleteManyBlogCategoriesConnection: Graphcms_BlogCategoryConnection;
  /** Delete many NavigationLink documents */
  deleteManyNavigationLinks: Graphcms_BatchPayload;
  /** Delete many NavigationLink documents, return deleted documents */
  deleteManyNavigationLinksConnection: Graphcms_NavigationLinkConnection;
  /** Delete many Page documents */
  deleteManyPages: Graphcms_BatchPayload;
  /** Delete many Page documents, return deleted documents */
  deleteManyPagesConnection: Graphcms_PageConnection;
  /** Delete many Post documents */
  deleteManyPosts: Graphcms_BatchPayload;
  /** Delete many Post documents, return deleted documents */
  deleteManyPostsConnection: Graphcms_PostConnection;
  /** Delete many Seo documents */
  deleteManySeos: Graphcms_BatchPayload;
  /** Delete many Seo documents, return deleted documents */
  deleteManySeosConnection: Graphcms_SeoConnection;
  /** Delete many ShowcaseCard documents */
  deleteManyShowcaseCards: Graphcms_BatchPayload;
  /** Delete many ShowcaseCard documents, return deleted documents */
  deleteManyShowcaseCardsConnection: Graphcms_ShowcaseCardConnection;
  /** Delete one navigationLink from _all_ existing stages. Returns deleted document. */
  deleteNavigationLink?: Maybe<Graphcms_NavigationLink>;
  /** Delete one page from _all_ existing stages. Returns deleted document. */
  deletePage?: Maybe<Graphcms_Page>;
  /** Delete one post from _all_ existing stages. Returns deleted document. */
  deletePost?: Maybe<Graphcms_Post>;
  /** Delete and return scheduled operation */
  deleteScheduledOperation?: Maybe<Graphcms_ScheduledOperation>;
  /** Delete one scheduledRelease from _all_ existing stages. Returns deleted document. */
  deleteScheduledRelease?: Maybe<Graphcms_ScheduledRelease>;
  /** Delete one seo from _all_ existing stages. Returns deleted document. */
  deleteSeo?: Maybe<Graphcms_Seo>;
  /** Delete one showcaseCard from _all_ existing stages. Returns deleted document. */
  deleteShowcaseCard?: Maybe<Graphcms_ShowcaseCard>;
  /** Publish one asset */
  publishAsset?: Maybe<Graphcms_Asset>;
  /** Publish one author */
  publishAuthor?: Maybe<Graphcms_Author>;
  /** Publish one blogCategory */
  publishBlogCategory?: Maybe<Graphcms_BlogCategory>;
  /** Publish many Asset documents */
  publishManyAssets: Graphcms_BatchPayload;
  /** Publish many Asset documents */
  publishManyAssetsConnection: Graphcms_AssetConnection;
  /** Publish many Author documents */
  publishManyAuthors: Graphcms_BatchPayload;
  /** Publish many Author documents */
  publishManyAuthorsConnection: Graphcms_AuthorConnection;
  /** Publish many BlogCategory documents */
  publishManyBlogCategories: Graphcms_BatchPayload;
  /** Publish many BlogCategory documents */
  publishManyBlogCategoriesConnection: Graphcms_BlogCategoryConnection;
  /** Publish many NavigationLink documents */
  publishManyNavigationLinks: Graphcms_BatchPayload;
  /** Publish many NavigationLink documents */
  publishManyNavigationLinksConnection: Graphcms_NavigationLinkConnection;
  /** Publish many Page documents */
  publishManyPages: Graphcms_BatchPayload;
  /** Publish many Page documents */
  publishManyPagesConnection: Graphcms_PageConnection;
  /** Publish many Post documents */
  publishManyPosts: Graphcms_BatchPayload;
  /** Publish many Post documents */
  publishManyPostsConnection: Graphcms_PostConnection;
  /** Publish many Seo documents */
  publishManySeos: Graphcms_BatchPayload;
  /** Publish many Seo documents */
  publishManySeosConnection: Graphcms_SeoConnection;
  /** Publish many ShowcaseCard documents */
  publishManyShowcaseCards: Graphcms_BatchPayload;
  /** Publish many ShowcaseCard documents */
  publishManyShowcaseCardsConnection: Graphcms_ShowcaseCardConnection;
  /** Publish one navigationLink */
  publishNavigationLink?: Maybe<Graphcms_NavigationLink>;
  /** Publish one page */
  publishPage?: Maybe<Graphcms_Page>;
  /** Publish one post */
  publishPost?: Maybe<Graphcms_Post>;
  /** Publish one seo */
  publishSeo?: Maybe<Graphcms_Seo>;
  /** Publish one showcaseCard */
  publishShowcaseCard?: Maybe<Graphcms_ShowcaseCard>;
  /** Schedule to publish one asset */
  schedulePublishAsset?: Maybe<Graphcms_Asset>;
  /** Schedule to publish one author */
  schedulePublishAuthor?: Maybe<Graphcms_Author>;
  /** Schedule to publish one blogCategory */
  schedulePublishBlogCategory?: Maybe<Graphcms_BlogCategory>;
  /** Schedule to publish one navigationLink */
  schedulePublishNavigationLink?: Maybe<Graphcms_NavigationLink>;
  /** Schedule to publish one page */
  schedulePublishPage?: Maybe<Graphcms_Page>;
  /** Schedule to publish one post */
  schedulePublishPost?: Maybe<Graphcms_Post>;
  /** Schedule to publish one seo */
  schedulePublishSeo?: Maybe<Graphcms_Seo>;
  /** Schedule to publish one showcaseCard */
  schedulePublishShowcaseCard?: Maybe<Graphcms_ShowcaseCard>;
  /** Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishAsset?: Maybe<Graphcms_Asset>;
  /** Unpublish one author from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishAuthor?: Maybe<Graphcms_Author>;
  /** Unpublish one blogCategory from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishBlogCategory?: Maybe<Graphcms_BlogCategory>;
  /** Unpublish one navigationLink from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishNavigationLink?: Maybe<Graphcms_NavigationLink>;
  /** Unpublish one page from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishPage?: Maybe<Graphcms_Page>;
  /** Unpublish one post from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishPost?: Maybe<Graphcms_Post>;
  /** Unpublish one seo from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSeo?: Maybe<Graphcms_Seo>;
  /** Unpublish one showcaseCard from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishShowcaseCard?: Maybe<Graphcms_ShowcaseCard>;
  /** Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishAsset?: Maybe<Graphcms_Asset>;
  /** Unpublish one author from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishAuthor?: Maybe<Graphcms_Author>;
  /** Unpublish one blogCategory from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishBlogCategory?: Maybe<Graphcms_BlogCategory>;
  /** Unpublish many Asset documents */
  unpublishManyAssets: Graphcms_BatchPayload;
  /** Find many Asset documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyAssetsConnection: Graphcms_AssetConnection;
  /** Unpublish many Author documents */
  unpublishManyAuthors: Graphcms_BatchPayload;
  /** Find many Author documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyAuthorsConnection: Graphcms_AuthorConnection;
  /** Unpublish many BlogCategory documents */
  unpublishManyBlogCategories: Graphcms_BatchPayload;
  /** Find many BlogCategory documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyBlogCategoriesConnection: Graphcms_BlogCategoryConnection;
  /** Unpublish many NavigationLink documents */
  unpublishManyNavigationLinks: Graphcms_BatchPayload;
  /** Find many NavigationLink documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyNavigationLinksConnection: Graphcms_NavigationLinkConnection;
  /** Unpublish many Page documents */
  unpublishManyPages: Graphcms_BatchPayload;
  /** Find many Page documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyPagesConnection: Graphcms_PageConnection;
  /** Unpublish many Post documents */
  unpublishManyPosts: Graphcms_BatchPayload;
  /** Find many Post documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyPostsConnection: Graphcms_PostConnection;
  /** Unpublish many Seo documents */
  unpublishManySeos: Graphcms_BatchPayload;
  /** Find many Seo documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySeosConnection: Graphcms_SeoConnection;
  /** Unpublish many ShowcaseCard documents */
  unpublishManyShowcaseCards: Graphcms_BatchPayload;
  /** Find many ShowcaseCard documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyShowcaseCardsConnection: Graphcms_ShowcaseCardConnection;
  /** Unpublish one navigationLink from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishNavigationLink?: Maybe<Graphcms_NavigationLink>;
  /** Unpublish one page from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishPage?: Maybe<Graphcms_Page>;
  /** Unpublish one post from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishPost?: Maybe<Graphcms_Post>;
  /** Unpublish one seo from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSeo?: Maybe<Graphcms_Seo>;
  /** Unpublish one showcaseCard from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishShowcaseCard?: Maybe<Graphcms_ShowcaseCard>;
  /** Update one asset */
  updateAsset?: Maybe<Graphcms_Asset>;
  /** Update one author */
  updateAuthor?: Maybe<Graphcms_Author>;
  /** Update one blogCategory */
  updateBlogCategory?: Maybe<Graphcms_BlogCategory>;
  /** Update many assets */
  updateManyAssets: Graphcms_BatchPayload;
  /** Update many Asset documents */
  updateManyAssetsConnection: Graphcms_AssetConnection;
  /** Update many authors */
  updateManyAuthors: Graphcms_BatchPayload;
  /** Update many Author documents */
  updateManyAuthorsConnection: Graphcms_AuthorConnection;
  /** Update many blogCategories */
  updateManyBlogCategories: Graphcms_BatchPayload;
  /** Update many BlogCategory documents */
  updateManyBlogCategoriesConnection: Graphcms_BlogCategoryConnection;
  /** Update many navigationLinks */
  updateManyNavigationLinks: Graphcms_BatchPayload;
  /** Update many NavigationLink documents */
  updateManyNavigationLinksConnection: Graphcms_NavigationLinkConnection;
  /** Update many pages */
  updateManyPages: Graphcms_BatchPayload;
  /** Update many Page documents */
  updateManyPagesConnection: Graphcms_PageConnection;
  /** Update many posts */
  updateManyPosts: Graphcms_BatchPayload;
  /** Update many Post documents */
  updateManyPostsConnection: Graphcms_PostConnection;
  /** Update many seos */
  updateManySeos: Graphcms_BatchPayload;
  /** Update many Seo documents */
  updateManySeosConnection: Graphcms_SeoConnection;
  /** Update many showcaseCards */
  updateManyShowcaseCards: Graphcms_BatchPayload;
  /** Update many ShowcaseCard documents */
  updateManyShowcaseCardsConnection: Graphcms_ShowcaseCardConnection;
  /** Update one navigationLink */
  updateNavigationLink?: Maybe<Graphcms_NavigationLink>;
  /** Update one page */
  updatePage?: Maybe<Graphcms_Page>;
  /** Update one post */
  updatePost?: Maybe<Graphcms_Post>;
  /** Update one scheduledRelease */
  updateScheduledRelease?: Maybe<Graphcms_ScheduledRelease>;
  /** Update one seo */
  updateSeo?: Maybe<Graphcms_Seo>;
  /** Update one showcaseCard */
  updateShowcaseCard?: Maybe<Graphcms_ShowcaseCard>;
  /** Upsert one asset */
  upsertAsset?: Maybe<Graphcms_Asset>;
  /** Upsert one author */
  upsertAuthor?: Maybe<Graphcms_Author>;
  /** Upsert one blogCategory */
  upsertBlogCategory?: Maybe<Graphcms_BlogCategory>;
  /** Upsert one navigationLink */
  upsertNavigationLink?: Maybe<Graphcms_NavigationLink>;
  /** Upsert one page */
  upsertPage?: Maybe<Graphcms_Page>;
  /** Upsert one post */
  upsertPost?: Maybe<Graphcms_Post>;
  /** Upsert one seo */
  upsertSeo?: Maybe<Graphcms_Seo>;
  /** Upsert one showcaseCard */
  upsertShowcaseCard?: Maybe<Graphcms_ShowcaseCard>;
};


export type Graphcms_MutationCreateAssetArgs = {
  data: Graphcms_AssetCreateInput;
};


export type Graphcms_MutationCreateAuthorArgs = {
  data: Graphcms_AuthorCreateInput;
};


export type Graphcms_MutationCreateBlogCategoryArgs = {
  data: Graphcms_BlogCategoryCreateInput;
};


export type Graphcms_MutationCreateNavigationLinkArgs = {
  data: Graphcms_NavigationLinkCreateInput;
};


export type Graphcms_MutationCreatePageArgs = {
  data: Graphcms_PageCreateInput;
};


export type Graphcms_MutationCreatePostArgs = {
  data: Graphcms_PostCreateInput;
};


export type Graphcms_MutationCreateScheduledReleaseArgs = {
  data: Graphcms_ScheduledReleaseCreateInput;
};


export type Graphcms_MutationCreateSeoArgs = {
  data: Graphcms_SeoCreateInput;
};


export type Graphcms_MutationCreateShowcaseCardArgs = {
  data: Graphcms_ShowcaseCardCreateInput;
};


export type Graphcms_MutationDeleteAssetArgs = {
  where: Graphcms_AssetWhereUniqueInput;
};


export type Graphcms_MutationDeleteAuthorArgs = {
  where: Graphcms_AuthorWhereUniqueInput;
};


export type Graphcms_MutationDeleteBlogCategoryArgs = {
  where: Graphcms_BlogCategoryWhereUniqueInput;
};


export type Graphcms_MutationDeleteManyAssetsArgs = {
  where?: InputMaybe<Graphcms_AssetManyWhereInput>;
};


export type Graphcms_MutationDeleteManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_AssetManyWhereInput>;
};


export type Graphcms_MutationDeleteManyAuthorsArgs = {
  where?: InputMaybe<Graphcms_AuthorManyWhereInput>;
};


export type Graphcms_MutationDeleteManyAuthorsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_AuthorManyWhereInput>;
};


export type Graphcms_MutationDeleteManyBlogCategoriesArgs = {
  where?: InputMaybe<Graphcms_BlogCategoryManyWhereInput>;
};


export type Graphcms_MutationDeleteManyBlogCategoriesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_BlogCategoryManyWhereInput>;
};


export type Graphcms_MutationDeleteManyNavigationLinksArgs = {
  where?: InputMaybe<Graphcms_NavigationLinkManyWhereInput>;
};


export type Graphcms_MutationDeleteManyNavigationLinksConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_NavigationLinkManyWhereInput>;
};


export type Graphcms_MutationDeleteManyPagesArgs = {
  where?: InputMaybe<Graphcms_PageManyWhereInput>;
};


export type Graphcms_MutationDeleteManyPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_PageManyWhereInput>;
};


export type Graphcms_MutationDeleteManyPostsArgs = {
  where?: InputMaybe<Graphcms_PostManyWhereInput>;
};


export type Graphcms_MutationDeleteManyPostsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_PostManyWhereInput>;
};


export type Graphcms_MutationDeleteManySeosArgs = {
  where?: InputMaybe<Graphcms_SeoManyWhereInput>;
};


export type Graphcms_MutationDeleteManySeosConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_SeoManyWhereInput>;
};


export type Graphcms_MutationDeleteManyShowcaseCardsArgs = {
  where?: InputMaybe<Graphcms_ShowcaseCardManyWhereInput>;
};


export type Graphcms_MutationDeleteManyShowcaseCardsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_ShowcaseCardManyWhereInput>;
};


export type Graphcms_MutationDeleteNavigationLinkArgs = {
  where: Graphcms_NavigationLinkWhereUniqueInput;
};


export type Graphcms_MutationDeletePageArgs = {
  where: Graphcms_PageWhereUniqueInput;
};


export type Graphcms_MutationDeletePostArgs = {
  where: Graphcms_PostWhereUniqueInput;
};


export type Graphcms_MutationDeleteScheduledOperationArgs = {
  where: Graphcms_ScheduledOperationWhereUniqueInput;
};


export type Graphcms_MutationDeleteScheduledReleaseArgs = {
  where: Graphcms_ScheduledReleaseWhereUniqueInput;
};


export type Graphcms_MutationDeleteSeoArgs = {
  where: Graphcms_SeoWhereUniqueInput;
};


export type Graphcms_MutationDeleteShowcaseCardArgs = {
  where: Graphcms_ShowcaseCardWhereUniqueInput;
};


export type Graphcms_MutationPublishAssetArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Graphcms_Stage>;
  where: Graphcms_AssetWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type Graphcms_MutationPublishAuthorArgs = {
  to?: Array<Graphcms_Stage>;
  where: Graphcms_AuthorWhereUniqueInput;
};


export type Graphcms_MutationPublishBlogCategoryArgs = {
  to?: Array<Graphcms_Stage>;
  where: Graphcms_BlogCategoryWhereUniqueInput;
};


export type Graphcms_MutationPublishManyAssetsArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_AssetManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type Graphcms_MutationPublishManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Graphcms_Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Graphcms_Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_AssetManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type Graphcms_MutationPublishManyAuthorsArgs = {
  to?: Array<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_AuthorManyWhereInput>;
};


export type Graphcms_MutationPublishManyAuthorsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Graphcms_Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_AuthorManyWhereInput>;
};


export type Graphcms_MutationPublishManyBlogCategoriesArgs = {
  to?: Array<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_BlogCategoryManyWhereInput>;
};


export type Graphcms_MutationPublishManyBlogCategoriesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Graphcms_Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_BlogCategoryManyWhereInput>;
};


export type Graphcms_MutationPublishManyNavigationLinksArgs = {
  to?: Array<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_NavigationLinkManyWhereInput>;
};


export type Graphcms_MutationPublishManyNavigationLinksConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Graphcms_Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_NavigationLinkManyWhereInput>;
};


export type Graphcms_MutationPublishManyPagesArgs = {
  to?: Array<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_PageManyWhereInput>;
};


export type Graphcms_MutationPublishManyPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Graphcms_Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_PageManyWhereInput>;
};


export type Graphcms_MutationPublishManyPostsArgs = {
  to?: Array<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_PostManyWhereInput>;
};


export type Graphcms_MutationPublishManyPostsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Graphcms_Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_PostManyWhereInput>;
};


export type Graphcms_MutationPublishManySeosArgs = {
  to?: Array<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_SeoManyWhereInput>;
};


export type Graphcms_MutationPublishManySeosConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Graphcms_Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_SeoManyWhereInput>;
};


export type Graphcms_MutationPublishManyShowcaseCardsArgs = {
  to?: Array<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_ShowcaseCardManyWhereInput>;
};


export type Graphcms_MutationPublishManyShowcaseCardsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Graphcms_Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_ShowcaseCardManyWhereInput>;
};


export type Graphcms_MutationPublishNavigationLinkArgs = {
  to?: Array<Graphcms_Stage>;
  where: Graphcms_NavigationLinkWhereUniqueInput;
};


export type Graphcms_MutationPublishPageArgs = {
  to?: Array<Graphcms_Stage>;
  where: Graphcms_PageWhereUniqueInput;
};


export type Graphcms_MutationPublishPostArgs = {
  to?: Array<Graphcms_Stage>;
  where: Graphcms_PostWhereUniqueInput;
};


export type Graphcms_MutationPublishSeoArgs = {
  to?: Array<Graphcms_Stage>;
  where: Graphcms_SeoWhereUniqueInput;
};


export type Graphcms_MutationPublishShowcaseCardArgs = {
  to?: Array<Graphcms_Stage>;
  where: Graphcms_ShowcaseCardWhereUniqueInput;
};


export type Graphcms_MutationSchedulePublishAssetArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Graphcms_Stage>;
  where: Graphcms_AssetWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type Graphcms_MutationSchedulePublishAuthorArgs = {
  releaseAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Graphcms_Stage>;
  where: Graphcms_AuthorWhereUniqueInput;
};


export type Graphcms_MutationSchedulePublishBlogCategoryArgs = {
  releaseAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Graphcms_Stage>;
  where: Graphcms_BlogCategoryWhereUniqueInput;
};


export type Graphcms_MutationSchedulePublishNavigationLinkArgs = {
  releaseAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Graphcms_Stage>;
  where: Graphcms_NavigationLinkWhereUniqueInput;
};


export type Graphcms_MutationSchedulePublishPageArgs = {
  releaseAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Graphcms_Stage>;
  where: Graphcms_PageWhereUniqueInput;
};


export type Graphcms_MutationSchedulePublishPostArgs = {
  releaseAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Graphcms_Stage>;
  where: Graphcms_PostWhereUniqueInput;
};


export type Graphcms_MutationSchedulePublishSeoArgs = {
  releaseAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Graphcms_Stage>;
  where: Graphcms_SeoWhereUniqueInput;
};


export type Graphcms_MutationSchedulePublishShowcaseCardArgs = {
  releaseAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Graphcms_Stage>;
  where: Graphcms_ShowcaseCardWhereUniqueInput;
};


export type Graphcms_MutationScheduleUnpublishAssetArgs = {
  from?: Array<Graphcms_Stage>;
  locales?: InputMaybe<Array<Graphcms_Locale>>;
  releaseAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: Graphcms_AssetWhereUniqueInput;
};


export type Graphcms_MutationScheduleUnpublishAuthorArgs = {
  from?: Array<Graphcms_Stage>;
  releaseAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: Graphcms_AuthorWhereUniqueInput;
};


export type Graphcms_MutationScheduleUnpublishBlogCategoryArgs = {
  from?: Array<Graphcms_Stage>;
  releaseAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: Graphcms_BlogCategoryWhereUniqueInput;
};


export type Graphcms_MutationScheduleUnpublishNavigationLinkArgs = {
  from?: Array<Graphcms_Stage>;
  releaseAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: Graphcms_NavigationLinkWhereUniqueInput;
};


export type Graphcms_MutationScheduleUnpublishPageArgs = {
  from?: Array<Graphcms_Stage>;
  releaseAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: Graphcms_PageWhereUniqueInput;
};


export type Graphcms_MutationScheduleUnpublishPostArgs = {
  from?: Array<Graphcms_Stage>;
  releaseAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: Graphcms_PostWhereUniqueInput;
};


export type Graphcms_MutationScheduleUnpublishSeoArgs = {
  from?: Array<Graphcms_Stage>;
  releaseAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: Graphcms_SeoWhereUniqueInput;
};


export type Graphcms_MutationScheduleUnpublishShowcaseCardArgs = {
  from?: Array<Graphcms_Stage>;
  releaseAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: Graphcms_ShowcaseCardWhereUniqueInput;
};


export type Graphcms_MutationUnpublishAssetArgs = {
  from?: Array<Graphcms_Stage>;
  locales?: InputMaybe<Array<Graphcms_Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: Graphcms_AssetWhereUniqueInput;
};


export type Graphcms_MutationUnpublishAuthorArgs = {
  from?: Array<Graphcms_Stage>;
  where: Graphcms_AuthorWhereUniqueInput;
};


export type Graphcms_MutationUnpublishBlogCategoryArgs = {
  from?: Array<Graphcms_Stage>;
  where: Graphcms_BlogCategoryWhereUniqueInput;
};


export type Graphcms_MutationUnpublishManyAssetsArgs = {
  from?: Array<Graphcms_Stage>;
  locales?: InputMaybe<Array<Graphcms_Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<Graphcms_AssetManyWhereInput>;
};


export type Graphcms_MutationUnpublishManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Graphcms_Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Graphcms_Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Graphcms_Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<Graphcms_AssetManyWhereInput>;
};


export type Graphcms_MutationUnpublishManyAuthorsArgs = {
  from?: Array<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_AuthorManyWhereInput>;
};


export type Graphcms_MutationUnpublishManyAuthorsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Graphcms_Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_AuthorManyWhereInput>;
};


export type Graphcms_MutationUnpublishManyBlogCategoriesArgs = {
  from?: Array<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_BlogCategoryManyWhereInput>;
};


export type Graphcms_MutationUnpublishManyBlogCategoriesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Graphcms_Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_BlogCategoryManyWhereInput>;
};


export type Graphcms_MutationUnpublishManyNavigationLinksArgs = {
  from?: Array<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_NavigationLinkManyWhereInput>;
};


export type Graphcms_MutationUnpublishManyNavigationLinksConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Graphcms_Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_NavigationLinkManyWhereInput>;
};


export type Graphcms_MutationUnpublishManyPagesArgs = {
  from?: Array<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_PageManyWhereInput>;
};


export type Graphcms_MutationUnpublishManyPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Graphcms_Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_PageManyWhereInput>;
};


export type Graphcms_MutationUnpublishManyPostsArgs = {
  from?: Array<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_PostManyWhereInput>;
};


export type Graphcms_MutationUnpublishManyPostsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Graphcms_Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_PostManyWhereInput>;
};


export type Graphcms_MutationUnpublishManySeosArgs = {
  from?: Array<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_SeoManyWhereInput>;
};


export type Graphcms_MutationUnpublishManySeosConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Graphcms_Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_SeoManyWhereInput>;
};


export type Graphcms_MutationUnpublishManyShowcaseCardsArgs = {
  from?: Array<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_ShowcaseCardManyWhereInput>;
};


export type Graphcms_MutationUnpublishManyShowcaseCardsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Graphcms_Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Graphcms_Stage>;
  where?: InputMaybe<Graphcms_ShowcaseCardManyWhereInput>;
};


export type Graphcms_MutationUnpublishNavigationLinkArgs = {
  from?: Array<Graphcms_Stage>;
  where: Graphcms_NavigationLinkWhereUniqueInput;
};


export type Graphcms_MutationUnpublishPageArgs = {
  from?: Array<Graphcms_Stage>;
  where: Graphcms_PageWhereUniqueInput;
};


export type Graphcms_MutationUnpublishPostArgs = {
  from?: Array<Graphcms_Stage>;
  where: Graphcms_PostWhereUniqueInput;
};


export type Graphcms_MutationUnpublishSeoArgs = {
  from?: Array<Graphcms_Stage>;
  where: Graphcms_SeoWhereUniqueInput;
};


export type Graphcms_MutationUnpublishShowcaseCardArgs = {
  from?: Array<Graphcms_Stage>;
  where: Graphcms_ShowcaseCardWhereUniqueInput;
};


export type Graphcms_MutationUpdateAssetArgs = {
  data: Graphcms_AssetUpdateInput;
  where: Graphcms_AssetWhereUniqueInput;
};


export type Graphcms_MutationUpdateAuthorArgs = {
  data: Graphcms_AuthorUpdateInput;
  where: Graphcms_AuthorWhereUniqueInput;
};


export type Graphcms_MutationUpdateBlogCategoryArgs = {
  data: Graphcms_BlogCategoryUpdateInput;
  where: Graphcms_BlogCategoryWhereUniqueInput;
};


export type Graphcms_MutationUpdateManyAssetsArgs = {
  data: Graphcms_AssetUpdateManyInput;
  where?: InputMaybe<Graphcms_AssetManyWhereInput>;
};


export type Graphcms_MutationUpdateManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: Graphcms_AssetUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_AssetManyWhereInput>;
};


export type Graphcms_MutationUpdateManyAuthorsArgs = {
  data: Graphcms_AuthorUpdateManyInput;
  where?: InputMaybe<Graphcms_AuthorManyWhereInput>;
};


export type Graphcms_MutationUpdateManyAuthorsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: Graphcms_AuthorUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_AuthorManyWhereInput>;
};


export type Graphcms_MutationUpdateManyBlogCategoriesArgs = {
  data: Graphcms_BlogCategoryUpdateManyInput;
  where?: InputMaybe<Graphcms_BlogCategoryManyWhereInput>;
};


export type Graphcms_MutationUpdateManyBlogCategoriesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: Graphcms_BlogCategoryUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_BlogCategoryManyWhereInput>;
};


export type Graphcms_MutationUpdateManyNavigationLinksArgs = {
  data: Graphcms_NavigationLinkUpdateManyInput;
  where?: InputMaybe<Graphcms_NavigationLinkManyWhereInput>;
};


export type Graphcms_MutationUpdateManyNavigationLinksConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: Graphcms_NavigationLinkUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_NavigationLinkManyWhereInput>;
};


export type Graphcms_MutationUpdateManyPagesArgs = {
  data: Graphcms_PageUpdateManyInput;
  where?: InputMaybe<Graphcms_PageManyWhereInput>;
};


export type Graphcms_MutationUpdateManyPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: Graphcms_PageUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_PageManyWhereInput>;
};


export type Graphcms_MutationUpdateManyPostsArgs = {
  data: Graphcms_PostUpdateManyInput;
  where?: InputMaybe<Graphcms_PostManyWhereInput>;
};


export type Graphcms_MutationUpdateManyPostsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: Graphcms_PostUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_PostManyWhereInput>;
};


export type Graphcms_MutationUpdateManySeosArgs = {
  data: Graphcms_SeoUpdateManyInput;
  where?: InputMaybe<Graphcms_SeoManyWhereInput>;
};


export type Graphcms_MutationUpdateManySeosConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: Graphcms_SeoUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_SeoManyWhereInput>;
};


export type Graphcms_MutationUpdateManyShowcaseCardsArgs = {
  data: Graphcms_ShowcaseCardUpdateManyInput;
  where?: InputMaybe<Graphcms_ShowcaseCardManyWhereInput>;
};


export type Graphcms_MutationUpdateManyShowcaseCardsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: Graphcms_ShowcaseCardUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_ShowcaseCardManyWhereInput>;
};


export type Graphcms_MutationUpdateNavigationLinkArgs = {
  data: Graphcms_NavigationLinkUpdateInput;
  where: Graphcms_NavigationLinkWhereUniqueInput;
};


export type Graphcms_MutationUpdatePageArgs = {
  data: Graphcms_PageUpdateInput;
  where: Graphcms_PageWhereUniqueInput;
};


export type Graphcms_MutationUpdatePostArgs = {
  data: Graphcms_PostUpdateInput;
  where: Graphcms_PostWhereUniqueInput;
};


export type Graphcms_MutationUpdateScheduledReleaseArgs = {
  data: Graphcms_ScheduledReleaseUpdateInput;
  where: Graphcms_ScheduledReleaseWhereUniqueInput;
};


export type Graphcms_MutationUpdateSeoArgs = {
  data: Graphcms_SeoUpdateInput;
  where: Graphcms_SeoWhereUniqueInput;
};


export type Graphcms_MutationUpdateShowcaseCardArgs = {
  data: Graphcms_ShowcaseCardUpdateInput;
  where: Graphcms_ShowcaseCardWhereUniqueInput;
};


export type Graphcms_MutationUpsertAssetArgs = {
  upsert: Graphcms_AssetUpsertInput;
  where: Graphcms_AssetWhereUniqueInput;
};


export type Graphcms_MutationUpsertAuthorArgs = {
  upsert: Graphcms_AuthorUpsertInput;
  where: Graphcms_AuthorWhereUniqueInput;
};


export type Graphcms_MutationUpsertBlogCategoryArgs = {
  upsert: Graphcms_BlogCategoryUpsertInput;
  where: Graphcms_BlogCategoryWhereUniqueInput;
};


export type Graphcms_MutationUpsertNavigationLinkArgs = {
  upsert: Graphcms_NavigationLinkUpsertInput;
  where: Graphcms_NavigationLinkWhereUniqueInput;
};


export type Graphcms_MutationUpsertPageArgs = {
  upsert: Graphcms_PageUpsertInput;
  where: Graphcms_PageWhereUniqueInput;
};


export type Graphcms_MutationUpsertPostArgs = {
  upsert: Graphcms_PostUpsertInput;
  where: Graphcms_PostWhereUniqueInput;
};


export type Graphcms_MutationUpsertSeoArgs = {
  upsert: Graphcms_SeoUpsertInput;
  where: Graphcms_SeoWhereUniqueInput;
};


export type Graphcms_MutationUpsertShowcaseCardArgs = {
  upsert: Graphcms_ShowcaseCardUpsertInput;
  where: Graphcms_ShowcaseCardWhereUniqueInput;
};

export type Graphcms_NavigationLink = Graphcms_Node & {
  __typename?: 'graphcms_NavigationLink';
  /** The time the document was created */
  createdAt: Scalars['graphcms_DateTime'];
  /** User that created this document */
  createdBy?: Maybe<Graphcms_User>;
  /** Get the document in other stages */
  documentInStages: Array<Graphcms_NavigationLink>;
  /** List of NavigationLink versions */
  history: Array<Graphcms_Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  linkText: Scalars['String'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['graphcms_DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<Graphcms_User>;
  scheduledIn: Array<Graphcms_ScheduledOperation>;
  /** System stage field */
  stage: Graphcms_Stage;
  /** The time the document was updated */
  updatedAt: Scalars['graphcms_DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<Graphcms_User>;
  url: Scalars['String'];
};


export type Graphcms_NavigationLinkCreatedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


export type Graphcms_NavigationLinkDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Graphcms_Stage>;
};


export type Graphcms_NavigationLinkHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Graphcms_Stage>;
};


export type Graphcms_NavigationLinkPublishedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


export type Graphcms_NavigationLinkScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Graphcms_Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
};


export type Graphcms_NavigationLinkUpdatedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};

/** A connection to a list of items. */
export type Graphcms_NavigationLinkConnection = {
  __typename?: 'graphcms_NavigationLinkConnection';
  aggregate: Graphcms_Aggregate;
  /** A list of edges. */
  edges: Array<Graphcms_NavigationLinkEdge>;
  /** Information to aid in pagination. */
  pageInfo: Graphcms_PageInfo;
};

export type Graphcms_NavigationLinkCreateInput = {
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  linkText: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  url: Scalars['String'];
};

/** An edge in a connection. */
export type Graphcms_NavigationLinkEdge = {
  __typename?: 'graphcms_NavigationLinkEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Graphcms_NavigationLink;
};

/** Identifies documents */
export type Graphcms_NavigationLinkManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<Graphcms_NavigationLinkWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<Graphcms_NavigationLinkWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<Graphcms_NavigationLinkWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  createdBy?: InputMaybe<Graphcms_UserWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  linkText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  linkText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  linkText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  linkText_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  linkText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  linkText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  linkText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  linkText_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  linkText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  linkText_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  publishedBy?: InputMaybe<Graphcms_UserWhereInput>;
  scheduledIn_every?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  updatedBy?: InputMaybe<Graphcms_UserWhereInput>;
  url?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
};

export enum Graphcms_NavigationLinkOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LinkTextAsc = 'linkText_ASC',
  LinkTextDesc = 'linkText_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC'
}

export type Graphcms_NavigationLinkUpdateInput = {
  linkText?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
};

export type Graphcms_NavigationLinkUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: InputMaybe<Scalars['String']>;
};

export type Graphcms_NavigationLinkUpsertInput = {
  /** Create document if it didn't exist */
  create: Graphcms_NavigationLinkCreateInput;
  /** Update document if it exists */
  update: Graphcms_NavigationLinkUpdateInput;
};

/** Identifies documents */
export type Graphcms_NavigationLinkWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<Graphcms_NavigationLinkWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<Graphcms_NavigationLinkWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<Graphcms_NavigationLinkWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  createdBy?: InputMaybe<Graphcms_UserWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  linkText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  linkText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  linkText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  linkText_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  linkText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  linkText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  linkText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  linkText_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  linkText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  linkText_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  publishedBy?: InputMaybe<Graphcms_UserWhereInput>;
  scheduledIn_every?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  updatedBy?: InputMaybe<Graphcms_UserWhereInput>;
  url?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
};

/** References NavigationLink record uniquely */
export type Graphcms_NavigationLinkWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  linkText?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
};

/** An object with an ID */
export type Graphcms_Node = {
  /** The id of the object. */
  id: Scalars['ID'];
  /** The Stage of an object */
  stage: Graphcms_Stage;
};

export type Graphcms_Page = Graphcms_Node & {
  __typename?: 'graphcms_Page';
  /** Enter the content for this page. The content uses the rich-text editor, giving you a better visual representation. */
  content: Graphcms_RichText;
  /** The time the document was created */
  createdAt: Scalars['graphcms_DateTime'];
  /** User that created this document */
  createdBy?: Maybe<Graphcms_User>;
  /** Get the document in other stages */
  documentInStages: Array<Graphcms_Page>;
  /** List of Page versions */
  history: Array<Graphcms_Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['graphcms_DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<Graphcms_User>;
  scheduledIn: Array<Graphcms_ScheduledOperation>;
  /** Relate an SEO model to this page */
  seo?: Maybe<Graphcms_Seo>;
  /** Enter the slug for this page, such as about, blog, or contact */
  slug: Scalars['String'];
  /** System stage field */
  stage: Graphcms_Stage;
  /** Enter a short description to be used as a subtitle */
  subtitle?: Maybe<Scalars['String']>;
  /** What is the title of your page? */
  title: Scalars['String'];
  /** The time the document was updated */
  updatedAt: Scalars['graphcms_DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<Graphcms_User>;
};


export type Graphcms_PageCreatedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


export type Graphcms_PageDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Graphcms_Stage>;
};


export type Graphcms_PageHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Graphcms_Stage>;
};


export type Graphcms_PagePublishedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


export type Graphcms_PageScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Graphcms_Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
};


export type Graphcms_PageSeoArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


export type Graphcms_PageUpdatedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};

/** A connection to a list of items. */
export type Graphcms_PageConnection = {
  __typename?: 'graphcms_PageConnection';
  aggregate: Graphcms_Aggregate;
  /** A list of edges. */
  edges: Array<Graphcms_PageEdge>;
  /** Information to aid in pagination. */
  pageInfo: Graphcms_PageInfo;
};

export type Graphcms_PageCreateInput = {
  content: Scalars['graphcms_RichTextAST'];
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  seo?: InputMaybe<Graphcms_SeoCreateOneInlineInput>;
  slug: Scalars['String'];
  subtitle?: InputMaybe<Scalars['String']>;
  title: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
};

/** An edge in a connection. */
export type Graphcms_PageEdge = {
  __typename?: 'graphcms_PageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Graphcms_Page;
};

/** Information about pagination in a connection. */
export type Graphcms_PageInfo = {
  __typename?: 'graphcms_PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** Number of items in the current page. */
  pageSize?: Maybe<Scalars['Int']>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

/** Identifies documents */
export type Graphcms_PageManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<Graphcms_PageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<Graphcms_PageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<Graphcms_PageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  createdBy?: InputMaybe<Graphcms_UserWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  publishedBy?: InputMaybe<Graphcms_UserWhereInput>;
  scheduledIn_every?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  seo?: InputMaybe<Graphcms_SeoWhereInput>;
  slug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  slug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']>;
  subtitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  subtitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  updatedBy?: InputMaybe<Graphcms_UserWhereInput>;
};

export enum Graphcms_PageOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  SubtitleAsc = 'subtitle_ASC',
  SubtitleDesc = 'subtitle_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type Graphcms_PageUpdateInput = {
  content?: InputMaybe<Scalars['graphcms_RichTextAST']>;
  seo?: InputMaybe<Graphcms_SeoUpdateOneInlineInput>;
  slug?: InputMaybe<Scalars['String']>;
  subtitle?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};

export type Graphcms_PageUpdateManyInput = {
  content?: InputMaybe<Scalars['graphcms_RichTextAST']>;
  subtitle?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};

export type Graphcms_PageUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: Graphcms_PageUpdateInput;
  /** Unique document search */
  where: Graphcms_PageWhereUniqueInput;
};

export type Graphcms_PageUpsertInput = {
  /** Create document if it didn't exist */
  create: Graphcms_PageCreateInput;
  /** Update document if it exists */
  update: Graphcms_PageUpdateInput;
};

export type Graphcms_PageUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: Graphcms_PageUpsertInput;
  /** Unique document search */
  where: Graphcms_PageWhereUniqueInput;
};

/** Identifies documents */
export type Graphcms_PageWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<Graphcms_PageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<Graphcms_PageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<Graphcms_PageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  createdBy?: InputMaybe<Graphcms_UserWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  publishedBy?: InputMaybe<Graphcms_UserWhereInput>;
  scheduledIn_every?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  seo?: InputMaybe<Graphcms_SeoWhereInput>;
  slug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  slug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']>;
  subtitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  subtitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  updatedBy?: InputMaybe<Graphcms_UserWhereInput>;
};

/** References Page record uniquely */
export type Graphcms_PageWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  slug?: InputMaybe<Scalars['String']>;
};

export type Graphcms_Post = Graphcms_Node & {
  __typename?: 'graphcms_Post';
  /** Who should be credited with writing this post? */
  author?: Maybe<Graphcms_Author>;
  categories: Array<Graphcms_BlogCategory>;
  /** Write your blog post! */
  content: Graphcms_RichText;
  coverImage?: Maybe<Graphcms_Asset>;
  /** The time the document was created */
  createdAt: Scalars['graphcms_DateTime'];
  /** User that created this document */
  createdBy?: Maybe<Graphcms_User>;
  /** What is the published date you would like to show for this post? */
  date: Scalars['graphcms_Date'];
  /** Get the document in other stages */
  documentInStages: Array<Graphcms_Post>;
  /** Add a short excerpt to summarize this post */
  excerpt?: Maybe<Scalars['String']>;
  /** List of Post versions */
  history: Array<Graphcms_Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['graphcms_DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<Graphcms_User>;
  scheduledIn: Array<Graphcms_ScheduledOperation>;
  /** Attach an SEO model to this post */
  seo?: Maybe<Graphcms_Seo>;
  /** Select a slug for this blog post, such as post-1, post-2, etc. */
  slug: Scalars['String'];
  /** System stage field */
  stage: Graphcms_Stage;
  /** Add any relevant tags to this blog post */
  tags: Array<Scalars['String']>;
  /** Name your blog post! */
  title: Scalars['String'];
  /** The time the document was updated */
  updatedAt: Scalars['graphcms_DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<Graphcms_User>;
};


export type Graphcms_PostAuthorArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


export type Graphcms_PostCategoriesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Graphcms_Locale>>;
  orderBy?: InputMaybe<Graphcms_BlogCategoryOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_BlogCategoryWhereInput>;
};


export type Graphcms_PostCoverImageArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


export type Graphcms_PostCreatedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


export type Graphcms_PostDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Graphcms_Stage>;
};


export type Graphcms_PostHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Graphcms_Stage>;
};


export type Graphcms_PostPublishedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


export type Graphcms_PostScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Graphcms_Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
};


export type Graphcms_PostSeoArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


export type Graphcms_PostUpdatedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};

export type Graphcms_PostConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<Graphcms_ConnectPositionInput>;
  /** Document to connect */
  where: Graphcms_PostWhereUniqueInput;
};

/** A connection to a list of items. */
export type Graphcms_PostConnection = {
  __typename?: 'graphcms_PostConnection';
  aggregate: Graphcms_Aggregate;
  /** A list of edges. */
  edges: Array<Graphcms_PostEdge>;
  /** Information to aid in pagination. */
  pageInfo: Graphcms_PageInfo;
};

export type Graphcms_PostCreateInput = {
  author?: InputMaybe<Graphcms_AuthorCreateOneInlineInput>;
  categories?: InputMaybe<Graphcms_BlogCategoryCreateManyInlineInput>;
  content: Scalars['graphcms_RichTextAST'];
  coverImage?: InputMaybe<Graphcms_AssetCreateOneInlineInput>;
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  date: Scalars['graphcms_Date'];
  excerpt?: InputMaybe<Scalars['String']>;
  seo?: InputMaybe<Graphcms_SeoCreateOneInlineInput>;
  slug: Scalars['String'];
  tags?: InputMaybe<Array<Scalars['String']>>;
  title: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
};

export type Graphcms_PostCreateManyInlineInput = {
  /** Connect multiple existing Post documents */
  connect?: InputMaybe<Array<Graphcms_PostWhereUniqueInput>>;
  /** Create and connect multiple existing Post documents */
  create?: InputMaybe<Array<Graphcms_PostCreateInput>>;
};

/** An edge in a connection. */
export type Graphcms_PostEdge = {
  __typename?: 'graphcms_PostEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Graphcms_Post;
};

/** Identifies documents */
export type Graphcms_PostManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<Graphcms_PostWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<Graphcms_PostWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<Graphcms_PostWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  author?: InputMaybe<Graphcms_AuthorWhereInput>;
  categories_every?: InputMaybe<Graphcms_BlogCategoryWhereInput>;
  categories_none?: InputMaybe<Graphcms_BlogCategoryWhereInput>;
  categories_some?: InputMaybe<Graphcms_BlogCategoryWhereInput>;
  coverImage?: InputMaybe<Graphcms_AssetWhereInput>;
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  createdBy?: InputMaybe<Graphcms_UserWhereInput>;
  date?: InputMaybe<Scalars['graphcms_Date']>;
  /** All values greater than the given value. */
  date_gt?: InputMaybe<Scalars['graphcms_Date']>;
  /** All values greater than or equal the given value. */
  date_gte?: InputMaybe<Scalars['graphcms_Date']>;
  /** All values that are contained in given list. */
  date_in?: InputMaybe<Array<Scalars['graphcms_Date']>>;
  /** All values less than the given value. */
  date_lt?: InputMaybe<Scalars['graphcms_Date']>;
  /** All values less than or equal the given value. */
  date_lte?: InputMaybe<Scalars['graphcms_Date']>;
  /** All values that are not equal to given value. */
  date_not?: InputMaybe<Scalars['graphcms_Date']>;
  /** All values that are not contained in given list. */
  date_not_in?: InputMaybe<Array<Scalars['graphcms_Date']>>;
  excerpt?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  excerpt_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  excerpt_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  excerpt_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  excerpt_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  excerpt_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  excerpt_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  excerpt_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  excerpt_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  excerpt_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  publishedBy?: InputMaybe<Graphcms_UserWhereInput>;
  scheduledIn_every?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  seo?: InputMaybe<Graphcms_SeoWhereInput>;
  slug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  slug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  tags?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  tags_contains_all?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  tags_contains_none?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  tags_contains_some?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  tags_not?: InputMaybe<Array<Scalars['String']>>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  updatedBy?: InputMaybe<Graphcms_UserWhereInput>;
};

export enum Graphcms_PostOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DateAsc = 'date_ASC',
  DateDesc = 'date_DESC',
  ExcerptAsc = 'excerpt_ASC',
  ExcerptDesc = 'excerpt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  TagsAsc = 'tags_ASC',
  TagsDesc = 'tags_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type Graphcms_PostUpdateInput = {
  author?: InputMaybe<Graphcms_AuthorUpdateOneInlineInput>;
  categories?: InputMaybe<Graphcms_BlogCategoryUpdateManyInlineInput>;
  content?: InputMaybe<Scalars['graphcms_RichTextAST']>;
  coverImage?: InputMaybe<Graphcms_AssetUpdateOneInlineInput>;
  date?: InputMaybe<Scalars['graphcms_Date']>;
  excerpt?: InputMaybe<Scalars['String']>;
  seo?: InputMaybe<Graphcms_SeoUpdateOneInlineInput>;
  slug?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<Array<Scalars['String']>>;
  title?: InputMaybe<Scalars['String']>;
};

export type Graphcms_PostUpdateManyInlineInput = {
  /** Connect multiple existing Post documents */
  connect?: InputMaybe<Array<Graphcms_PostConnectInput>>;
  /** Create and connect multiple Post documents */
  create?: InputMaybe<Array<Graphcms_PostCreateInput>>;
  /** Delete multiple Post documents */
  delete?: InputMaybe<Array<Graphcms_PostWhereUniqueInput>>;
  /** Disconnect multiple Post documents */
  disconnect?: InputMaybe<Array<Graphcms_PostWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Post documents */
  set?: InputMaybe<Array<Graphcms_PostWhereUniqueInput>>;
  /** Update multiple Post documents */
  update?: InputMaybe<Array<Graphcms_PostUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Post documents */
  upsert?: InputMaybe<Array<Graphcms_PostUpsertWithNestedWhereUniqueInput>>;
};

export type Graphcms_PostUpdateManyInput = {
  content?: InputMaybe<Scalars['graphcms_RichTextAST']>;
  date?: InputMaybe<Scalars['graphcms_Date']>;
  excerpt?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<Array<Scalars['String']>>;
  title?: InputMaybe<Scalars['String']>;
};

export type Graphcms_PostUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: Graphcms_PostUpdateInput;
  /** Unique document search */
  where: Graphcms_PostWhereUniqueInput;
};

export type Graphcms_PostUpsertInput = {
  /** Create document if it didn't exist */
  create: Graphcms_PostCreateInput;
  /** Update document if it exists */
  update: Graphcms_PostUpdateInput;
};

export type Graphcms_PostUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: Graphcms_PostUpsertInput;
  /** Unique document search */
  where: Graphcms_PostWhereUniqueInput;
};

/** Identifies documents */
export type Graphcms_PostWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<Graphcms_PostWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<Graphcms_PostWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<Graphcms_PostWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  author?: InputMaybe<Graphcms_AuthorWhereInput>;
  categories_every?: InputMaybe<Graphcms_BlogCategoryWhereInput>;
  categories_none?: InputMaybe<Graphcms_BlogCategoryWhereInput>;
  categories_some?: InputMaybe<Graphcms_BlogCategoryWhereInput>;
  coverImage?: InputMaybe<Graphcms_AssetWhereInput>;
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  createdBy?: InputMaybe<Graphcms_UserWhereInput>;
  date?: InputMaybe<Scalars['graphcms_Date']>;
  /** All values greater than the given value. */
  date_gt?: InputMaybe<Scalars['graphcms_Date']>;
  /** All values greater than or equal the given value. */
  date_gte?: InputMaybe<Scalars['graphcms_Date']>;
  /** All values that are contained in given list. */
  date_in?: InputMaybe<Array<Scalars['graphcms_Date']>>;
  /** All values less than the given value. */
  date_lt?: InputMaybe<Scalars['graphcms_Date']>;
  /** All values less than or equal the given value. */
  date_lte?: InputMaybe<Scalars['graphcms_Date']>;
  /** All values that are not equal to given value. */
  date_not?: InputMaybe<Scalars['graphcms_Date']>;
  /** All values that are not contained in given list. */
  date_not_in?: InputMaybe<Array<Scalars['graphcms_Date']>>;
  excerpt?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  excerpt_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  excerpt_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  excerpt_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  excerpt_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  excerpt_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  excerpt_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  excerpt_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  excerpt_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  excerpt_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  publishedBy?: InputMaybe<Graphcms_UserWhereInput>;
  scheduledIn_every?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  seo?: InputMaybe<Graphcms_SeoWhereInput>;
  slug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  slug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  tags?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  tags_contains_all?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  tags_contains_none?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  tags_contains_some?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  tags_not?: InputMaybe<Array<Scalars['String']>>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  updatedBy?: InputMaybe<Graphcms_UserWhereInput>;
};

/** References Post record uniquely */
export type Graphcms_PostWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  slug?: InputMaybe<Scalars['String']>;
};

export type Graphcms_Query = {
  __typename?: 'graphcms_Query';
  /** Retrieve a single asset */
  asset?: Maybe<Graphcms_Asset>;
  /** Retrieve document version */
  assetVersion?: Maybe<Graphcms_DocumentVersion>;
  /** Retrieve multiple assets */
  assets: Array<Graphcms_Asset>;
  /** Retrieve multiple assets using the Relay connection interface */
  assetsConnection: Graphcms_AssetConnection;
  /** Retrieve a single author */
  author?: Maybe<Graphcms_Author>;
  /** Retrieve document version */
  authorVersion?: Maybe<Graphcms_DocumentVersion>;
  /** Retrieve multiple authors */
  authors: Array<Graphcms_Author>;
  /** Retrieve multiple authors using the Relay connection interface */
  authorsConnection: Graphcms_AuthorConnection;
  /** Retrieve multiple blogCategories */
  blogCategories: Array<Graphcms_BlogCategory>;
  /** Retrieve multiple blogCategories using the Relay connection interface */
  blogCategoriesConnection: Graphcms_BlogCategoryConnection;
  /** Retrieve a single blogCategory */
  blogCategory?: Maybe<Graphcms_BlogCategory>;
  /** Retrieve document version */
  blogCategoryVersion?: Maybe<Graphcms_DocumentVersion>;
  /** Retrieve a single navigationLink */
  navigationLink?: Maybe<Graphcms_NavigationLink>;
  /** Retrieve document version */
  navigationLinkVersion?: Maybe<Graphcms_DocumentVersion>;
  /** Retrieve multiple navigationLinks */
  navigationLinks: Array<Graphcms_NavigationLink>;
  /** Retrieve multiple navigationLinks using the Relay connection interface */
  navigationLinksConnection: Graphcms_NavigationLinkConnection;
  /** Fetches an object given its ID */
  node?: Maybe<Graphcms_Node>;
  /** Retrieve a single page */
  page?: Maybe<Graphcms_Page>;
  /** Retrieve document version */
  pageVersion?: Maybe<Graphcms_DocumentVersion>;
  /** Retrieve multiple pages */
  pages: Array<Graphcms_Page>;
  /** Retrieve multiple pages using the Relay connection interface */
  pagesConnection: Graphcms_PageConnection;
  /** Retrieve a single post */
  post?: Maybe<Graphcms_Post>;
  /** Retrieve document version */
  postVersion?: Maybe<Graphcms_DocumentVersion>;
  /** Retrieve multiple posts */
  posts: Array<Graphcms_Post>;
  /** Retrieve multiple posts using the Relay connection interface */
  postsConnection: Graphcms_PostConnection;
  /** Retrieve a single scheduledOperation */
  scheduledOperation?: Maybe<Graphcms_ScheduledOperation>;
  /** Retrieve multiple scheduledOperations */
  scheduledOperations: Array<Graphcms_ScheduledOperation>;
  /** Retrieve multiple scheduledOperations using the Relay connection interface */
  scheduledOperationsConnection: Graphcms_ScheduledOperationConnection;
  /** Retrieve a single scheduledRelease */
  scheduledRelease?: Maybe<Graphcms_ScheduledRelease>;
  /** Retrieve multiple scheduledReleases */
  scheduledReleases: Array<Graphcms_ScheduledRelease>;
  /** Retrieve multiple scheduledReleases using the Relay connection interface */
  scheduledReleasesConnection: Graphcms_ScheduledReleaseConnection;
  /** Retrieve a single seo */
  seo?: Maybe<Graphcms_Seo>;
  /** Retrieve document version */
  seoVersion?: Maybe<Graphcms_DocumentVersion>;
  /** Retrieve multiple seos */
  seos: Array<Graphcms_Seo>;
  /** Retrieve multiple seos using the Relay connection interface */
  seosConnection: Graphcms_SeoConnection;
  /** Retrieve a single showcaseCard */
  showcaseCard?: Maybe<Graphcms_ShowcaseCard>;
  /** Retrieve document version */
  showcaseCardVersion?: Maybe<Graphcms_DocumentVersion>;
  /** Retrieve multiple showcaseCards */
  showcaseCards: Array<Graphcms_ShowcaseCard>;
  /** Retrieve multiple showcaseCards using the Relay connection interface */
  showcaseCardsConnection: Graphcms_ShowcaseCardConnection;
  /** Retrieve a single user */
  user?: Maybe<Graphcms_User>;
  /** Retrieve multiple users */
  users: Array<Graphcms_User>;
  /** Retrieve multiple users using the Relay connection interface */
  usersConnection: Graphcms_UserConnection;
};


export type Graphcms_QueryAssetArgs = {
  locales?: Array<Graphcms_Locale>;
  stage?: Graphcms_Stage;
  where: Graphcms_AssetWhereUniqueInput;
};


export type Graphcms_QueryAssetVersionArgs = {
  where: Graphcms_VersionWhereInput;
};


export type Graphcms_QueryAssetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Graphcms_Locale>;
  orderBy?: InputMaybe<Graphcms_AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Graphcms_Stage;
  where?: InputMaybe<Graphcms_AssetWhereInput>;
};


export type Graphcms_QueryAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Graphcms_Locale>;
  orderBy?: InputMaybe<Graphcms_AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Graphcms_Stage;
  where?: InputMaybe<Graphcms_AssetWhereInput>;
};


export type Graphcms_QueryAuthorArgs = {
  locales?: Array<Graphcms_Locale>;
  stage?: Graphcms_Stage;
  where: Graphcms_AuthorWhereUniqueInput;
};


export type Graphcms_QueryAuthorVersionArgs = {
  where: Graphcms_VersionWhereInput;
};


export type Graphcms_QueryAuthorsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Graphcms_Locale>;
  orderBy?: InputMaybe<Graphcms_AuthorOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Graphcms_Stage;
  where?: InputMaybe<Graphcms_AuthorWhereInput>;
};


export type Graphcms_QueryAuthorsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Graphcms_Locale>;
  orderBy?: InputMaybe<Graphcms_AuthorOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Graphcms_Stage;
  where?: InputMaybe<Graphcms_AuthorWhereInput>;
};


export type Graphcms_QueryBlogCategoriesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Graphcms_Locale>;
  orderBy?: InputMaybe<Graphcms_BlogCategoryOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Graphcms_Stage;
  where?: InputMaybe<Graphcms_BlogCategoryWhereInput>;
};


export type Graphcms_QueryBlogCategoriesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Graphcms_Locale>;
  orderBy?: InputMaybe<Graphcms_BlogCategoryOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Graphcms_Stage;
  where?: InputMaybe<Graphcms_BlogCategoryWhereInput>;
};


export type Graphcms_QueryBlogCategoryArgs = {
  locales?: Array<Graphcms_Locale>;
  stage?: Graphcms_Stage;
  where: Graphcms_BlogCategoryWhereUniqueInput;
};


export type Graphcms_QueryBlogCategoryVersionArgs = {
  where: Graphcms_VersionWhereInput;
};


export type Graphcms_QueryNavigationLinkArgs = {
  locales?: Array<Graphcms_Locale>;
  stage?: Graphcms_Stage;
  where: Graphcms_NavigationLinkWhereUniqueInput;
};


export type Graphcms_QueryNavigationLinkVersionArgs = {
  where: Graphcms_VersionWhereInput;
};


export type Graphcms_QueryNavigationLinksArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Graphcms_Locale>;
  orderBy?: InputMaybe<Graphcms_NavigationLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Graphcms_Stage;
  where?: InputMaybe<Graphcms_NavigationLinkWhereInput>;
};


export type Graphcms_QueryNavigationLinksConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Graphcms_Locale>;
  orderBy?: InputMaybe<Graphcms_NavigationLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Graphcms_Stage;
  where?: InputMaybe<Graphcms_NavigationLinkWhereInput>;
};


export type Graphcms_QueryNodeArgs = {
  id: Scalars['ID'];
  locales?: Array<Graphcms_Locale>;
  stage?: Graphcms_Stage;
};


export type Graphcms_QueryPageArgs = {
  locales?: Array<Graphcms_Locale>;
  stage?: Graphcms_Stage;
  where: Graphcms_PageWhereUniqueInput;
};


export type Graphcms_QueryPageVersionArgs = {
  where: Graphcms_VersionWhereInput;
};


export type Graphcms_QueryPagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Graphcms_Locale>;
  orderBy?: InputMaybe<Graphcms_PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Graphcms_Stage;
  where?: InputMaybe<Graphcms_PageWhereInput>;
};


export type Graphcms_QueryPagesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Graphcms_Locale>;
  orderBy?: InputMaybe<Graphcms_PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Graphcms_Stage;
  where?: InputMaybe<Graphcms_PageWhereInput>;
};


export type Graphcms_QueryPostArgs = {
  locales?: Array<Graphcms_Locale>;
  stage?: Graphcms_Stage;
  where: Graphcms_PostWhereUniqueInput;
};


export type Graphcms_QueryPostVersionArgs = {
  where: Graphcms_VersionWhereInput;
};


export type Graphcms_QueryPostsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Graphcms_Locale>;
  orderBy?: InputMaybe<Graphcms_PostOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Graphcms_Stage;
  where?: InputMaybe<Graphcms_PostWhereInput>;
};


export type Graphcms_QueryPostsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Graphcms_Locale>;
  orderBy?: InputMaybe<Graphcms_PostOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Graphcms_Stage;
  where?: InputMaybe<Graphcms_PostWhereInput>;
};


export type Graphcms_QueryScheduledOperationArgs = {
  locales?: Array<Graphcms_Locale>;
  stage?: Graphcms_Stage;
  where: Graphcms_ScheduledOperationWhereUniqueInput;
};


export type Graphcms_QueryScheduledOperationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Graphcms_Locale>;
  orderBy?: InputMaybe<Graphcms_ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Graphcms_Stage;
  where?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
};


export type Graphcms_QueryScheduledOperationsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Graphcms_Locale>;
  orderBy?: InputMaybe<Graphcms_ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Graphcms_Stage;
  where?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
};


export type Graphcms_QueryScheduledReleaseArgs = {
  locales?: Array<Graphcms_Locale>;
  stage?: Graphcms_Stage;
  where: Graphcms_ScheduledReleaseWhereUniqueInput;
};


export type Graphcms_QueryScheduledReleasesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Graphcms_Locale>;
  orderBy?: InputMaybe<Graphcms_ScheduledReleaseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Graphcms_Stage;
  where?: InputMaybe<Graphcms_ScheduledReleaseWhereInput>;
};


export type Graphcms_QueryScheduledReleasesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Graphcms_Locale>;
  orderBy?: InputMaybe<Graphcms_ScheduledReleaseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Graphcms_Stage;
  where?: InputMaybe<Graphcms_ScheduledReleaseWhereInput>;
};


export type Graphcms_QuerySeoArgs = {
  locales?: Array<Graphcms_Locale>;
  stage?: Graphcms_Stage;
  where: Graphcms_SeoWhereUniqueInput;
};


export type Graphcms_QuerySeoVersionArgs = {
  where: Graphcms_VersionWhereInput;
};


export type Graphcms_QuerySeosArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Graphcms_Locale>;
  orderBy?: InputMaybe<Graphcms_SeoOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Graphcms_Stage;
  where?: InputMaybe<Graphcms_SeoWhereInput>;
};


export type Graphcms_QuerySeosConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Graphcms_Locale>;
  orderBy?: InputMaybe<Graphcms_SeoOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Graphcms_Stage;
  where?: InputMaybe<Graphcms_SeoWhereInput>;
};


export type Graphcms_QueryShowcaseCardArgs = {
  locales?: Array<Graphcms_Locale>;
  stage?: Graphcms_Stage;
  where: Graphcms_ShowcaseCardWhereUniqueInput;
};


export type Graphcms_QueryShowcaseCardVersionArgs = {
  where: Graphcms_VersionWhereInput;
};


export type Graphcms_QueryShowcaseCardsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Graphcms_Locale>;
  orderBy?: InputMaybe<Graphcms_ShowcaseCardOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Graphcms_Stage;
  where?: InputMaybe<Graphcms_ShowcaseCardWhereInput>;
};


export type Graphcms_QueryShowcaseCardsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Graphcms_Locale>;
  orderBy?: InputMaybe<Graphcms_ShowcaseCardOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Graphcms_Stage;
  where?: InputMaybe<Graphcms_ShowcaseCardWhereInput>;
};


export type Graphcms_QueryUserArgs = {
  locales?: Array<Graphcms_Locale>;
  stage?: Graphcms_Stage;
  where: Graphcms_UserWhereUniqueInput;
};


export type Graphcms_QueryUsersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Graphcms_Locale>;
  orderBy?: InputMaybe<Graphcms_UserOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Graphcms_Stage;
  where?: InputMaybe<Graphcms_UserWhereInput>;
};


export type Graphcms_QueryUsersConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Graphcms_Locale>;
  orderBy?: InputMaybe<Graphcms_UserOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Graphcms_Stage;
  where?: InputMaybe<Graphcms_UserWhereInput>;
};

/** Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values */
export type Graphcms_RichText = {
  __typename?: 'graphcms_RichText';
  /** Returns HTMl representation */
  html: Scalars['String'];
  /** Returns Markdown representation */
  markdown: Scalars['String'];
  /** Returns AST representation */
  raw: Scalars['graphcms_RichTextAST'];
  /** Returns plain-text contents of RichText */
  text: Scalars['String'];
};

/** Scheduled Operation system model */
export type Graphcms_ScheduledOperation = Graphcms_Node & {
  __typename?: 'graphcms_ScheduledOperation';
  affectedDocuments: Array<Graphcms_ScheduledOperationAffectedDocument>;
  /** The time the document was created */
  createdAt: Scalars['graphcms_DateTime'];
  /** User that created this document */
  createdBy?: Maybe<Graphcms_User>;
  /** Operation description */
  description?: Maybe<Scalars['String']>;
  /** Get the document in other stages */
  documentInStages: Array<Graphcms_ScheduledOperation>;
  /** Operation error message */
  errorMessage?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['graphcms_DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<Graphcms_User>;
  /** Raw operation payload including all details, this field is subject to change */
  rawPayload: Scalars['graphcms_Json'];
  /** The release this operation is scheduled for */
  release?: Maybe<Graphcms_ScheduledRelease>;
  /** System stage field */
  stage: Graphcms_Stage;
  /** operation Status */
  status: Graphcms_ScheduledOperationStatus;
  /** The time the document was updated */
  updatedAt: Scalars['graphcms_DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<Graphcms_User>;
};


/** Scheduled Operation system model */
export type Graphcms_ScheduledOperationAffectedDocumentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Graphcms_Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
};


/** Scheduled Operation system model */
export type Graphcms_ScheduledOperationCreatedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


/** Scheduled Operation system model */
export type Graphcms_ScheduledOperationDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Graphcms_Stage>;
};


/** Scheduled Operation system model */
export type Graphcms_ScheduledOperationPublishedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


/** Scheduled Operation system model */
export type Graphcms_ScheduledOperationReleaseArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


/** Scheduled Operation system model */
export type Graphcms_ScheduledOperationUpdatedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};

export type Graphcms_ScheduledOperationAffectedDocument = Graphcms_Asset | Graphcms_Author | Graphcms_BlogCategory | Graphcms_NavigationLink | Graphcms_Page | Graphcms_Post | Graphcms_Seo | Graphcms_ShowcaseCard;

/** A connection to a list of items. */
export type Graphcms_ScheduledOperationConnection = {
  __typename?: 'graphcms_ScheduledOperationConnection';
  aggregate: Graphcms_Aggregate;
  /** A list of edges. */
  edges: Array<Graphcms_ScheduledOperationEdge>;
  /** Information to aid in pagination. */
  pageInfo: Graphcms_PageInfo;
};

/** An edge in a connection. */
export type Graphcms_ScheduledOperationEdge = {
  __typename?: 'graphcms_ScheduledOperationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Graphcms_ScheduledOperation;
};

export enum Graphcms_ScheduledOperationOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  ErrorMessageAsc = 'errorMessage_ASC',
  ErrorMessageDesc = 'errorMessage_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

/** System Scheduled Operation Status */
export enum Graphcms_ScheduledOperationStatus {
  Canceled = 'CANCELED',
  Completed = 'COMPLETED',
  Failed = 'FAILED',
  InProgress = 'IN_PROGRESS',
  Pending = 'PENDING'
}

/** Identifies documents */
export type Graphcms_ScheduledOperationWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<Graphcms_ScheduledOperationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<Graphcms_ScheduledOperationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<Graphcms_ScheduledOperationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  createdBy?: InputMaybe<Graphcms_UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  publishedBy?: InputMaybe<Graphcms_UserWhereInput>;
  release?: InputMaybe<Graphcms_ScheduledReleaseWhereInput>;
  status?: InputMaybe<Graphcms_ScheduledOperationStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<Graphcms_ScheduledOperationStatus>>;
  /** All values that are not equal to given value. */
  status_not?: InputMaybe<Graphcms_ScheduledOperationStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<Graphcms_ScheduledOperationStatus>>;
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  updatedBy?: InputMaybe<Graphcms_UserWhereInput>;
};

/** References ScheduledOperation record uniquely */
export type Graphcms_ScheduledOperationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Scheduled Release system model */
export type Graphcms_ScheduledRelease = Graphcms_Node & {
  __typename?: 'graphcms_ScheduledRelease';
  /** The time the document was created */
  createdAt: Scalars['graphcms_DateTime'];
  /** User that created this document */
  createdBy?: Maybe<Graphcms_User>;
  /** Release description */
  description?: Maybe<Scalars['String']>;
  /** Get the document in other stages */
  documentInStages: Array<Graphcms_ScheduledRelease>;
  /** Release error message */
  errorMessage?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** Whether scheduled release should be run */
  isActive: Scalars['Boolean'];
  /** Whether scheduled release is implicit */
  isImplicit: Scalars['Boolean'];
  /** Operations to run with this release */
  operations: Array<Graphcms_ScheduledOperation>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['graphcms_DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<Graphcms_User>;
  /** Release date and time */
  releaseAt?: Maybe<Scalars['graphcms_DateTime']>;
  /** System stage field */
  stage: Graphcms_Stage;
  /** Release Status */
  status: Graphcms_ScheduledReleaseStatus;
  /** Release Title */
  title?: Maybe<Scalars['String']>;
  /** The time the document was updated */
  updatedAt: Scalars['graphcms_DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<Graphcms_User>;
};


/** Scheduled Release system model */
export type Graphcms_ScheduledReleaseCreatedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


/** Scheduled Release system model */
export type Graphcms_ScheduledReleaseDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Graphcms_Stage>;
};


/** Scheduled Release system model */
export type Graphcms_ScheduledReleaseOperationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Graphcms_Locale>>;
  orderBy?: InputMaybe<Graphcms_ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
};


/** Scheduled Release system model */
export type Graphcms_ScheduledReleasePublishedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


/** Scheduled Release system model */
export type Graphcms_ScheduledReleaseUpdatedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};

/** A connection to a list of items. */
export type Graphcms_ScheduledReleaseConnection = {
  __typename?: 'graphcms_ScheduledReleaseConnection';
  aggregate: Graphcms_Aggregate;
  /** A list of edges. */
  edges: Array<Graphcms_ScheduledReleaseEdge>;
  /** Information to aid in pagination. */
  pageInfo: Graphcms_PageInfo;
};

export type Graphcms_ScheduledReleaseCreateInput = {
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  description?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  title?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
};

/** An edge in a connection. */
export type Graphcms_ScheduledReleaseEdge = {
  __typename?: 'graphcms_ScheduledReleaseEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Graphcms_ScheduledRelease;
};

export enum Graphcms_ScheduledReleaseOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  ErrorMessageAsc = 'errorMessage_ASC',
  ErrorMessageDesc = 'errorMessage_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsActiveAsc = 'isActive_ASC',
  IsActiveDesc = 'isActive_DESC',
  IsImplicitAsc = 'isImplicit_ASC',
  IsImplicitDesc = 'isImplicit_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  ReleaseAtAsc = 'releaseAt_ASC',
  ReleaseAtDesc = 'releaseAt_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

/** System Scheduled Release Status */
export enum Graphcms_ScheduledReleaseStatus {
  Completed = 'COMPLETED',
  Failed = 'FAILED',
  InProgress = 'IN_PROGRESS',
  Pending = 'PENDING'
}

export type Graphcms_ScheduledReleaseUpdateInput = {
  description?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  title?: InputMaybe<Scalars['String']>;
};

/** Identifies documents */
export type Graphcms_ScheduledReleaseWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<Graphcms_ScheduledReleaseWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<Graphcms_ScheduledReleaseWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<Graphcms_ScheduledReleaseWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  createdBy?: InputMaybe<Graphcms_UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isImplicit?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isImplicit_not?: InputMaybe<Scalars['Boolean']>;
  operations_every?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  operations_none?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  operations_some?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  publishedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  publishedBy?: InputMaybe<Graphcms_UserWhereInput>;
  releaseAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  releaseAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  releaseAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  releaseAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  releaseAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  releaseAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  releaseAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  releaseAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  status?: InputMaybe<Graphcms_ScheduledReleaseStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<Graphcms_ScheduledReleaseStatus>>;
  /** All values that are not equal to given value. */
  status_not?: InputMaybe<Graphcms_ScheduledReleaseStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<Graphcms_ScheduledReleaseStatus>>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  updatedBy?: InputMaybe<Graphcms_UserWhereInput>;
};

/** References ScheduledRelease record uniquely */
export type Graphcms_ScheduledReleaseWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Graphcms_Seo = Graphcms_Node & {
  __typename?: 'graphcms_Seo';
  /** The time the document was created */
  createdAt: Scalars['graphcms_DateTime'];
  /** User that created this document */
  createdBy?: Maybe<Graphcms_User>;
  /** Create a custom meta description */
  description?: Maybe<Scalars['String']>;
  /** Get the document in other stages */
  documentInStages: Array<Graphcms_Seo>;
  /** List of Seo versions */
  history: Array<Graphcms_Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** Select a custom OG image (the most common size is usually 1280x720) */
  image?: Maybe<Graphcms_Asset>;
  /** Select your focus keywords */
  keywords: Array<Scalars['String']>;
  /** What pages and blog posts would this SEO apply to? */
  parent?: Maybe<Graphcms_SeoParent>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['graphcms_DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<Graphcms_User>;
  scheduledIn: Array<Graphcms_ScheduledOperation>;
  /** System stage field */
  stage: Graphcms_Stage;
  /** Create a custom meta title */
  title?: Maybe<Scalars['String']>;
  /** The time the document was updated */
  updatedAt: Scalars['graphcms_DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<Graphcms_User>;
};


export type Graphcms_SeoCreatedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


export type Graphcms_SeoDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Graphcms_Stage>;
};


export type Graphcms_SeoHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Graphcms_Stage>;
};


export type Graphcms_SeoImageArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


export type Graphcms_SeoParentArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


export type Graphcms_SeoPublishedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


export type Graphcms_SeoScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Graphcms_Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
};


export type Graphcms_SeoUpdatedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};

export type Graphcms_SeoConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<Graphcms_ConnectPositionInput>;
  /** Document to connect */
  where: Graphcms_SeoWhereUniqueInput;
};

/** A connection to a list of items. */
export type Graphcms_SeoConnection = {
  __typename?: 'graphcms_SeoConnection';
  aggregate: Graphcms_Aggregate;
  /** A list of edges. */
  edges: Array<Graphcms_SeoEdge>;
  /** Information to aid in pagination. */
  pageInfo: Graphcms_PageInfo;
};

export type Graphcms_SeoCreateInput = {
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  description?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Graphcms_AssetCreateOneInlineInput>;
  keywords?: InputMaybe<Array<Scalars['String']>>;
  parent?: InputMaybe<Graphcms_SeoParentCreateOneInlineInput>;
  title?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
};

export type Graphcms_SeoCreateManyInlineInput = {
  /** Connect multiple existing Seo documents */
  connect?: InputMaybe<Array<Graphcms_SeoWhereUniqueInput>>;
  /** Create and connect multiple existing Seo documents */
  create?: InputMaybe<Array<Graphcms_SeoCreateInput>>;
};

export type Graphcms_SeoCreateOneInlineInput = {
  /** Connect one existing Seo document */
  connect?: InputMaybe<Graphcms_SeoWhereUniqueInput>;
  /** Create and connect one Seo document */
  create?: InputMaybe<Graphcms_SeoCreateInput>;
};

/** An edge in a connection. */
export type Graphcms_SeoEdge = {
  __typename?: 'graphcms_SeoEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Graphcms_Seo;
};

/** Identifies documents */
export type Graphcms_SeoManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<Graphcms_SeoWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<Graphcms_SeoWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<Graphcms_SeoWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  createdBy?: InputMaybe<Graphcms_UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<Graphcms_AssetWhereInput>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  keywords?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  keywords_contains_all?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  keywords_contains_none?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  keywords_contains_some?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  keywords_not?: InputMaybe<Array<Scalars['String']>>;
  publishedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  publishedBy?: InputMaybe<Graphcms_UserWhereInput>;
  scheduledIn_every?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  updatedBy?: InputMaybe<Graphcms_UserWhereInput>;
};

export enum Graphcms_SeoOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  KeywordsAsc = 'keywords_ASC',
  KeywordsDesc = 'keywords_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type Graphcms_SeoParent = Graphcms_Page | Graphcms_Post;

export type Graphcms_SeoParentCreateInput = {
  Page?: InputMaybe<Graphcms_PageCreateInput>;
  Post?: InputMaybe<Graphcms_PostCreateInput>;
};

export type Graphcms_SeoParentCreateOneInlineInput = {
  /** Connect one existing SeoParent document */
  connect?: InputMaybe<Graphcms_SeoParentWhereUniqueInput>;
  /** Create and connect one SeoParent document */
  create?: InputMaybe<Graphcms_SeoParentCreateInput>;
};

export type Graphcms_SeoParentUpdateOneInlineInput = {
  /** Connect existing SeoParent document */
  connect?: InputMaybe<Graphcms_SeoParentWhereUniqueInput>;
  /** Create and connect one SeoParent document */
  create?: InputMaybe<Graphcms_SeoParentCreateInput>;
  /** Delete currently connected SeoParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SeoParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SeoParent document */
  update?: InputMaybe<Graphcms_SeoParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SeoParent document */
  upsert?: InputMaybe<Graphcms_SeoParentUpsertWithNestedWhereUniqueInput>;
};

export type Graphcms_SeoParentUpdateWithNestedWhereUniqueInput = {
  Page?: InputMaybe<Graphcms_PageUpdateWithNestedWhereUniqueInput>;
  Post?: InputMaybe<Graphcms_PostUpdateWithNestedWhereUniqueInput>;
};

export type Graphcms_SeoParentUpsertWithNestedWhereUniqueInput = {
  Page?: InputMaybe<Graphcms_PageUpsertWithNestedWhereUniqueInput>;
  Post?: InputMaybe<Graphcms_PostUpsertWithNestedWhereUniqueInput>;
};

export type Graphcms_SeoParentWhereUniqueInput = {
  Page?: InputMaybe<Graphcms_PageWhereUniqueInput>;
  Post?: InputMaybe<Graphcms_PostWhereUniqueInput>;
};

export type Graphcms_SeoUpdateInput = {
  description?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Graphcms_AssetUpdateOneInlineInput>;
  keywords?: InputMaybe<Array<Scalars['String']>>;
  parent?: InputMaybe<Graphcms_SeoParentUpdateOneInlineInput>;
  title?: InputMaybe<Scalars['String']>;
};

export type Graphcms_SeoUpdateManyInlineInput = {
  /** Connect multiple existing Seo documents */
  connect?: InputMaybe<Array<Graphcms_SeoConnectInput>>;
  /** Create and connect multiple Seo documents */
  create?: InputMaybe<Array<Graphcms_SeoCreateInput>>;
  /** Delete multiple Seo documents */
  delete?: InputMaybe<Array<Graphcms_SeoWhereUniqueInput>>;
  /** Disconnect multiple Seo documents */
  disconnect?: InputMaybe<Array<Graphcms_SeoWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Seo documents */
  set?: InputMaybe<Array<Graphcms_SeoWhereUniqueInput>>;
  /** Update multiple Seo documents */
  update?: InputMaybe<Array<Graphcms_SeoUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Seo documents */
  upsert?: InputMaybe<Array<Graphcms_SeoUpsertWithNestedWhereUniqueInput>>;
};

export type Graphcms_SeoUpdateManyInput = {
  description?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Array<Scalars['String']>>;
  title?: InputMaybe<Scalars['String']>;
};

export type Graphcms_SeoUpdateOneInlineInput = {
  /** Connect existing Seo document */
  connect?: InputMaybe<Graphcms_SeoWhereUniqueInput>;
  /** Create and connect one Seo document */
  create?: InputMaybe<Graphcms_SeoCreateInput>;
  /** Delete currently connected Seo document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Seo document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Seo document */
  update?: InputMaybe<Graphcms_SeoUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Seo document */
  upsert?: InputMaybe<Graphcms_SeoUpsertWithNestedWhereUniqueInput>;
};

export type Graphcms_SeoUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: Graphcms_SeoUpdateInput;
  /** Unique document search */
  where: Graphcms_SeoWhereUniqueInput;
};

export type Graphcms_SeoUpsertInput = {
  /** Create document if it didn't exist */
  create: Graphcms_SeoCreateInput;
  /** Update document if it exists */
  update: Graphcms_SeoUpdateInput;
};

export type Graphcms_SeoUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: Graphcms_SeoUpsertInput;
  /** Unique document search */
  where: Graphcms_SeoWhereUniqueInput;
};

/** Identifies documents */
export type Graphcms_SeoWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<Graphcms_SeoWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<Graphcms_SeoWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<Graphcms_SeoWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  createdBy?: InputMaybe<Graphcms_UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<Graphcms_AssetWhereInput>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  keywords?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  keywords_contains_all?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  keywords_contains_none?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  keywords_contains_some?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  keywords_not?: InputMaybe<Array<Scalars['String']>>;
  publishedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  publishedBy?: InputMaybe<Graphcms_UserWhereInput>;
  scheduledIn_every?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  updatedBy?: InputMaybe<Graphcms_UserWhereInput>;
};

/** References Seo record uniquely */
export type Graphcms_SeoWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Graphcms_ShowcaseCard = Graphcms_Node & {
  __typename?: 'graphcms_ShowcaseCard';
  /** The time the document was created */
  createdAt: Scalars['graphcms_DateTime'];
  /** User that created this document */
  createdBy?: Maybe<Graphcms_User>;
  /** Get the document in other stages */
  documentInStages: Array<Graphcms_ShowcaseCard>;
  /** List of ShowcaseCard versions */
  history: Array<Graphcms_Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  image: Graphcms_Asset;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['graphcms_DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<Graphcms_User>;
  scheduledIn: Array<Graphcms_ScheduledOperation>;
  /** System stage field */
  stage: Graphcms_Stage;
  text: Scalars['String'];
  /** The time the document was updated */
  updatedAt: Scalars['graphcms_DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<Graphcms_User>;
  url: Scalars['String'];
};


export type Graphcms_ShowcaseCardCreatedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


export type Graphcms_ShowcaseCardDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Graphcms_Stage>;
};


export type Graphcms_ShowcaseCardHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Graphcms_Stage>;
};


export type Graphcms_ShowcaseCardImageArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


export type Graphcms_ShowcaseCardPublishedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};


export type Graphcms_ShowcaseCardScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Graphcms_Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
};


export type Graphcms_ShowcaseCardUpdatedByArgs = {
  locales?: InputMaybe<Array<Graphcms_Locale>>;
};

export type Graphcms_ShowcaseCardConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<Graphcms_ConnectPositionInput>;
  /** Document to connect */
  where: Graphcms_ShowcaseCardWhereUniqueInput;
};

/** A connection to a list of items. */
export type Graphcms_ShowcaseCardConnection = {
  __typename?: 'graphcms_ShowcaseCardConnection';
  aggregate: Graphcms_Aggregate;
  /** A list of edges. */
  edges: Array<Graphcms_ShowcaseCardEdge>;
  /** Information to aid in pagination. */
  pageInfo: Graphcms_PageInfo;
};

export type Graphcms_ShowcaseCardCreateInput = {
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  image: Graphcms_AssetCreateOneInlineInput;
  text: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  url: Scalars['String'];
};

export type Graphcms_ShowcaseCardCreateManyInlineInput = {
  /** Connect multiple existing ShowcaseCard documents */
  connect?: InputMaybe<Array<Graphcms_ShowcaseCardWhereUniqueInput>>;
  /** Create and connect multiple existing ShowcaseCard documents */
  create?: InputMaybe<Array<Graphcms_ShowcaseCardCreateInput>>;
};

/** An edge in a connection. */
export type Graphcms_ShowcaseCardEdge = {
  __typename?: 'graphcms_ShowcaseCardEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Graphcms_ShowcaseCard;
};

/** Identifies documents */
export type Graphcms_ShowcaseCardManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<Graphcms_ShowcaseCardWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<Graphcms_ShowcaseCardWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<Graphcms_ShowcaseCardWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  createdBy?: InputMaybe<Graphcms_UserWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<Graphcms_AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  publishedBy?: InputMaybe<Graphcms_UserWhereInput>;
  scheduledIn_every?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  text?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  text_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  text_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  text_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  text_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  text_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  text_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  text_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  text_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  text_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  updatedBy?: InputMaybe<Graphcms_UserWhereInput>;
  url?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
};

export enum Graphcms_ShowcaseCardOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TextAsc = 'text_ASC',
  TextDesc = 'text_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC'
}

export type Graphcms_ShowcaseCardUpdateInput = {
  image?: InputMaybe<Graphcms_AssetUpdateOneInlineInput>;
  text?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
};

export type Graphcms_ShowcaseCardUpdateManyInlineInput = {
  /** Connect multiple existing ShowcaseCard documents */
  connect?: InputMaybe<Array<Graphcms_ShowcaseCardConnectInput>>;
  /** Create and connect multiple ShowcaseCard documents */
  create?: InputMaybe<Array<Graphcms_ShowcaseCardCreateInput>>;
  /** Delete multiple ShowcaseCard documents */
  delete?: InputMaybe<Array<Graphcms_ShowcaseCardWhereUniqueInput>>;
  /** Disconnect multiple ShowcaseCard documents */
  disconnect?: InputMaybe<Array<Graphcms_ShowcaseCardWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ShowcaseCard documents */
  set?: InputMaybe<Array<Graphcms_ShowcaseCardWhereUniqueInput>>;
  /** Update multiple ShowcaseCard documents */
  update?: InputMaybe<Array<Graphcms_ShowcaseCardUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ShowcaseCard documents */
  upsert?: InputMaybe<Array<Graphcms_ShowcaseCardUpsertWithNestedWhereUniqueInput>>;
};

export type Graphcms_ShowcaseCardUpdateManyInput = {
  url?: InputMaybe<Scalars['String']>;
};

export type Graphcms_ShowcaseCardUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: Graphcms_ShowcaseCardUpdateInput;
  /** Unique document search */
  where: Graphcms_ShowcaseCardWhereUniqueInput;
};

export type Graphcms_ShowcaseCardUpsertInput = {
  /** Create document if it didn't exist */
  create: Graphcms_ShowcaseCardCreateInput;
  /** Update document if it exists */
  update: Graphcms_ShowcaseCardUpdateInput;
};

export type Graphcms_ShowcaseCardUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: Graphcms_ShowcaseCardUpsertInput;
  /** Unique document search */
  where: Graphcms_ShowcaseCardWhereUniqueInput;
};

/** Identifies documents */
export type Graphcms_ShowcaseCardWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<Graphcms_ShowcaseCardWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<Graphcms_ShowcaseCardWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<Graphcms_ShowcaseCardWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  createdBy?: InputMaybe<Graphcms_UserWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<Graphcms_AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  publishedBy?: InputMaybe<Graphcms_UserWhereInput>;
  scheduledIn_every?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<Graphcms_ScheduledOperationWhereInput>;
  text?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  text_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  text_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  text_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  text_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  text_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  text_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  text_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  text_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  text_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  updatedBy?: InputMaybe<Graphcms_UserWhereInput>;
  url?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
};

/** References ShowcaseCard record uniquely */
export type Graphcms_ShowcaseCardWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  text?: InputMaybe<Scalars['String']>;
};

/** Stage system enumeration */
export enum Graphcms_Stage {
  /** The Draft is the default stage for all your content. */
  Draft = 'DRAFT',
  /** The Published stage is where you can publish your content to. */
  Published = 'PUBLISHED'
}

export enum Graphcms_SystemDateTimeFieldVariation {
  Base = 'BASE',
  Combined = 'COMBINED',
  Localization = 'LOCALIZATION'
}

/** User system model */
export type Graphcms_User = Graphcms_Node & {
  __typename?: 'graphcms_User';
  /** The time the document was created */
  createdAt: Scalars['graphcms_DateTime'];
  /** Get the document in other stages */
  documentInStages: Array<Graphcms_User>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** Flag to determine if user is active or not */
  isActive: Scalars['Boolean'];
  /** User Kind. Can be either MEMBER, PAT or PUBLIC */
  kind: Graphcms_UserKind;
  /** The username */
  name: Scalars['String'];
  /** Profile Picture url */
  picture?: Maybe<Scalars['String']>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['graphcms_DateTime']>;
  /** System stage field */
  stage: Graphcms_Stage;
  /** The time the document was updated */
  updatedAt: Scalars['graphcms_DateTime'];
};


/** User system model */
export type Graphcms_UserDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Graphcms_Stage>;
};

/** A connection to a list of items. */
export type Graphcms_UserConnection = {
  __typename?: 'graphcms_UserConnection';
  aggregate: Graphcms_Aggregate;
  /** A list of edges. */
  edges: Array<Graphcms_UserEdge>;
  /** Information to aid in pagination. */
  pageInfo: Graphcms_PageInfo;
};

/** An edge in a connection. */
export type Graphcms_UserEdge = {
  __typename?: 'graphcms_UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Graphcms_User;
};

/** System User Kind */
export enum Graphcms_UserKind {
  Member = 'MEMBER',
  Pat = 'PAT',
  Public = 'PUBLIC',
  Webhook = 'WEBHOOK'
}

export enum Graphcms_UserOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsActiveAsc = 'isActive_ASC',
  IsActiveDesc = 'isActive_DESC',
  KindAsc = 'kind_ASC',
  KindDesc = 'kind_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PictureAsc = 'picture_ASC',
  PictureDesc = 'picture_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

/** Identifies documents */
export type Graphcms_UserWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<Graphcms_UserWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<Graphcms_UserWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<Graphcms_UserWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  kind?: InputMaybe<Graphcms_UserKind>;
  /** All values that are contained in given list. */
  kind_in?: InputMaybe<Array<Graphcms_UserKind>>;
  /** All values that are not equal to given value. */
  kind_not?: InputMaybe<Graphcms_UserKind>;
  /** All values that are not contained in given list. */
  kind_not_in?: InputMaybe<Array<Graphcms_UserKind>>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  picture_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  picture_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  picture_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not equal to given value. */
  picture_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  picture_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  picture_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  picture_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values not starting with the given string. */
  picture_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  picture_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  updatedAt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['graphcms_DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['graphcms_DateTime']>>;
};

/** References User record uniquely */
export type Graphcms_UserWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Graphcms_Version = {
  __typename?: 'graphcms_Version';
  createdAt: Scalars['graphcms_DateTime'];
  id: Scalars['ID'];
  revision: Scalars['Int'];
  stage: Graphcms_Stage;
};

export type Graphcms_VersionWhereInput = {
  id: Scalars['ID'];
  revision: Scalars['Int'];
  stage: Graphcms_Stage;
};

/** mutation root */
export type Mutation_Root = {
  __typename?: 'mutation_root';
  github?: Maybe<Gh_Mutation>;
  graphcms?: Maybe<Graphcms_Mutation>;
};

export type Query_Root = {
  __typename?: 'query_root';
  github?: Maybe<Gh_Query>;
  graphcms?: Maybe<Graphcms_Query>;
};

export type CategoryQueryVariables = Exact<{
  category: Scalars['String'];
}>;


export type CategoryQuery = { __typename?: 'query_root', graphcms?: { __typename?: 'graphcms_Query', blogCategory?: { __typename?: 'graphcms_BlogCategory', name: string } | null } | null };

export type CategoriesQueryVariables = Exact<{ [key: string]: never; }>;


export type CategoriesQuery = { __typename?: 'query_root', graphcms?: { __typename?: 'graphcms_Query', blogCategories: Array<{ __typename?: 'graphcms_BlogCategory', slug: string, name: string }> } | null };

export type PostsExcerptsQueryVariables = Exact<{
  postsPerPage: Scalars['Int'];
  skip: Scalars['Int'];
  category: Scalars['String'];
}>;


export type PostsExcerptsQuery = { __typename?: 'query_root', graphcms?: { __typename?: 'graphcms_Query', posts: Array<{ __typename?: 'graphcms_Post', excerpt?: string | null, slug: string, title: string, author?: { __typename?: 'graphcms_Author', name: string, twitterHandle?: string | null, picture?: { __typename?: 'graphcms_Asset', handle: string, height?: number | null, width?: number | null } | null } | null, coverImage?: { __typename?: 'graphcms_Asset', width?: number | null, height?: number | null, handle: string } | null }>, postsConnection: { __typename?: 'graphcms_PostConnection', aggregate: { __typename?: 'graphcms_Aggregate', count: number } } } | null };

export type PostBySlugQueryVariables = Exact<{
  slug: Scalars['String'];
}>;


export type PostBySlugQuery = { __typename?: 'query_root', graphcms?: { __typename?: 'graphcms_Query', post?: { __typename?: 'graphcms_Post', date: any, excerpt?: string | null, slug: string, title: string, author?: { __typename?: 'graphcms_Author', name: string, twitterHandle?: string | null, picture?: { __typename?: 'graphcms_Asset', handle: string, height?: number | null, width?: number | null } | null } | null, content: { __typename?: 'graphcms_RichText', raw: any }, coverImage?: { __typename?: 'graphcms_Asset', width?: number | null, height?: number | null, handle: string } | null } | null } | null };

export type PostAuthorFragment = { __typename?: 'graphcms_Author', name: string, twitterHandle?: string | null, picture?: { __typename?: 'graphcms_Asset', handle: string, height?: number | null, width?: number | null } | null };

export type PostContentFragment = { __typename?: 'graphcms_RichText', raw: any };

export type CoverImageFragment = { __typename?: 'graphcms_Asset', width?: number | null, height?: number | null, handle: string };

export type GitHubUserQueryVariables = Exact<{
  username: Scalars['String'];
}>;


export type GitHubUserQuery = { __typename?: 'query_root', github?: { __typename?: 'gh_Query', user?: { __typename?: 'gh_User', login: string, name?: string | null, bio?: string | null, avatarUrl: any, url: any, company?: string | null, location?: string | null, followers: { __typename?: 'gh_FollowerConnection', totalCount: number }, following: { __typename?: 'gh_FollowingConnection', totalCount: number }, contributionsCollection: { __typename?: 'gh_ContributionsCollection', contributionYears: Array<number>, totalCommitContributions: number, totalIssueContributions: number, totalPullRequestContributions: number, contributionCalendar: { __typename?: 'gh_ContributionCalendar', totalContributions: number, weeks: Array<{ __typename?: 'gh_ContributionCalendarWeek', contributionDays: Array<{ __typename?: 'gh_ContributionCalendarDay', contributionLevel: Gh_ContributionLevel, contributionCount: number }> }> } }, repositories: { __typename?: 'gh_RepositoryConnection', totalCount: number, nodes?: Array<{ __typename?: 'gh_Repository', name: string, description?: string | null, url: any, stargazers: { __typename?: 'gh_StargazerConnection', totalCount: number }, watchers: { __typename?: 'gh_UserConnection', totalCount: number }, forks: { __typename?: 'gh_RepositoryConnection', totalCount: number } } | null> | null } } | null } | null };

export type GithubUserFragment = { __typename?: 'gh_User', login: string, name?: string | null, bio?: string | null, avatarUrl: any, url: any, company?: string | null, location?: string | null, followers: { __typename?: 'gh_FollowerConnection', totalCount: number }, following: { __typename?: 'gh_FollowingConnection', totalCount: number }, contributionsCollection: { __typename?: 'gh_ContributionsCollection', contributionYears: Array<number>, totalCommitContributions: number, totalIssueContributions: number, totalPullRequestContributions: number, contributionCalendar: { __typename?: 'gh_ContributionCalendar', totalContributions: number, weeks: Array<{ __typename?: 'gh_ContributionCalendarWeek', contributionDays: Array<{ __typename?: 'gh_ContributionCalendarDay', contributionLevel: Gh_ContributionLevel, contributionCount: number }> }> } }, repositories: { __typename?: 'gh_RepositoryConnection', totalCount: number, nodes?: Array<{ __typename?: 'gh_Repository', name: string, description?: string | null, url: any, stargazers: { __typename?: 'gh_StargazerConnection', totalCount: number }, watchers: { __typename?: 'gh_UserConnection', totalCount: number }, forks: { __typename?: 'gh_RepositoryConnection', totalCount: number } } | null> | null } };

export type ReposFragment = { __typename?: 'gh_RepositoryConnection', totalCount: number, nodes?: Array<{ __typename?: 'gh_Repository', name: string, description?: string | null, url: any, stargazers: { __typename?: 'gh_StargazerConnection', totalCount: number }, watchers: { __typename?: 'gh_UserConnection', totalCount: number }, forks: { __typename?: 'gh_RepositoryConnection', totalCount: number } } | null> | null };

export type RepoFragment = { __typename?: 'gh_Repository', name: string, description?: string | null, url: any, stargazers: { __typename?: 'gh_StargazerConnection', totalCount: number }, watchers: { __typename?: 'gh_UserConnection', totalCount: number }, forks: { __typename?: 'gh_RepositoryConnection', totalCount: number } };

export type GetNavigationQueryVariables = Exact<{ [key: string]: never; }>;


export type GetNavigationQuery = { __typename?: 'query_root', graphcms?: { __typename?: 'graphcms_Query', navigationLinks: Array<{ __typename?: 'graphcms_NavigationLink', url: string, linkText: string }> } | null };

export const PostAuthor = gql`
    fragment PostAuthor on graphcms_Author {
  name
  twitterHandle
  picture {
    handle
    height
    width
  }
}
    `;
export const PostContent = gql`
    fragment PostContent on graphcms_RichText {
  raw
}
    `;
export const CoverImage = gql`
    fragment CoverImage on graphcms_Asset {
  width
  height
  handle
}
    `;
export const Repo = gql`
    fragment Repo on gh_Repository {
  name
  description
  url
  stargazers {
    totalCount
  }
  watchers {
    totalCount
  }
  forks {
    totalCount
  }
}
    `;
export const Repos = gql`
    fragment Repos on gh_RepositoryConnection {
  totalCount
  nodes {
    ...Repo
  }
}
    ${Repo}`;
export const GithubUser = gql`
    fragment GithubUser on gh_User {
  login
  name
  bio
  avatarUrl
  url
  company
  location
  followers {
    totalCount
  }
  following {
    totalCount
  }
  contributionsCollection {
    contributionCalendar {
      weeks {
        contributionDays {
          contributionLevel
          contributionCount
        }
      }
      totalContributions
    }
    contributionYears
    totalCommitContributions
    totalIssueContributions
    totalPullRequestContributions
  }
  repositories(first: 100) {
    ...Repos
  }
}
    ${Repos}`;
export const Category = gql`
    query Category($category: String!) {
  graphcms {
    blogCategory(where: {slug: $category}) {
      name
    }
  }
}
    `;
export const Categories = gql`
    query Categories {
  graphcms {
    blogCategories(orderBy: name_ASC) {
      slug
      name
    }
  }
}
    `;
export const PostsExcerpts = gql`
    query PostsExcerpts($postsPerPage: Int!, $skip: Int!, $category: String!) {
  graphcms {
    posts(
      first: $postsPerPage
      stage: PUBLISHED
      skip: $skip
      orderBy: date_DESC
      where: {categories_some: {slug_starts_with: $category}}
    ) {
      author {
        ...PostAuthor
      }
      excerpt
      slug
      title
      coverImage {
        ...CoverImage
      }
    }
    postsConnection(
      stage: PUBLISHED
      where: {categories_some: {slug_starts_with: $category}}
    ) {
      aggregate {
        count
      }
    }
  }
}
    ${PostAuthor}
${CoverImage}`;
export const PostBySlug = gql`
    query PostBySlug($slug: String!) {
  graphcms {
    post(where: {slug: $slug}, stage: PUBLISHED) {
      author {
        ...PostAuthor
      }
      content {
        ...PostContent
      }
      coverImage {
        ...CoverImage
      }
      date
      excerpt
      slug
      title
    }
  }
}
    ${PostAuthor}
${PostContent}
${CoverImage}`;
export const GitHubUser = gql`
    query gitHubUser($username: String!) {
  github {
    user(login: $username) {
      ...GithubUser
    }
  }
}
    ${GithubUser}`;
export const GetNavigation = gql`
    query GetNavigation {
  graphcms {
    navigationLinks {
      url
      linkText
    }
  }
}
    `;

      export interface PossibleTypesResultData {
        possibleTypes: {
          [key: string]: string[]
        }
      }
      const result: PossibleTypesResultData = {
  "possibleTypes": {
    "gh_Actor": [
      "gh_Bot",
      "gh_EnterpriseUserAccount",
      "gh_Mannequin",
      "gh_Organization",
      "gh_User"
    ],
    "gh_Assignable": [
      "gh_Issue",
      "gh_PullRequest"
    ],
    "gh_Assignee": [
      "gh_Bot",
      "gh_Mannequin",
      "gh_Organization",
      "gh_User"
    ],
    "gh_AuditEntry": [
      "gh_MembersCanDeleteReposClearAuditEntry",
      "gh_MembersCanDeleteReposDisableAuditEntry",
      "gh_MembersCanDeleteReposEnableAuditEntry",
      "gh_OauthApplicationCreateAuditEntry",
      "gh_OrgAddBillingManagerAuditEntry",
      "gh_OrgAddMemberAuditEntry",
      "gh_OrgBlockUserAuditEntry",
      "gh_OrgConfigDisableCollaboratorsOnlyAuditEntry",
      "gh_OrgConfigEnableCollaboratorsOnlyAuditEntry",
      "gh_OrgCreateAuditEntry",
      "gh_OrgDisableOauthAppRestrictionsAuditEntry",
      "gh_OrgDisableSamlAuditEntry",
      "gh_OrgDisableTwoFactorRequirementAuditEntry",
      "gh_OrgEnableOauthAppRestrictionsAuditEntry",
      "gh_OrgEnableSamlAuditEntry",
      "gh_OrgEnableTwoFactorRequirementAuditEntry",
      "gh_OrgInviteMemberAuditEntry",
      "gh_OrgInviteToBusinessAuditEntry",
      "gh_OrgOauthAppAccessApprovedAuditEntry",
      "gh_OrgOauthAppAccessDeniedAuditEntry",
      "gh_OrgOauthAppAccessRequestedAuditEntry",
      "gh_OrgRemoveBillingManagerAuditEntry",
      "gh_OrgRemoveMemberAuditEntry",
      "gh_OrgRemoveOutsideCollaboratorAuditEntry",
      "gh_OrgRestoreMemberAuditEntry",
      "gh_OrgUnblockUserAuditEntry",
      "gh_OrgUpdateDefaultRepositoryPermissionAuditEntry",
      "gh_OrgUpdateMemberAuditEntry",
      "gh_OrgUpdateMemberRepositoryCreationPermissionAuditEntry",
      "gh_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry",
      "gh_PrivateRepositoryForkingDisableAuditEntry",
      "gh_PrivateRepositoryForkingEnableAuditEntry",
      "gh_RepoAccessAuditEntry",
      "gh_RepoAddMemberAuditEntry",
      "gh_RepoAddTopicAuditEntry",
      "gh_RepoArchivedAuditEntry",
      "gh_RepoChangeMergeSettingAuditEntry",
      "gh_RepoConfigDisableAnonymousGitAccessAuditEntry",
      "gh_RepoConfigDisableCollaboratorsOnlyAuditEntry",
      "gh_RepoConfigDisableContributorsOnlyAuditEntry",
      "gh_RepoConfigDisableSockpuppetDisallowedAuditEntry",
      "gh_RepoConfigEnableAnonymousGitAccessAuditEntry",
      "gh_RepoConfigEnableCollaboratorsOnlyAuditEntry",
      "gh_RepoConfigEnableContributorsOnlyAuditEntry",
      "gh_RepoConfigEnableSockpuppetDisallowedAuditEntry",
      "gh_RepoConfigLockAnonymousGitAccessAuditEntry",
      "gh_RepoConfigUnlockAnonymousGitAccessAuditEntry",
      "gh_RepoCreateAuditEntry",
      "gh_RepoDestroyAuditEntry",
      "gh_RepoRemoveMemberAuditEntry",
      "gh_RepoRemoveTopicAuditEntry",
      "gh_RepositoryVisibilityChangeDisableAuditEntry",
      "gh_RepositoryVisibilityChangeEnableAuditEntry",
      "gh_TeamAddMemberAuditEntry",
      "gh_TeamAddRepositoryAuditEntry",
      "gh_TeamChangeParentTeamAuditEntry",
      "gh_TeamRemoveMemberAuditEntry",
      "gh_TeamRemoveRepositoryAuditEntry"
    ],
    "gh_AuditEntryActor": [
      "gh_Bot",
      "gh_Organization",
      "gh_User"
    ],
    "gh_BranchActorAllowanceActor": [
      "gh_Team",
      "gh_User"
    ],
    "gh_Closable": [
      "gh_Issue",
      "gh_Milestone",
      "gh_Project",
      "gh_ProjectNext",
      "gh_PullRequest"
    ],
    "gh_Closer": [
      "gh_Commit",
      "gh_PullRequest"
    ],
    "gh_Comment": [
      "gh_CommitComment",
      "gh_Discussion",
      "gh_DiscussionComment",
      "gh_GistComment",
      "gh_Issue",
      "gh_IssueComment",
      "gh_PullRequest",
      "gh_PullRequestReview",
      "gh_PullRequestReviewComment",
      "gh_TeamDiscussion",
      "gh_TeamDiscussionComment"
    ],
    "gh_Contribution": [
      "gh_CreatedCommitContribution",
      "gh_CreatedIssueContribution",
      "gh_CreatedPullRequestContribution",
      "gh_CreatedPullRequestReviewContribution",
      "gh_CreatedRepositoryContribution",
      "gh_JoinedGitHubContribution",
      "gh_RestrictedContribution"
    ],
    "gh_CreatedIssueOrRestrictedContribution": [
      "gh_CreatedIssueContribution",
      "gh_RestrictedContribution"
    ],
    "gh_CreatedPullRequestOrRestrictedContribution": [
      "gh_CreatedPullRequestContribution",
      "gh_RestrictedContribution"
    ],
    "gh_CreatedRepositoryOrRestrictedContribution": [
      "gh_CreatedRepositoryContribution",
      "gh_RestrictedContribution"
    ],
    "gh_Deletable": [
      "gh_CommitComment",
      "gh_Discussion",
      "gh_DiscussionComment",
      "gh_GistComment",
      "gh_IssueComment",
      "gh_PullRequestReview",
      "gh_PullRequestReviewComment",
      "gh_TeamDiscussion",
      "gh_TeamDiscussionComment"
    ],
    "gh_DeploymentReviewer": [
      "gh_Team",
      "gh_User"
    ],
    "gh_EnterpriseAuditEntryData": [
      "gh_MembersCanDeleteReposClearAuditEntry",
      "gh_MembersCanDeleteReposDisableAuditEntry",
      "gh_MembersCanDeleteReposEnableAuditEntry",
      "gh_OrgInviteToBusinessAuditEntry",
      "gh_PrivateRepositoryForkingDisableAuditEntry",
      "gh_PrivateRepositoryForkingEnableAuditEntry",
      "gh_RepositoryVisibilityChangeDisableAuditEntry",
      "gh_RepositoryVisibilityChangeEnableAuditEntry"
    ],
    "gh_EnterpriseMember": [
      "gh_EnterpriseUserAccount",
      "gh_User"
    ],
    "gh_GitObject": [
      "gh_Blob",
      "gh_Commit",
      "gh_Tag",
      "gh_Tree"
    ],
    "gh_GitSignature": [
      "gh_GpgSignature",
      "gh_SmimeSignature",
      "gh_UnknownSignature"
    ],
    "gh_HovercardContext": [
      "gh_GenericHovercardContext",
      "gh_OrganizationTeamsHovercardContext",
      "gh_OrganizationsHovercardContext",
      "gh_ReviewStatusHovercardContext",
      "gh_ViewerHovercardContext"
    ],
    "gh_IpAllowListOwner": [
      "gh_App",
      "gh_Enterprise",
      "gh_Organization"
    ],
    "gh_IssueOrPullRequest": [
      "gh_Issue",
      "gh_PullRequest"
    ],
    "gh_IssueTimelineItem": [
      "gh_AssignedEvent",
      "gh_ClosedEvent",
      "gh_Commit",
      "gh_CrossReferencedEvent",
      "gh_DemilestonedEvent",
      "gh_IssueComment",
      "gh_LabeledEvent",
      "gh_LockedEvent",
      "gh_MilestonedEvent",
      "gh_ReferencedEvent",
      "gh_RenamedTitleEvent",
      "gh_ReopenedEvent",
      "gh_SubscribedEvent",
      "gh_TransferredEvent",
      "gh_UnassignedEvent",
      "gh_UnlabeledEvent",
      "gh_UnlockedEvent",
      "gh_UnsubscribedEvent",
      "gh_UserBlockedEvent"
    ],
    "gh_IssueTimelineItems": [
      "gh_AddedToProjectEvent",
      "gh_AssignedEvent",
      "gh_ClosedEvent",
      "gh_CommentDeletedEvent",
      "gh_ConnectedEvent",
      "gh_ConvertedNoteToIssueEvent",
      "gh_ConvertedToDiscussionEvent",
      "gh_CrossReferencedEvent",
      "gh_DemilestonedEvent",
      "gh_DisconnectedEvent",
      "gh_IssueComment",
      "gh_LabeledEvent",
      "gh_LockedEvent",
      "gh_MarkedAsDuplicateEvent",
      "gh_MentionedEvent",
      "gh_MilestonedEvent",
      "gh_MovedColumnsInProjectEvent",
      "gh_PinnedEvent",
      "gh_ReferencedEvent",
      "gh_RemovedFromProjectEvent",
      "gh_RenamedTitleEvent",
      "gh_ReopenedEvent",
      "gh_SubscribedEvent",
      "gh_TransferredEvent",
      "gh_UnassignedEvent",
      "gh_UnlabeledEvent",
      "gh_UnlockedEvent",
      "gh_UnmarkedAsDuplicateEvent",
      "gh_UnpinnedEvent",
      "gh_UnsubscribedEvent",
      "gh_UserBlockedEvent"
    ],
    "gh_Labelable": [
      "gh_Discussion",
      "gh_Issue",
      "gh_PullRequest"
    ],
    "gh_Lockable": [
      "gh_Discussion",
      "gh_Issue",
      "gh_PullRequest"
    ],
    "gh_MemberStatusable": [
      "gh_Organization",
      "gh_Team"
    ],
    "gh_Migration": [
      "gh_RepositoryMigration"
    ],
    "gh_MilestoneItem": [
      "gh_Issue",
      "gh_PullRequest"
    ],
    "gh_Minimizable": [
      "gh_CommitComment",
      "gh_DiscussionComment",
      "gh_GistComment",
      "gh_IssueComment",
      "gh_PullRequestReviewComment"
    ],
    "gh_Node": [
      "gh_AddedToProjectEvent",
      "gh_App",
      "gh_AssignedEvent",
      "gh_AutoMergeDisabledEvent",
      "gh_AutoMergeEnabledEvent",
      "gh_AutoRebaseEnabledEvent",
      "gh_AutoSquashEnabledEvent",
      "gh_AutomaticBaseChangeFailedEvent",
      "gh_AutomaticBaseChangeSucceededEvent",
      "gh_BaseRefChangedEvent",
      "gh_BaseRefDeletedEvent",
      "gh_BaseRefForcePushedEvent",
      "gh_Blob",
      "gh_Bot",
      "gh_BranchProtectionRule",
      "gh_BypassForcePushAllowance",
      "gh_BypassPullRequestAllowance",
      "gh_CWE",
      "gh_CheckRun",
      "gh_CheckSuite",
      "gh_ClosedEvent",
      "gh_CodeOfConduct",
      "gh_CommentDeletedEvent",
      "gh_Commit",
      "gh_CommitComment",
      "gh_CommitCommentThread",
      "gh_ConnectedEvent",
      "gh_ConvertToDraftEvent",
      "gh_ConvertedNoteToIssueEvent",
      "gh_ConvertedToDiscussionEvent",
      "gh_CrossReferencedEvent",
      "gh_DemilestonedEvent",
      "gh_DeployKey",
      "gh_DeployedEvent",
      "gh_Deployment",
      "gh_DeploymentEnvironmentChangedEvent",
      "gh_DeploymentReview",
      "gh_DeploymentStatus",
      "gh_DisconnectedEvent",
      "gh_Discussion",
      "gh_DiscussionCategory",
      "gh_DiscussionComment",
      "gh_DraftIssue",
      "gh_Enterprise",
      "gh_EnterpriseAdministratorInvitation",
      "gh_EnterpriseIdentityProvider",
      "gh_EnterpriseRepositoryInfo",
      "gh_EnterpriseServerInstallation",
      "gh_EnterpriseServerUserAccount",
      "gh_EnterpriseServerUserAccountEmail",
      "gh_EnterpriseServerUserAccountsUpload",
      "gh_EnterpriseUserAccount",
      "gh_Environment",
      "gh_ExternalIdentity",
      "gh_Gist",
      "gh_GistComment",
      "gh_HeadRefDeletedEvent",
      "gh_HeadRefForcePushedEvent",
      "gh_HeadRefRestoredEvent",
      "gh_IpAllowListEntry",
      "gh_Issue",
      "gh_IssueComment",
      "gh_Label",
      "gh_LabeledEvent",
      "gh_Language",
      "gh_License",
      "gh_LockedEvent",
      "gh_Mannequin",
      "gh_MarkedAsDuplicateEvent",
      "gh_MarketplaceCategory",
      "gh_MarketplaceListing",
      "gh_MembersCanDeleteReposClearAuditEntry",
      "gh_MembersCanDeleteReposDisableAuditEntry",
      "gh_MembersCanDeleteReposEnableAuditEntry",
      "gh_MentionedEvent",
      "gh_MergedEvent",
      "gh_MigrationSource",
      "gh_Milestone",
      "gh_MilestonedEvent",
      "gh_MovedColumnsInProjectEvent",
      "gh_OIDCProvider",
      "gh_OauthApplicationCreateAuditEntry",
      "gh_OrgAddBillingManagerAuditEntry",
      "gh_OrgAddMemberAuditEntry",
      "gh_OrgBlockUserAuditEntry",
      "gh_OrgConfigDisableCollaboratorsOnlyAuditEntry",
      "gh_OrgConfigEnableCollaboratorsOnlyAuditEntry",
      "gh_OrgCreateAuditEntry",
      "gh_OrgDisableOauthAppRestrictionsAuditEntry",
      "gh_OrgDisableSamlAuditEntry",
      "gh_OrgDisableTwoFactorRequirementAuditEntry",
      "gh_OrgEnableOauthAppRestrictionsAuditEntry",
      "gh_OrgEnableSamlAuditEntry",
      "gh_OrgEnableTwoFactorRequirementAuditEntry",
      "gh_OrgInviteMemberAuditEntry",
      "gh_OrgInviteToBusinessAuditEntry",
      "gh_OrgOauthAppAccessApprovedAuditEntry",
      "gh_OrgOauthAppAccessDeniedAuditEntry",
      "gh_OrgOauthAppAccessRequestedAuditEntry",
      "gh_OrgRemoveBillingManagerAuditEntry",
      "gh_OrgRemoveMemberAuditEntry",
      "gh_OrgRemoveOutsideCollaboratorAuditEntry",
      "gh_OrgRestoreMemberAuditEntry",
      "gh_OrgUnblockUserAuditEntry",
      "gh_OrgUpdateDefaultRepositoryPermissionAuditEntry",
      "gh_OrgUpdateMemberAuditEntry",
      "gh_OrgUpdateMemberRepositoryCreationPermissionAuditEntry",
      "gh_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry",
      "gh_Organization",
      "gh_OrganizationIdentityProvider",
      "gh_OrganizationInvitation",
      "gh_Package",
      "gh_PackageFile",
      "gh_PackageTag",
      "gh_PackageVersion",
      "gh_PinnedDiscussion",
      "gh_PinnedEvent",
      "gh_PinnedIssue",
      "gh_PrivateRepositoryForkingDisableAuditEntry",
      "gh_PrivateRepositoryForkingEnableAuditEntry",
      "gh_Project",
      "gh_ProjectCard",
      "gh_ProjectColumn",
      "gh_ProjectNext",
      "gh_ProjectNextField",
      "gh_ProjectNextItem",
      "gh_ProjectNextItemFieldValue",
      "gh_ProjectView",
      "gh_PublicKey",
      "gh_PullRequest",
      "gh_PullRequestCommit",
      "gh_PullRequestCommitCommentThread",
      "gh_PullRequestReview",
      "gh_PullRequestReviewComment",
      "gh_PullRequestReviewThread",
      "gh_Push",
      "gh_PushAllowance",
      "gh_Reaction",
      "gh_ReadyForReviewEvent",
      "gh_Ref",
      "gh_ReferencedEvent",
      "gh_Release",
      "gh_ReleaseAsset",
      "gh_RemovedFromProjectEvent",
      "gh_RenamedTitleEvent",
      "gh_ReopenedEvent",
      "gh_RepoAccessAuditEntry",
      "gh_RepoAddMemberAuditEntry",
      "gh_RepoAddTopicAuditEntry",
      "gh_RepoArchivedAuditEntry",
      "gh_RepoChangeMergeSettingAuditEntry",
      "gh_RepoConfigDisableAnonymousGitAccessAuditEntry",
      "gh_RepoConfigDisableCollaboratorsOnlyAuditEntry",
      "gh_RepoConfigDisableContributorsOnlyAuditEntry",
      "gh_RepoConfigDisableSockpuppetDisallowedAuditEntry",
      "gh_RepoConfigEnableAnonymousGitAccessAuditEntry",
      "gh_RepoConfigEnableCollaboratorsOnlyAuditEntry",
      "gh_RepoConfigEnableContributorsOnlyAuditEntry",
      "gh_RepoConfigEnableSockpuppetDisallowedAuditEntry",
      "gh_RepoConfigLockAnonymousGitAccessAuditEntry",
      "gh_RepoConfigUnlockAnonymousGitAccessAuditEntry",
      "gh_RepoCreateAuditEntry",
      "gh_RepoDestroyAuditEntry",
      "gh_RepoRemoveMemberAuditEntry",
      "gh_RepoRemoveTopicAuditEntry",
      "gh_Repository",
      "gh_RepositoryInvitation",
      "gh_RepositoryMigration",
      "gh_RepositoryTopic",
      "gh_RepositoryVisibilityChangeDisableAuditEntry",
      "gh_RepositoryVisibilityChangeEnableAuditEntry",
      "gh_RepositoryVulnerabilityAlert",
      "gh_ReviewDismissalAllowance",
      "gh_ReviewDismissedEvent",
      "gh_ReviewRequest",
      "gh_ReviewRequestRemovedEvent",
      "gh_ReviewRequestedEvent",
      "gh_SavedReply",
      "gh_SecurityAdvisory",
      "gh_SponsorsActivity",
      "gh_SponsorsListing",
      "gh_SponsorsTier",
      "gh_Sponsorship",
      "gh_SponsorshipNewsletter",
      "gh_Status",
      "gh_StatusCheckRollup",
      "gh_StatusContext",
      "gh_SubscribedEvent",
      "gh_Tag",
      "gh_Team",
      "gh_TeamAddMemberAuditEntry",
      "gh_TeamAddRepositoryAuditEntry",
      "gh_TeamChangeParentTeamAuditEntry",
      "gh_TeamDiscussion",
      "gh_TeamDiscussionComment",
      "gh_TeamRemoveMemberAuditEntry",
      "gh_TeamRemoveRepositoryAuditEntry",
      "gh_Topic",
      "gh_TransferredEvent",
      "gh_Tree",
      "gh_UnassignedEvent",
      "gh_UnlabeledEvent",
      "gh_UnlockedEvent",
      "gh_UnmarkedAsDuplicateEvent",
      "gh_UnpinnedEvent",
      "gh_UnsubscribedEvent",
      "gh_User",
      "gh_UserBlockedEvent",
      "gh_UserContentEdit",
      "gh_UserStatus",
      "gh_VerifiableDomain",
      "gh_Workflow",
      "gh_WorkflowRun"
    ],
    "gh_OauthApplicationAuditEntryData": [
      "gh_OauthApplicationCreateAuditEntry",
      "gh_OrgOauthAppAccessApprovedAuditEntry",
      "gh_OrgOauthAppAccessDeniedAuditEntry",
      "gh_OrgOauthAppAccessRequestedAuditEntry"
    ],
    "gh_OrgRestoreMemberAuditEntryMembership": [
      "gh_OrgRestoreMemberMembershipOrganizationAuditEntryData",
      "gh_OrgRestoreMemberMembershipRepositoryAuditEntryData",
      "gh_OrgRestoreMemberMembershipTeamAuditEntryData"
    ],
    "gh_OrganizationAuditEntry": [
      "gh_MembersCanDeleteReposClearAuditEntry",
      "gh_MembersCanDeleteReposDisableAuditEntry",
      "gh_MembersCanDeleteReposEnableAuditEntry",
      "gh_OauthApplicationCreateAuditEntry",
      "gh_OrgAddBillingManagerAuditEntry",
      "gh_OrgAddMemberAuditEntry",
      "gh_OrgBlockUserAuditEntry",
      "gh_OrgConfigDisableCollaboratorsOnlyAuditEntry",
      "gh_OrgConfigEnableCollaboratorsOnlyAuditEntry",
      "gh_OrgCreateAuditEntry",
      "gh_OrgDisableOauthAppRestrictionsAuditEntry",
      "gh_OrgDisableSamlAuditEntry",
      "gh_OrgDisableTwoFactorRequirementAuditEntry",
      "gh_OrgEnableOauthAppRestrictionsAuditEntry",
      "gh_OrgEnableSamlAuditEntry",
      "gh_OrgEnableTwoFactorRequirementAuditEntry",
      "gh_OrgInviteMemberAuditEntry",
      "gh_OrgInviteToBusinessAuditEntry",
      "gh_OrgOauthAppAccessApprovedAuditEntry",
      "gh_OrgOauthAppAccessDeniedAuditEntry",
      "gh_OrgOauthAppAccessRequestedAuditEntry",
      "gh_OrgRemoveBillingManagerAuditEntry",
      "gh_OrgRemoveMemberAuditEntry",
      "gh_OrgRemoveOutsideCollaboratorAuditEntry",
      "gh_OrgRestoreMemberAuditEntry",
      "gh_OrgUnblockUserAuditEntry",
      "gh_OrgUpdateDefaultRepositoryPermissionAuditEntry",
      "gh_OrgUpdateMemberAuditEntry",
      "gh_OrgUpdateMemberRepositoryCreationPermissionAuditEntry",
      "gh_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry",
      "gh_PrivateRepositoryForkingDisableAuditEntry",
      "gh_PrivateRepositoryForkingEnableAuditEntry",
      "gh_RepoAccessAuditEntry",
      "gh_RepoAddMemberAuditEntry",
      "gh_RepoAddTopicAuditEntry",
      "gh_RepoArchivedAuditEntry",
      "gh_RepoChangeMergeSettingAuditEntry",
      "gh_RepoConfigDisableAnonymousGitAccessAuditEntry",
      "gh_RepoConfigDisableCollaboratorsOnlyAuditEntry",
      "gh_RepoConfigDisableContributorsOnlyAuditEntry",
      "gh_RepoConfigDisableSockpuppetDisallowedAuditEntry",
      "gh_RepoConfigEnableAnonymousGitAccessAuditEntry",
      "gh_RepoConfigEnableCollaboratorsOnlyAuditEntry",
      "gh_RepoConfigEnableContributorsOnlyAuditEntry",
      "gh_RepoConfigEnableSockpuppetDisallowedAuditEntry",
      "gh_RepoConfigLockAnonymousGitAccessAuditEntry",
      "gh_RepoConfigUnlockAnonymousGitAccessAuditEntry",
      "gh_RepoCreateAuditEntry",
      "gh_RepoDestroyAuditEntry",
      "gh_RepoRemoveMemberAuditEntry",
      "gh_RepoRemoveTopicAuditEntry",
      "gh_RepositoryVisibilityChangeDisableAuditEntry",
      "gh_RepositoryVisibilityChangeEnableAuditEntry",
      "gh_TeamAddMemberAuditEntry",
      "gh_TeamAddRepositoryAuditEntry",
      "gh_TeamChangeParentTeamAuditEntry",
      "gh_TeamRemoveMemberAuditEntry",
      "gh_TeamRemoveRepositoryAuditEntry"
    ],
    "gh_OrganizationAuditEntryData": [
      "gh_MembersCanDeleteReposClearAuditEntry",
      "gh_MembersCanDeleteReposDisableAuditEntry",
      "gh_MembersCanDeleteReposEnableAuditEntry",
      "gh_OauthApplicationCreateAuditEntry",
      "gh_OrgAddBillingManagerAuditEntry",
      "gh_OrgAddMemberAuditEntry",
      "gh_OrgBlockUserAuditEntry",
      "gh_OrgConfigDisableCollaboratorsOnlyAuditEntry",
      "gh_OrgConfigEnableCollaboratorsOnlyAuditEntry",
      "gh_OrgCreateAuditEntry",
      "gh_OrgDisableOauthAppRestrictionsAuditEntry",
      "gh_OrgDisableSamlAuditEntry",
      "gh_OrgDisableTwoFactorRequirementAuditEntry",
      "gh_OrgEnableOauthAppRestrictionsAuditEntry",
      "gh_OrgEnableSamlAuditEntry",
      "gh_OrgEnableTwoFactorRequirementAuditEntry",
      "gh_OrgInviteMemberAuditEntry",
      "gh_OrgInviteToBusinessAuditEntry",
      "gh_OrgOauthAppAccessApprovedAuditEntry",
      "gh_OrgOauthAppAccessDeniedAuditEntry",
      "gh_OrgOauthAppAccessRequestedAuditEntry",
      "gh_OrgRemoveBillingManagerAuditEntry",
      "gh_OrgRemoveMemberAuditEntry",
      "gh_OrgRemoveOutsideCollaboratorAuditEntry",
      "gh_OrgRestoreMemberAuditEntry",
      "gh_OrgRestoreMemberMembershipOrganizationAuditEntryData",
      "gh_OrgUnblockUserAuditEntry",
      "gh_OrgUpdateDefaultRepositoryPermissionAuditEntry",
      "gh_OrgUpdateMemberAuditEntry",
      "gh_OrgUpdateMemberRepositoryCreationPermissionAuditEntry",
      "gh_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry",
      "gh_PrivateRepositoryForkingDisableAuditEntry",
      "gh_PrivateRepositoryForkingEnableAuditEntry",
      "gh_RepoAccessAuditEntry",
      "gh_RepoAddMemberAuditEntry",
      "gh_RepoAddTopicAuditEntry",
      "gh_RepoArchivedAuditEntry",
      "gh_RepoChangeMergeSettingAuditEntry",
      "gh_RepoConfigDisableAnonymousGitAccessAuditEntry",
      "gh_RepoConfigDisableCollaboratorsOnlyAuditEntry",
      "gh_RepoConfigDisableContributorsOnlyAuditEntry",
      "gh_RepoConfigDisableSockpuppetDisallowedAuditEntry",
      "gh_RepoConfigEnableAnonymousGitAccessAuditEntry",
      "gh_RepoConfigEnableCollaboratorsOnlyAuditEntry",
      "gh_RepoConfigEnableContributorsOnlyAuditEntry",
      "gh_RepoConfigEnableSockpuppetDisallowedAuditEntry",
      "gh_RepoConfigLockAnonymousGitAccessAuditEntry",
      "gh_RepoConfigUnlockAnonymousGitAccessAuditEntry",
      "gh_RepoCreateAuditEntry",
      "gh_RepoDestroyAuditEntry",
      "gh_RepoRemoveMemberAuditEntry",
      "gh_RepoRemoveTopicAuditEntry",
      "gh_RepositoryVisibilityChangeDisableAuditEntry",
      "gh_RepositoryVisibilityChangeEnableAuditEntry",
      "gh_TeamAddMemberAuditEntry",
      "gh_TeamAddRepositoryAuditEntry",
      "gh_TeamChangeParentTeamAuditEntry",
      "gh_TeamRemoveMemberAuditEntry",
      "gh_TeamRemoveRepositoryAuditEntry"
    ],
    "gh_PackageOwner": [
      "gh_Organization",
      "gh_Repository",
      "gh_User"
    ],
    "gh_PermissionGranter": [
      "gh_Organization",
      "gh_Repository",
      "gh_Team"
    ],
    "gh_PinnableItem": [
      "gh_Gist",
      "gh_Repository"
    ],
    "gh_ProfileOwner": [
      "gh_Organization",
      "gh_User"
    ],
    "gh_ProjectCardItem": [
      "gh_Issue",
      "gh_PullRequest"
    ],
    "gh_ProjectNextFieldCommon": [
      "gh_ProjectNextField"
    ],
    "gh_ProjectNextItemContent": [
      "gh_DraftIssue",
      "gh_Issue",
      "gh_PullRequest"
    ],
    "gh_ProjectNextOwner": [
      "gh_Issue",
      "gh_Organization",
      "gh_PullRequest",
      "gh_User"
    ],
    "gh_ProjectOwner": [
      "gh_Organization",
      "gh_Repository",
      "gh_User"
    ],
    "gh_ProjectV2Owner": [
      "gh_Issue",
      "gh_Organization",
      "gh_PullRequest",
      "gh_User"
    ],
    "gh_PullRequestTimelineItem": [
      "gh_AssignedEvent",
      "gh_BaseRefDeletedEvent",
      "gh_BaseRefForcePushedEvent",
      "gh_ClosedEvent",
      "gh_Commit",
      "gh_CommitCommentThread",
      "gh_CrossReferencedEvent",
      "gh_DemilestonedEvent",
      "gh_DeployedEvent",
      "gh_DeploymentEnvironmentChangedEvent",
      "gh_HeadRefDeletedEvent",
      "gh_HeadRefForcePushedEvent",
      "gh_HeadRefRestoredEvent",
      "gh_IssueComment",
      "gh_LabeledEvent",
      "gh_LockedEvent",
      "gh_MergedEvent",
      "gh_MilestonedEvent",
      "gh_PullRequestReview",
      "gh_PullRequestReviewComment",
      "gh_PullRequestReviewThread",
      "gh_ReferencedEvent",
      "gh_RenamedTitleEvent",
      "gh_ReopenedEvent",
      "gh_ReviewDismissedEvent",
      "gh_ReviewRequestRemovedEvent",
      "gh_ReviewRequestedEvent",
      "gh_SubscribedEvent",
      "gh_UnassignedEvent",
      "gh_UnlabeledEvent",
      "gh_UnlockedEvent",
      "gh_UnsubscribedEvent",
      "gh_UserBlockedEvent"
    ],
    "gh_PullRequestTimelineItems": [
      "gh_AddedToProjectEvent",
      "gh_AssignedEvent",
      "gh_AutoMergeDisabledEvent",
      "gh_AutoMergeEnabledEvent",
      "gh_AutoRebaseEnabledEvent",
      "gh_AutoSquashEnabledEvent",
      "gh_AutomaticBaseChangeFailedEvent",
      "gh_AutomaticBaseChangeSucceededEvent",
      "gh_BaseRefChangedEvent",
      "gh_BaseRefDeletedEvent",
      "gh_BaseRefForcePushedEvent",
      "gh_ClosedEvent",
      "gh_CommentDeletedEvent",
      "gh_ConnectedEvent",
      "gh_ConvertToDraftEvent",
      "gh_ConvertedNoteToIssueEvent",
      "gh_ConvertedToDiscussionEvent",
      "gh_CrossReferencedEvent",
      "gh_DemilestonedEvent",
      "gh_DeployedEvent",
      "gh_DeploymentEnvironmentChangedEvent",
      "gh_DisconnectedEvent",
      "gh_HeadRefDeletedEvent",
      "gh_HeadRefForcePushedEvent",
      "gh_HeadRefRestoredEvent",
      "gh_IssueComment",
      "gh_LabeledEvent",
      "gh_LockedEvent",
      "gh_MarkedAsDuplicateEvent",
      "gh_MentionedEvent",
      "gh_MergedEvent",
      "gh_MilestonedEvent",
      "gh_MovedColumnsInProjectEvent",
      "gh_PinnedEvent",
      "gh_PullRequestCommit",
      "gh_PullRequestCommitCommentThread",
      "gh_PullRequestReview",
      "gh_PullRequestReviewThread",
      "gh_PullRequestRevisionMarker",
      "gh_ReadyForReviewEvent",
      "gh_ReferencedEvent",
      "gh_RemovedFromProjectEvent",
      "gh_RenamedTitleEvent",
      "gh_ReopenedEvent",
      "gh_ReviewDismissedEvent",
      "gh_ReviewRequestRemovedEvent",
      "gh_ReviewRequestedEvent",
      "gh_SubscribedEvent",
      "gh_TransferredEvent",
      "gh_UnassignedEvent",
      "gh_UnlabeledEvent",
      "gh_UnlockedEvent",
      "gh_UnmarkedAsDuplicateEvent",
      "gh_UnpinnedEvent",
      "gh_UnsubscribedEvent",
      "gh_UserBlockedEvent"
    ],
    "gh_PushAllowanceActor": [
      "gh_App",
      "gh_Team",
      "gh_User"
    ],
    "gh_Reactable": [
      "gh_CommitComment",
      "gh_Discussion",
      "gh_DiscussionComment",
      "gh_Issue",
      "gh_IssueComment",
      "gh_PullRequest",
      "gh_PullRequestReview",
      "gh_PullRequestReviewComment",
      "gh_Release",
      "gh_TeamDiscussion",
      "gh_TeamDiscussionComment"
    ],
    "gh_Reactor": [
      "gh_Bot",
      "gh_Mannequin",
      "gh_Organization",
      "gh_User"
    ],
    "gh_ReferencedSubject": [
      "gh_Issue",
      "gh_PullRequest"
    ],
    "gh_RenamedTitleSubject": [
      "gh_Issue",
      "gh_PullRequest"
    ],
    "gh_RepositoryAuditEntryData": [
      "gh_OrgRestoreMemberMembershipRepositoryAuditEntryData",
      "gh_PrivateRepositoryForkingDisableAuditEntry",
      "gh_PrivateRepositoryForkingEnableAuditEntry",
      "gh_RepoAccessAuditEntry",
      "gh_RepoAddMemberAuditEntry",
      "gh_RepoAddTopicAuditEntry",
      "gh_RepoArchivedAuditEntry",
      "gh_RepoChangeMergeSettingAuditEntry",
      "gh_RepoConfigDisableAnonymousGitAccessAuditEntry",
      "gh_RepoConfigDisableCollaboratorsOnlyAuditEntry",
      "gh_RepoConfigDisableContributorsOnlyAuditEntry",
      "gh_RepoConfigDisableSockpuppetDisallowedAuditEntry",
      "gh_RepoConfigEnableAnonymousGitAccessAuditEntry",
      "gh_RepoConfigEnableCollaboratorsOnlyAuditEntry",
      "gh_RepoConfigEnableContributorsOnlyAuditEntry",
      "gh_RepoConfigEnableSockpuppetDisallowedAuditEntry",
      "gh_RepoConfigLockAnonymousGitAccessAuditEntry",
      "gh_RepoConfigUnlockAnonymousGitAccessAuditEntry",
      "gh_RepoCreateAuditEntry",
      "gh_RepoDestroyAuditEntry",
      "gh_RepoRemoveMemberAuditEntry",
      "gh_RepoRemoveTopicAuditEntry",
      "gh_TeamAddRepositoryAuditEntry",
      "gh_TeamRemoveRepositoryAuditEntry"
    ],
    "gh_RepositoryDiscussionAuthor": [
      "gh_Organization",
      "gh_User"
    ],
    "gh_RepositoryDiscussionCommentAuthor": [
      "gh_Organization",
      "gh_User"
    ],
    "gh_RepositoryInfo": [
      "gh_Repository"
    ],
    "gh_RepositoryNode": [
      "gh_CommitComment",
      "gh_CommitCommentThread",
      "gh_DependabotUpdate",
      "gh_Discussion",
      "gh_DiscussionCategory",
      "gh_Issue",
      "gh_IssueComment",
      "gh_PinnedDiscussion",
      "gh_PullRequest",
      "gh_PullRequestCommitCommentThread",
      "gh_PullRequestReview",
      "gh_PullRequestReviewComment",
      "gh_RepositoryVulnerabilityAlert"
    ],
    "gh_RepositoryOwner": [
      "gh_Organization",
      "gh_User"
    ],
    "gh_RequestedReviewer": [
      "gh_Mannequin",
      "gh_Team",
      "gh_User"
    ],
    "gh_RequirableByPullRequest": [
      "gh_CheckRun",
      "gh_StatusContext"
    ],
    "gh_ReviewDismissalAllowanceActor": [
      "gh_Team",
      "gh_User"
    ],
    "gh_SearchResultItem": [
      "gh_App",
      "gh_Discussion",
      "gh_Issue",
      "gh_MarketplaceListing",
      "gh_Organization",
      "gh_PullRequest",
      "gh_Repository",
      "gh_User"
    ],
    "gh_Sponsor": [
      "gh_Organization",
      "gh_User"
    ],
    "gh_Sponsorable": [
      "gh_Organization",
      "gh_User"
    ],
    "gh_SponsorableItem": [
      "gh_Organization",
      "gh_User"
    ],
    "gh_Starrable": [
      "gh_Gist",
      "gh_Repository",
      "gh_Topic"
    ],
    "gh_StatusCheckRollupContext": [
      "gh_CheckRun",
      "gh_StatusContext"
    ],
    "gh_Subscribable": [
      "gh_Commit",
      "gh_Discussion",
      "gh_Issue",
      "gh_PullRequest",
      "gh_Repository",
      "gh_Team",
      "gh_TeamDiscussion"
    ],
    "gh_TeamAuditEntryData": [
      "gh_OrgRestoreMemberMembershipTeamAuditEntryData",
      "gh_TeamAddMemberAuditEntry",
      "gh_TeamAddRepositoryAuditEntry",
      "gh_TeamChangeParentTeamAuditEntry",
      "gh_TeamRemoveMemberAuditEntry",
      "gh_TeamRemoveRepositoryAuditEntry"
    ],
    "gh_TopicAuditEntryData": [
      "gh_RepoAddTopicAuditEntry",
      "gh_RepoRemoveTopicAuditEntry"
    ],
    "gh_UniformResourceLocatable": [
      "gh_Bot",
      "gh_CheckRun",
      "gh_ClosedEvent",
      "gh_Commit",
      "gh_ConvertToDraftEvent",
      "gh_CrossReferencedEvent",
      "gh_Gist",
      "gh_Issue",
      "gh_Mannequin",
      "gh_MergedEvent",
      "gh_Milestone",
      "gh_Organization",
      "gh_PullRequest",
      "gh_PullRequestCommit",
      "gh_ReadyForReviewEvent",
      "gh_Release",
      "gh_Repository",
      "gh_RepositoryTopic",
      "gh_ReviewDismissedEvent",
      "gh_TeamDiscussion",
      "gh_TeamDiscussionComment",
      "gh_User"
    ],
    "gh_Updatable": [
      "gh_CommitComment",
      "gh_Discussion",
      "gh_DiscussionComment",
      "gh_GistComment",
      "gh_Issue",
      "gh_IssueComment",
      "gh_Project",
      "gh_ProjectNext",
      "gh_PullRequest",
      "gh_PullRequestReview",
      "gh_PullRequestReviewComment",
      "gh_TeamDiscussion",
      "gh_TeamDiscussionComment"
    ],
    "gh_UpdatableComment": [
      "gh_CommitComment",
      "gh_DiscussionComment",
      "gh_GistComment",
      "gh_Issue",
      "gh_IssueComment",
      "gh_PullRequest",
      "gh_PullRequestReview",
      "gh_PullRequestReviewComment",
      "gh_TeamDiscussion",
      "gh_TeamDiscussionComment"
    ],
    "gh_VerifiableDomainOwner": [
      "gh_Enterprise",
      "gh_Organization"
    ],
    "gh_Votable": [
      "gh_Discussion",
      "gh_DiscussionComment"
    ],
    "graphcms_Node": [
      "graphcms_Asset",
      "graphcms_Author",
      "graphcms_BlogCategory",
      "graphcms_NavigationLink",
      "graphcms_Page",
      "graphcms_Post",
      "graphcms_ScheduledOperation",
      "graphcms_ScheduledRelease",
      "graphcms_Seo",
      "graphcms_ShowcaseCard",
      "graphcms_User"
    ],
    "graphcms_ScheduledOperationAffectedDocument": [
      "graphcms_Asset",
      "graphcms_Author",
      "graphcms_BlogCategory",
      "graphcms_NavigationLink",
      "graphcms_Page",
      "graphcms_Post",
      "graphcms_Seo",
      "graphcms_ShowcaseCard"
    ],
    "graphcms_SeoParent": [
      "graphcms_Page",
      "graphcms_Post"
    ]
  }
};
      export default result;
    
export const PostAuthorFragmentDoc = gql`
    fragment PostAuthor on graphcms_Author {
  name
  twitterHandle
  picture {
    handle
    height
    width
  }
}
    `;
export const PostContentFragmentDoc = gql`
    fragment PostContent on graphcms_RichText {
  raw
}
    `;
export const CoverImageFragmentDoc = gql`
    fragment CoverImage on graphcms_Asset {
  width
  height
  handle
}
    `;
export const RepoFragmentDoc = gql`
    fragment Repo on gh_Repository {
  name
  description
  url
  stargazers {
    totalCount
  }
  watchers {
    totalCount
  }
  forks {
    totalCount
  }
}
    `;
export const ReposFragmentDoc = gql`
    fragment Repos on gh_RepositoryConnection {
  totalCount
  nodes {
    ...Repo
  }
}
    ${RepoFragmentDoc}`;
export const GithubUserFragmentDoc = gql`
    fragment GithubUser on gh_User {
  login
  name
  bio
  avatarUrl
  url
  company
  location
  followers {
    totalCount
  }
  following {
    totalCount
  }
  contributionsCollection {
    contributionCalendar {
      weeks {
        contributionDays {
          contributionLevel
          contributionCount
        }
      }
      totalContributions
    }
    contributionYears
    totalCommitContributions
    totalIssueContributions
    totalPullRequestContributions
  }
  repositories(first: 100) {
    ...Repos
  }
}
    ${ReposFragmentDoc}`;
export const CategoryDocument = gql`
    query Category($category: String!) {
  graphcms {
    blogCategory(where: {slug: $category}) {
      name
    }
  }
}
    `;
export const CategoriesDocument = gql`
    query Categories {
  graphcms {
    blogCategories(orderBy: name_ASC) {
      slug
      name
    }
  }
}
    `;
export const PostsExcerptsDocument = gql`
    query PostsExcerpts($postsPerPage: Int!, $skip: Int!, $category: String!) {
  graphcms {
    posts(
      first: $postsPerPage
      stage: PUBLISHED
      skip: $skip
      orderBy: date_DESC
      where: {categories_some: {slug_starts_with: $category}}
    ) {
      author {
        ...PostAuthor
      }
      excerpt
      slug
      title
      coverImage {
        ...CoverImage
      }
    }
    postsConnection(
      stage: PUBLISHED
      where: {categories_some: {slug_starts_with: $category}}
    ) {
      aggregate {
        count
      }
    }
  }
}
    ${PostAuthorFragmentDoc}
${CoverImageFragmentDoc}`;
export const PostBySlugDocument = gql`
    query PostBySlug($slug: String!) {
  graphcms {
    post(where: {slug: $slug}, stage: PUBLISHED) {
      author {
        ...PostAuthor
      }
      content {
        ...PostContent
      }
      coverImage {
        ...CoverImage
      }
      date
      excerpt
      slug
      title
    }
  }
}
    ${PostAuthorFragmentDoc}
${PostContentFragmentDoc}
${CoverImageFragmentDoc}`;
export const GitHubUserDocument = gql`
    query gitHubUser($username: String!) {
  github {
    user(login: $username) {
      ...GithubUser
    }
  }
}
    ${GithubUserFragmentDoc}`;
export const GetNavigationDocument = gql`
    query GetNavigation {
  graphcms {
    navigationLinks {
      url
      linkText
    }
  }
}
    `;

export type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;


const defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType) => action();

export function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {
  return {
    Category(variables: CategoryQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<CategoryQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<CategoryQuery>(CategoryDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Category', 'query');
    },
    Categories(variables?: CategoriesQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<CategoriesQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<CategoriesQuery>(CategoriesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Categories', 'query');
    },
    PostsExcerpts(variables: PostsExcerptsQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<PostsExcerptsQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<PostsExcerptsQuery>(PostsExcerptsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'PostsExcerpts', 'query');
    },
    PostBySlug(variables: PostBySlugQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<PostBySlugQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<PostBySlugQuery>(PostBySlugDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'PostBySlug', 'query');
    },
    gitHubUser(variables: GitHubUserQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<GitHubUserQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<GitHubUserQuery>(GitHubUserDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'gitHubUser', 'query');
    },
    GetNavigation(variables?: GetNavigationQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetNavigationQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<GetNavigationQuery>(GetNavigationDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetNavigation', 'query');
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;